

;
; +-------------------------------------------------------------------------+
; |      This file was generated by The Interactive Disassembler (IDA)      |
; |           Copyright (c) 2018 Hex-Rays, <support@hex-rays.com>           |
; +-------------------------------------------------------------------------+
;
; Input SHA256 : 47DE411EC6A7A8606D39C54F5BAB51B6B783362E45ABFBCF16461FAA08AFE378
; Input MD5    : 879B982F43FB3D82D51D6F81B63A59BC
; Input CRC32  : A935E0C0

; File Name   : F:\MagicTower\MagicTower\Files\Files\MTE.EXE
; Format      : MS-DOS executable (EXE)
; Base Address: 1000h Range: 10000h-283C0h Loaded length: 179B7h
; Entry Point : 1D65:12
; OS type         :  MS DOS
; Application type:  Executable 16bit

.686p
.mmx
.model large


; Segment type: Pure code
seg000 segment byte public 'CODE' use16
assume cs:seg000
assume es:nothing, ss:nothing, ds:dseg, fs:nothing, gs:nothing


; Attributes: bp-based frame

sub_10000 proc far

var_76= word ptr -76h
var_74= dword ptr -74h
var_70= dword ptr -70h
var_6C= word ptr -6Ch
var_6A= word ptr -6Ah
var_68= word ptr -68h
var_66= word ptr -66h
var_64= word ptr -64h
var_62= word ptr -62h
var_60= word ptr -60h
var_5E= word ptr -5Eh
var_5C= word ptr -5Ch
var_5A= word ptr -5Ah
var_58= word ptr -58h
var_56= word ptr -56h
var_54= word ptr -54h
var_52= word ptr -52h
var_50= word ptr -50h
var_4E= word ptr -4Eh
var_4C= word ptr -4Ch
var_4A= word ptr -4Ah
var_48= word ptr -48h
var_46= word ptr -46h
var_44= word ptr -44h
var_42= word ptr -42h
var_40= word ptr -40h
var_3E= word ptr -3Eh
var_3C= word ptr -3Ch
var_3A= word ptr -3Ah
var_38= word ptr -38h
var_36= word ptr -36h
var_34= word ptr -34h
var_32= word ptr -32h
var_30= word ptr -30h
var_2E= word ptr -2Eh
var_2C= word ptr -2Ch
var_2A= word ptr -2Ah
var_28= word ptr -28h
var_26= word ptr -26h
var_24= word ptr -24h
var_22= word ptr -22h
var_20= word ptr -20h
var_1E= word ptr -1Eh
var_1C= word ptr -1Ch
var_1A= word ptr -1Ah
var_18= word ptr -18h
var_16= word ptr -16h
var_14= word ptr -14h
var_12= word ptr -12h
var_10= word ptr -10h
var_E= word ptr -0Eh
var_C= word ptr -0Ch
var_A= word ptr -0Ah
var_8= word ptr -8
var_6= word ptr -6
var_4= word ptr -4
var_2= word ptr -2
arg_BA= byte ptr  0C0h

push    bp
mov     bp, sp
sub     sp, 76h
push    di
push    si
mov     [bp+var_6C], 2
mov     [bp+var_68], 5Dh ; ']'
mov     [bp+var_66], 3
mov     [bp+var_64], 28h ; '('
mov     [bp+var_62], 50h ; 'P'
mov     [bp+var_60], 4
mov     [bp+var_5E], 29h ; ')'
mov     [bp+var_5C], 51h ; 'Q'
mov     [bp+var_5A], 6
mov     [bp+var_56], 52h ; 'R'
mov     [bp+var_52], 2Bh ; '+'
mov     [bp+var_50], 53h ; 'S'
mov     ax, 10h
mov     [bp+var_54], ax
mov     [bp+var_4E], ax
mov     [bp+var_4C], 2Ch ; ','
mov     [bp+var_4A], 55h ; 'U'
mov     [bp+var_48], 12h
mov     [bp+var_44], 54h ; 'T'
mov     [bp+var_42], 15h
mov     [bp+var_3E], 57h ; 'W'
mov     [bp+var_3C], 1Bh
mov     [bp+var_3A], 2Fh ; '/'
mov     [bp+var_38], 5Ch ; '\'
mov     [bp+var_36], 1Fh
mov     [bp+var_32], 58h ; 'X'
mov     [bp+var_30], 21h ; '!'
mov     [bp+var_2E], 31h ; '1'
mov     [bp+var_2C], 59h ; 'Y'
mov     [bp+var_2A], 24h ; '$'
mov     [bp+var_28], 32h ; '2'
mov     [bp+var_26], 56h ; 'V'
mov     [bp+var_24], 25h ; '%'
mov     [bp+var_22], 33h ; '3'
mov     [bp+var_20], 5Ah ; 'Z'
mov     ax, 27h ; '''
mov     [bp+var_6A], ax
mov     [bp+var_1E], ax
mov     [bp+var_1C], 34h ; '4'
mov     [bp+var_1A], 5Bh ; '['
mov     ax, 2Ah ; '*'
mov     [bp+var_58], ax
mov     [bp+var_18], ax
mov     [bp+var_16], 35h ; '5'
mov     [bp+var_14], 5Eh ; '^'
mov     ax, 2Dh ; '-'
mov     [bp+var_46], ax
mov     [bp+var_12], ax
mov     [bp+var_10], 36h ; '6'
mov     [bp+var_E], 5Fh ; '_'
mov     ax, 2Eh ; '.'
mov     [bp+var_40], ax
mov     [bp+var_C], ax
mov     [bp+var_A], 37h ; '7'
mov     [bp+var_8], 60h ; '`'
mov     ax, 30h ; '0'
mov     [bp+var_34], ax
mov     [bp+var_6], ax
mov     [bp+var_4], 38h ; '8'
mov     [bp+var_2], 61h ; 'a'
mov     ax, 792h
push    ax
mov     ax, 160h
push    ax
mov     ax, 16h
push    ax
sub     ax, ax
push    ax
call    sub_2016C
add     sp, 8
sub     di, di
lea     si, [bp+var_6C]
mov     es, seg_27886
assume es:seg008
mov     ax, seg seg008
mov     es, ax

loc_10135:
mov     ax, [si]
cmp     es:word_2232E, ax
jz      short loc_1014A
inc     di
add     si, 6
lea     ax, [bp+arg_BA]
cmp     si, ax
jb      short loc_10135

loc_1014A:
cmp     di, 32h ; '2'
jnz     short loc_10161
mov     ax, 1FFh
push    ds
push    ax              ; char *
call    _printf
add     sp, 4
call    sub_1C48C

loc_10161:
mov     bx, offset word_2232E
mov     es, seg_27886
mov     word ptr [bp+var_70], bx
mov     word ptr [bp+var_70+2], es
cmp     word ptr es:[bx], 10h
jnz     short loc_10181
mov     es, seg_27888
cmp     es:word_22292, 8
jbe     short loc_10181
inc     di

loc_10181:
mov     si, di
shl     si, 1
add     si, di
shl     si, 1
mov     [bp+var_76], si
mov     bx, [bp+si+var_6A]
add     bx, 1Eh
mov     es, seg_2788A
mov     word ptr [bp+var_74], bx
mov     word ptr [bp+var_74+2], es
cmp     byte ptr es:[bx], 0
jz      short loc_101A6
jmp     loc_10282

loc_101A6:
push    [bp+si+var_68]
mov     es, seg_2788C
push    es:word_22298
push    es:word_22296
mov     ax, 78h ; 'x'
push    ax
mov     ax, 6
push    ax
call    sub_194BA
add     sp, 0Ah
les     bx, [bp+var_74]
assume es:nothing
mov     byte ptr es:[bx], 1
les     bx, [bp+var_70]
cmp     word ptr es:[bx], 3
jnz     short loc_101F1
mov     ax, 6
push    ax
call    sub_20FAB
add     sp, 2
mov     es, seg_2788A
assume es:seg008
mov     es:byte_222B3, 1
push    cs
call    near ptr sub_12F8C

loc_101F1:
les     bx, [bp+var_70]
assume es:nothing
cmp     word ptr es:[bx], 10h
jnz     short loc_10220
mov     es, seg_27888
assume es:seg008
cmp     es:word_22292, 8
jbe     short loc_10220
mov     ax, 6
push    ax
call    sub_20FAB
add     sp, 2
mov     es, seg_2788A
mov     es:byte_222B7, 1
push    cs
call    near ptr sub_12F8C

loc_10220:
les     bx, [bp+var_70]
assume es:nothing
cmp     word ptr es:[bx], 2
jnz     short loc_10297
mov     es, seg_2788E
assume es:seg008
mov     ax, es:word_2232C
mov     cx, ax
shl     ax, 1
add     ax, cx
mov     cx, 64h ; 'd'
sub     dx, dx
div     cx
add     es:word_2232C, ax
mov     al, 2
push    ax
call    sub_1B96C
add     sp, 2
mov     es, seg_27890
mov     ax, es:word_222A6
mov     cx, ax
shl     ax, 1
add     ax, cx
mov     cx, 64h ; 'd'
sub     dx, dx
div     cx
add     es:word_222A6, ax
mov     al, 3
push    ax
call    sub_1B96C
add     sp, 2
mov     ax, 6
push    ax
call    sub_20FAB
add     sp, 2
jmp     short loc_10297
align 2

loc_10282:
mov     ax, 228h
push    ds
push    ax
mov     ax, 78h ; 'x'
push    ax
mov     ax, 2
push    ax
call    sub_193EC
add     sp, 8

loc_10297:
call    sub_20CDA
sub     ax, ax
push    ax
mov     ax, 160h
push    ax
mov     ax, 16h
push    ax
mov     ax, 792h
push    ax
call    sub_200C6
add     sp, 8
mov     ax, 0Ah
push    ax
call    sub_1F9E2
add     sp, 2
pop     si
pop     di
mov     sp, bp
pop     bp
retf
sub_10000 endp

align 2


; Attributes: bp-based frame

sub_102C6 proc far

var_4= dword ptr -4

push    bp
mov     bp, sp
sub     sp, 4
mov     bx, offset word_2232E
mov     es, seg_27886
mov     word ptr [bp+var_4], bx
mov     word ptr [bp+var_4+2], es
cmp     word ptr es:[bx], 0Ch
jnz     short loc_10310
mov     ax, 6
push    ax
call    sub_20FAB
add     sp, 2
mov     ax, 0F8h
les     bx, [bp+var_4]
assume es:nothing
mul     word ptr es:[bx]
mov     bx, ax
mov     es, seg_27892
assume es:dseg
mov     word ptr es:[bx+1B02h], 13h
sub     ax, ax
push    ax
mov     ax, 0Ah
push    ax
call    sub_1AE6E
add     sp, 4

loc_10310:
les     bx, [bp+var_4]
assume es:nothing
cmp     word ptr es:[bx], 10h
jnz     short loc_10348
mov     ax, 6
push    ax
call    sub_20FAB
add     sp, 2
mov     ax, 0F8h
les     bx, [bp+var_4]
mul     word ptr es:[bx]
mov     bx, ax
mov     es, seg_27892
assume es:dseg
mov     word ptr es:[bx+1BDEh], 19h
mov     ax, 0Ah
push    ax
push    ax
call    sub_1AE6E
add     sp, 4

loc_10348:
les     bx, [bp+var_4]
assume es:nothing
cmp     word ptr es:[bx], 13h
jnz     short loc_10383
mov     ax, 6
push    ax
call    sub_20FAB
add     sp, 2
mov     ax, 0F8h
les     bx, [bp+var_4]
mul     word ptr es:[bx]
mov     bx, ax
mov     es, seg_27892
assume es:dseg
mov     word ptr es:[bx+1B24h], 27h ; '''
mov     ax, 2
push    ax
mov     ax, 5
push    ax
call    sub_1AE6E
add     sp, 4

loc_10383:
les     bx, [bp+var_4]
assume es:nothing
cmp     word ptr es:[bx], 29h ; ')'
jnz     short loc_103D2
mov     ax, 0F8h
mul     word ptr es:[bx]
mov     bx, ax
mov     es, seg_27892
assume es:dseg
cmp     word ptr es:[bx+1B06h], 6
jnz     short loc_103D2
mov     ax, 6
push    ax
call    sub_20FAB
add     sp, 2
mov     ax, 0F8h
les     bx, [bp+var_4]
assume es:nothing
mul     word ptr es:[bx]
mov     bx, ax
mov     es, seg_27892
assume es:dseg
mov     word ptr es:[bx+1B16h], 97h
mov     ax, 1
push    ax
mov     ax, 9
push    ax
call    sub_1AE6E
add     sp, 4

loc_103D2:
mov     ax, 32h ; '2'
push    ax
call    sub_19288
mov     sp, bp
pop     bp
retf
sub_102C6 endp

align 2


; Attributes: bp-based frame

sub_103E0 proc far

var_1C= word ptr -1Ch
var_1A= word ptr -1Ah
var_18= word ptr -18h
var_16= word ptr -16h
var_14= byte ptr -14h
var_13= byte ptr -13h
var_12= byte ptr -12h
var_11= byte ptr -11h
var_10= byte ptr -10h
var_F= byte ptr -0Fh
var_E= byte ptr -0Eh
var_D= byte ptr -0Dh
var_C= byte ptr -0Ch
var_B= byte ptr -0Bh
var_A= byte ptr -0Ah
var_9= byte ptr -9
var_8= byte ptr -8
var_7= byte ptr -7
var_6= byte ptr -6
var_4= byte ptr -4
var_3= byte ptr -3
var_2= byte ptr -2

push    bp
mov     bp, sp
sub     sp, 1Ch
push    si
mov     al, 2
mov     [bp+var_8], al
mov     [bp+var_7], al
mov     al, 3
mov     [bp+var_4], al
mov     [bp+var_3], al
mov     [bp+var_10], al
mov     [bp+var_F], al
mov     [bp+var_E], al
mov     al, 4
mov     [bp+var_14], al
mov     [bp+var_13], al
mov     [bp+var_B], al
mov     al, 1
mov     [bp+var_12], al
mov     [bp+var_11], al
mov     [bp+var_D], al
mov     [bp+var_C], al
mov     [bp+var_A], al
mov     al, 5
mov     [bp+var_2], al
mov     [bp+var_6], al
mov     [bp+var_9], al
mov     es, seg_27886
assume es:seg008
cmp     es:word_2232E, 2
jz      short loc_10436
jmp     loc_10537

loc_10436:
mov     es, seg_2788A
cmp     es:byte_222EE, 0
jz      short loc_10445
jmp     loc_10537

loc_10445:
mov     ax, 792h
push    ax
mov     cx, 160h
push    cx
mov     dx, 16h
push    dx
sub     bx, bx
push    bx
call    sub_2016C
add     sp, 8
mov     ax, 74h ; 't'
push    ax
mov     es, seg_2788C
push    es:word_22298
push    es:word_22296
mov     ax, 78h ; 'x'
push    ax
mov     ax, 8
push    ax
call    sub_194BA
add     sp, 0Ah
call    sub_20CDA
sub     ax, ax
push    ax
mov     cx, 160h
push    cx
mov     cx, 16h
push    cx
mov     cx, 792h
push    cx
call    sub_200C6
add     sp, 8
mov     al, 88h
push    ax
mov     ax, 2846h
push    ax
mov     ax, 26CFh
push    ax
call    sub_1A986
add     sp, 6
call    sub_1ABE6
mov     [bp+var_18], 7
mov     ax, 0F8h        ; "8"
mov     es, seg_27886
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
mov     word ptr es:[bx+1B88h], 6
sub     ax, ax
mov     [bp+var_16], ax
mov     [bp+var_1A], ax
jmp     short loc_10519

loc_104DA:
push    [bp+var_18]
push    [bp+var_16]
mov     al, [bp+si+var_4]
push    ax
mov     [bp+var_1C], ax
call    sub_1A276
add     sp, 6
cmp     byte ptr [bp+var_1C], 1
jnz     short loc_104F8
inc     [bp+var_16]

loc_104F8:
mov     si, [bp+var_1A]
cmp     [bp+si+var_4], 2
jnz     short loc_10504
dec     [bp+var_16]

loc_10504:
cmp     [bp+si+var_4], 3
jnz     short loc_1050D
inc     [bp+var_18]

loc_1050D:
cmp     [bp+si+var_4], 4
jnz     short loc_10516
dec     [bp+var_18]

loc_10516:
inc     [bp+var_1A]

loc_10519:
mov     si, [bp+var_1A]
cmp     [bp+si+var_4], 5
jnz     short loc_104DA
mov     ax, 9
mov     [bp+var_18], ax
push    ax
sub     ax, ax
mov     [bp+var_16], ax
push    ax
call    sub_1AE6E
add     sp, 4

loc_10537:
mov     es, seg_27886
assume es:seg008
cmp     es:word_2232E, 0Fh
jz      short loc_10546
jmp     loc_1063B

loc_10546:
mov     ax, 792h
push    ax
mov     cx, 160h
push    cx
mov     dx, 16h
push    dx
sub     bx, bx
push    bx
call    sub_2016C
add     sp, 8
mov     ax, 78h ; 'x'
push    ax
mov     es, seg_2788C
push    es:word_22298
push    es:word_22296
push    ax
mov     ax, 6
push    ax
call    sub_194BA
add     sp, 0Ah
call    sub_20CDA
sub     ax, ax
push    ax
mov     cx, 160h
push    cx
mov     cx, 16h
push    cx
mov     cx, 792h
push    cx
call    sub_200C6
add     sp, 8
mov     al, 88h
push    ax
mov     ax, 2846h
push    ax
mov     ax, 26CFh
push    ax
call    sub_1A986
add     sp, 6
call    sub_1ABE6
mov     [bp+var_16], 8
mov     ax, 0F8h        ; "8"
mov     es, seg_27886
mul     es:word_2232E
mov     bx, ax
mov     ax, offset unk_22346
mov     es, seg_27892
assume es:dseg
mov     es:[bx+1AFCh], ax
mov     es:[bx+1AFEh], ax
sub     ax, ax
mov     [bp+var_18], ax
mov     [bp+var_1A], ax
jmp     short loc_1061D

loc_105DE:
push    [bp+var_18]
push    [bp+var_16]
mov     al, [bp+si+var_8]
push    ax
mov     [bp+var_1C], ax
call    sub_1A276
add     sp, 6
cmp     byte ptr [bp+var_1C], 1
jnz     short loc_105FC
inc     [bp+var_16]

loc_105FC:
mov     si, [bp+var_1A]
cmp     [bp+si+var_8], 2
jnz     short loc_10608
dec     [bp+var_16]

loc_10608:
cmp     [bp+si+var_8], 3
jnz     short loc_10611
inc     [bp+var_18]

loc_10611:
cmp     [bp+si+var_8], 4
jnz     short loc_1061A
dec     [bp+var_18]

loc_1061A:
inc     [bp+var_1A]

loc_1061D:
mov     si, [bp+var_1A]
cmp     [bp+si+var_8], 5
jnz     short loc_105DE
sub     ax, ax
mov     [bp+var_18], ax
push    ax
mov     ax, 6
mov     [bp+var_16], ax
push    ax
call    sub_1AE6E
add     sp, 4

loc_1063B:
mov     es, seg_27886
assume es:seg008
cmp     es:word_2232E, 0Ah
jz      short loc_1064A
jmp     loc_10725

loc_1064A:
mov     al, 88h
push    ax
mov     ax, 2846h
push    ax
mov     ax, 26CFh
push    ax
call    sub_1A986
add     sp, 6
call    sub_1ABE6
mov     [bp+var_18], 9
sub     ax, ax
mov     [bp+var_16], ax
mov     [bp+var_1A], ax
jmp     short loc_106B1
align 2

loc_10672:
push    [bp+var_18]
push    [bp+var_16]
mov     al, [bp+si+var_14]
push    ax
mov     [bp+var_1C], ax
call    sub_1A276
add     sp, 6
cmp     byte ptr [bp+var_1C], 1
jnz     short loc_10690
inc     [bp+var_16]

loc_10690:
mov     si, [bp+var_1A]
cmp     [bp+si+var_14], 2
jnz     short loc_1069C
dec     [bp+var_16]

loc_1069C:
cmp     [bp+si+var_14], 3
jnz     short loc_106A5
inc     [bp+var_18]

loc_106A5:
cmp     [bp+si+var_14], 4
jnz     short loc_106AE
dec     [bp+var_18]

loc_106AE:
inc     [bp+var_1A]

loc_106B1:
mov     si, [bp+var_1A]
cmp     [bp+si+var_14], 5
jnz     short loc_10672
mov     ax, 792h
push    ax
mov     cx, 160h
push    cx
mov     dx, 16h
push    dx
sub     bx, bx
push    bx
call    sub_2016C
add     sp, 8
mov     ax, 6Bh ; 'k'
push    ax
mov     es, seg_2788C
push    es:word_22298
push    es:word_22296
mov     ax, 32h ; '2'
push    ax
mov     ax, 9
push    ax
call    sub_194BA
add     sp, 0Ah
call    sub_20CDA
sub     ax, ax
push    ax
mov     ax, 160h
push    ax
mov     ax, 16h
push    ax
mov     ax, 792h
push    ax
call    sub_200C6
add     sp, 8
mov     ax, 9
mov     [bp+var_18], ax
push    ax
mov     ax, 5
mov     [bp+var_16], ax
push    ax
call    sub_1AE6E
add     sp, 4

loc_10725:
mov     es, seg_27886
cmp     es:word_2232E, 2
jz      short loc_10734
jmp     loc_107C4

loc_10734:
mov     es, seg_2788A
cmp     es:byte_222EE, 1
jz      short loc_10743
jmp     loc_107C4

loc_10743:
cmp     es:byte_222E8, 0
jnz     short loc_107C4
mov     es:byte_222E8, 1
mov     ax, 792h
push    ax
mov     cx, 160h
push    cx
mov     dx, 16h
push    dx
sub     bx, bx
push    bx
call    sub_2016C
add     sp, 8
mov     ax, 8Dh
push    ax
mov     es, seg_2788C
push    es:word_22298
push    es:word_22296
mov     ax, 78h ; 'x'
push    ax
mov     ax, 8
push    ax
call    sub_194BA
add     sp, 0Ah
call    sub_20CDA
sub     ax, ax
push    ax
mov     ax, 160h
push    ax
mov     ax, 16h
push    ax
mov     ax, 792h
push    ax
call    sub_200C6
add     sp, 8
mov     es, seg_27892
assume es:dseg
mov     es:word_260E4, 15h
mov     [bp+var_16], 3
mov     [bp+var_18], 8
mov     es:word_260CC, 6
jmp     short loc_10831

loc_107C4:
mov     es, seg_27886
assume es:seg008
cmp     es:word_2232E, 2
jnz     short loc_10831
mov     es, seg_2788A
cmp     es:byte_222E8, 1
jnz     short loc_10831
mov     ax, 792h
push    ax
mov     cx, 160h
push    cx
mov     dx, 16h
push    dx
sub     bx, bx
push    bx
call    sub_2016C
add     sp, 8
mov     ax, 8Eh
push    ax
mov     es, seg_2788C
push    es:word_22298
push    es:word_22296
mov     ax, 78h ; 'x'
push    ax
mov     ax, 2
push    ax
call    sub_194BA
add     sp, 0Ah
call    sub_20CDA
sub     ax, ax
push    ax
mov     ax, 160h
push    ax
mov     ax, 16h
push    ax
mov     ax, 792h
push    ax
call    sub_200C6
add     sp, 8

loc_10831:
mov     es, seg_27886
cmp     es:word_2232E, 23h ; '#'
jnz     short loc_108BC
mov     es, seg_2788A
cmp     es:byte_22306, 0
jnz     short loc_108BC
mov     es:byte_22306, 1
mov     ax, 792h
push    ax
mov     cx, 160h
push    cx
mov     dx, 16h
push    dx
sub     bx, bx
push    bx
call    sub_2016C
add     sp, 8
mov     ax, 8Fh
push    ax
mov     es, seg_2788C
push    es:word_22298
push    es:word_22296
mov     ax, 78h ; 'x'
push    ax
mov     ax, 4
push    ax
call    sub_194BA
add     sp, 0Ah
call    sub_20CDA
sub     ax, ax
push    ax
mov     ax, 160h
push    ax
mov     ax, 16h
push    ax
mov     ax, 792h
push    ax
call    sub_200C6
add     sp, 8
mov     ax, 0Ah
mov     [bp+var_16], ax
mov     [bp+var_18], ax
mov     es, seg_27892
assume es:dseg
mov     es:word_2410E, 6
jmp     short loc_10929
align 4

loc_108BC:
mov     es, seg_27886
assume es:seg008
cmp     es:word_2232E, 23h ; '#'
jnz     short loc_10929
mov     es, seg_2788A
cmp     es:byte_22306, 1
jnz     short loc_10929
mov     ax, 792h
push    ax
mov     cx, 160h
push    cx
mov     dx, 16h
push    dx
sub     bx, bx
push    bx
call    sub_2016C
add     sp, 8
mov     ax, 90h
push    ax
mov     es, seg_2788C
push    es:word_22298
push    es:word_22296
mov     ax, 78h ; 'x'
push    ax
mov     ax, 4
push    ax
call    sub_194BA
add     sp, 0Ah
call    sub_20CDA
sub     ax, ax
push    ax
mov     ax, 160h
push    ax
mov     ax, 16h
push    ax
mov     ax, 792h
push    ax
call    sub_200C6
add     sp, 8

loc_10929:
mov     es, seg_27886
cmp     es:word_2232E, 1Dh
jnz     short loc_10980
mov     es, seg_2788A
cmp     es:byte_222FB, 0
jnz     short loc_10980
mov     es, seg_27894
cmp     es:word_22294, 2
jb      short loc_10980
mov     ax, 792h
push    ax
mov     cx, 160h
push    cx
mov     dx, 16h
push    dx
sub     bx, bx
push    bx
call    sub_2016C
add     sp, 8
mov     ax, 7Eh ; '~'
push    ax
mov     es, seg_2788C
push    es:word_22298
push    es:word_22296
mov     ax, 78h ; 'x'
push    ax
mov     ax, 5
jmp     loc_10A18

loc_10980:
mov     es, seg_27886
cmp     es:word_2232E, 1Dh
jnz     short loc_109D0
mov     es, seg_2788A
cmp     es:byte_222FB, 0
jnz     short loc_109D0
mov     es:byte_222FB, 1
mov     ax, 792h
push    ax
mov     cx, 160h
push    cx
mov     dx, 16h
push    dx
sub     bx, bx
push    bx
call    sub_2016C
add     sp, 8
mov     ax, 7Ch ; '|'
push    ax
mov     es, seg_2788C
push    es:word_22298
push    es:word_22296
mov     ax, 78h ; 'x'
push    ax
mov     ax, 4
jmp     short loc_10A18

loc_109D0:
mov     es, seg_27886
cmp     es:word_2232E, 1Dh
jnz     short loc_10A3D
mov     es, seg_2788A
cmp     es:byte_222FB, 1
jnz     short loc_10A3D
mov     ax, 792h
push    ax
mov     cx, 160h
push    cx
mov     dx, 16h
push    dx
sub     bx, bx
push    bx
call    sub_2016C
add     sp, 8
mov     ax, 7Dh ; '}'
push    ax
mov     es, seg_2788C
push    es:word_22298
push    es:word_22296
mov     ax, 78h ; 'x'
push    ax
mov     ax, 3

loc_10A18:
push    ax
call    sub_194BA
add     sp, 0Ah
call    sub_20CDA
sub     ax, ax
push    ax
mov     ax, 160h
push    ax
mov     ax, 16h
push    ax
mov     ax, 792h
push    ax
call    sub_200C6
add     sp, 8

loc_10A3D:
sub     al, al
push    ax
mov     ax, 7E90h
push    ax
mov     ax, 7D00h
push    ax
call    sub_1A986
add     sp, 6
call    sub_1ABE6
pop     si
mov     sp, bp
pop     bp
retf
sub_103E0 endp



; Attributes: bp-based frame

sub_10A5A proc far

var_184= byte ptr -184h
var_182= byte ptr -182h
var_56= word ptr -56h
var_54= word ptr -54h
var_52= word ptr -52h
var_50= word ptr -50h
var_4E= word ptr -4Eh
var_4C= word ptr -4Ch
var_4A= word ptr -4Ah
var_48= word ptr -48h
var_46= word ptr -46h
var_44= word ptr -44h
var_42= word ptr -42h
var_40= word ptr -40h
var_3E= word ptr -3Eh
var_3C= word ptr -3Ch
var_3A= word ptr -3Ah
var_38= word ptr -38h
var_36= dword ptr -36h
var_32= word ptr -32h
var_30= word ptr -30h
var_2E= word ptr -2Eh
var_2C= word ptr -2Ch
var_2A= word ptr -2Ah
var_28= word ptr -28h
var_26= word ptr -26h
var_24= word ptr -24h
var_22= word ptr -22h
var_20= word ptr -20h
var_1E= word ptr -1Eh
var_1C= word ptr -1Ch
var_1A= word ptr -1Ah
var_18= word ptr -18h
var_16= byte ptr -16h
var_2= byte ptr -2
var_1= byte ptr -1

push    bp
mov     bp, sp
sub     sp, 184h
push    di
push    si
mov     word ptr [bp+var_36], offset aSavec1Dat ; "SAVEC1.DAT"
mov     word ptr [bp+var_36+2], ds
mov     [bp+var_32], offset aSavec2Dat ; "SAVEC2.DAT"
mov     [bp+var_30], ds
mov     [bp+var_2E], offset aSavec3Dat ; "SAVEC3.DAT"
mov     [bp+var_2C], ds
mov     [bp+var_2A], offset aSavec4Dat ; "SAVEC4.DAT"
mov     [bp+var_28], ds
mov     [bp+var_26], offset aSavec5Dat ; "SAVEC5.DAT"
mov     [bp+var_24], ds
mov     [bp+var_22], offset aSavec6Dat ; "SAVEC6.DAT"
mov     [bp+var_20], ds
mov     [bp+var_1E], offset aSavec7Dat ; "SAVEC7.DAT"
mov     [bp+var_1C], ds
mov     [bp+var_1A], offset aSavec8Dat ; "SAVEC8.DAT"
mov     [bp+var_18], ds
mov     [bp+var_56], offset unk_22D00
mov     [bp+var_54], ds
mov     [bp+var_52], offset unk_22D18
mov     [bp+var_50], ds
mov     [bp+var_4E], offset unk_22D30
mov     [bp+var_4C], ds
mov     [bp+var_4A], offset unk_22D48
mov     [bp+var_48], ds
mov     [bp+var_46], offset unk_22D68
mov     [bp+var_44], ds
mov     [bp+var_42], offset unk_22D7C
mov     [bp+var_40], ds
mov     [bp+var_3E], offset unk_22D90
mov     [bp+var_3C], ds
mov     [bp+var_3A], offset unk_22DA2
mov     [bp+var_38], ds
mov     ax, 792h
push    ax
mov     ax, 160h
push    ax
mov     ax, 16h
push    ax
sub     ax, ax
push    ax
call    sub_2016C
add     sp, 8
lea     ax, [bp+var_182]
mov     di, ax
mov     si, 0A72h
push    ss
pop     es
assume es:nothing
mov     cx, 10h
rep movsw
mov     [bp+var_1], 0FFh
mov     es, seg_2788A
assume es:seg008
cmp     es:byte_222B3, 1
jnz     short loc_10B54
sub     al, al
mov     [bp+var_1], al
sub     ah, ah
mov     si, ax
mov     [bp+si+var_16], al
mov     di, 9C0h
lea     si, [bp+var_182]
push    ds
pop     es
assume es:dseg
push    ds
mov     cx, 0FFFFh
xor     ax, ax
repne scasb
not     cx
sub     di, cx
mov     bx, cx
xchg    di, si
push    ds
push    es
pop     ds
pop     es
assume es:nothing
mov     cx, 0FFFFh
repne scasb
dec     di
mov     cx, bx
shr     cx, 1
rep movsw
adc     cx, cx
rep movsb
pop     ds

loc_10B54:
mov     es, seg_2788A
assume es:seg008
cmp     es:byte_222B5, 1
jnz     short loc_10B9C
inc     [bp+var_1]
mov     al, [bp+var_1]
sub     ah, ah
mov     si, ax
mov     [bp+si+var_16], 1
mov     di, 9D8h
lea     si, [bp+var_182]
push    ds
pop     es
assume es:dseg
push    ds
mov     cx, 0FFFFh
xor     ax, ax
repne scasb
not     cx
sub     di, cx
mov     bx, cx
xchg    di, si
push    ds
push    es
pop     ds
pop     es
assume es:nothing
mov     cx, 0FFFFh
repne scasb
dec     di
mov     cx, bx
shr     cx, 1
rep movsw
adc     cx, cx
rep movsb
pop     ds

loc_10B9C:
mov     es, seg_2788A
assume es:seg008
cmp     es:byte_222B4, 1
jnz     short loc_10BE4
inc     [bp+var_1]
mov     al, [bp+var_1]
sub     ah, ah
mov     si, ax
mov     [bp+si+var_16], 2
mov     di, 9F0h
lea     si, [bp+var_182]
push    ds
pop     es
assume es:dseg
push    ds
mov     cx, 0FFFFh
xor     ax, ax
repne scasb
not     cx
sub     di, cx
mov     bx, cx
xchg    di, si
push    ds
push    es
pop     ds
pop     es
assume es:nothing
mov     cx, 0FFFFh
repne scasb
dec     di
mov     cx, bx
shr     cx, 1
rep movsw
adc     cx, cx
rep movsb
pop     ds

loc_10BE4:
inc     [bp+var_1]
mov     al, [bp+var_1]
sub     ah, ah
mov     si, ax
mov     [bp+si+var_16], 3
mov     di, 0A08h
lea     si, [bp+var_182]
push    ds
pop     es
assume es:dseg
push    ds
mov     cx, 0FFFFh
xor     ax, ax
repne scasb
not     cx
sub     di, cx
mov     bx, cx
xchg    di, si
push    ds
push    es
pop     ds
pop     es
assume es:nothing
mov     cx, 0FFFFh
repne scasb
dec     di
mov     cx, bx
shr     cx, 1
rep movsw
adc     cx, cx
rep movsb
pop     ds
mov     al, [bp+var_1]
inc     al
mov     [bp+var_1], al
sub     ah, ah
mov     si, ax
mov     [bp+si+var_16], 4
mov     di, 0A28h
lea     si, [bp+var_182]
push    ds
pop     es
assume es:dseg
push    ds
mov     cx, 0FFFFh
xor     ax, ax
repne scasb
not     cx
sub     di, cx
mov     bx, cx
xchg    di, si
push    ds
push    es
pop     ds
pop     es
assume es:nothing
mov     cx, 0FFFFh
repne scasb
dec     di
mov     cx, bx
shr     cx, 1
rep movsw
adc     cx, cx
rep movsb
pop     ds
mov     al, [bp+var_1]
inc     al
mov     [bp+var_1], al
sub     ah, ah
mov     si, ax
mov     [bp+si+var_16], 5
mov     di, 0A3Ch
lea     si, [bp+var_182]
push    ds
pop     es
assume es:dseg
push    ds
mov     cx, 0FFFFh
xor     ax, ax
repne scasb
not     cx
sub     di, cx
mov     bx, cx
xchg    di, si
push    ds
push    es
pop     ds
pop     es
assume es:nothing
mov     cx, 0FFFFh
repne scasb
dec     di
mov     cx, bx
shr     cx, 1
rep movsw
adc     cx, cx
rep movsb
pop     ds
mov     al, [bp+var_1]
inc     al
mov     [bp+var_1], al
sub     ah, ah
mov     si, ax
mov     [bp+si+var_16], 6
mov     di, 0A50h
lea     si, [bp+var_182]
push    ds
pop     es
assume es:dseg
push    ds
mov     cx, 0FFFFh
xor     ax, ax
repne scasb
not     cx
sub     di, cx
mov     bx, cx
xchg    di, si
push    ds
push    es
pop     ds
pop     es
assume es:nothing
mov     cx, 0FFFFh
repne scasb
dec     di
mov     cx, bx
shr     cx, 1
rep movsw
adc     cx, cx
rep movsb
pop     ds
mov     al, [bp+var_1]
inc     al
mov     [bp+var_1], al
sub     ah, ah
mov     si, ax
mov     [bp+si+var_16], 7
mov     di, 0A62h
lea     si, [bp+var_182]
push    ds
pop     es
assume es:dseg
push    ds
mov     cx, 0FFFFh
xor     ax, ax
repne scasb
not     cx
sub     di, cx
mov     bx, cx
xchg    di, si
push    ds
push    es
pop     ds
pop     es
assume es:nothing
mov     cx, 0FFFFh
repne scasb
dec     di
mov     cx, bx
shr     cx, 1
rep movsw
adc     cx, cx
rep movsb
pop     ds
lea     ax, [bp+var_182]
push    ss
push    ax
mov     ax, 32h ; '2'
push    ax
mov     ax, 0Bh
push    ax
call    sub_193EC
add     sp, 8
mov     ax, 52h ; 'R'
push    ax
mov     ax, 17h
push    ax
mov     al, [bp+var_1]
push    ax
call    sub_19E78
add     sp, 6
mov     [bp+var_2], al
sub     ah, ah
mov     si, ax
mov     al, [bp+si+var_16]
mov     [bp+var_184], al
cmp     al, 6
jnz     short loc_10D57
jmp     loc_10E7C

loc_10D57:
cmp     [bp+var_2], 0FFh
jnz     short loc_10D60
jmp     loc_10E7C

loc_10D60:
cmp     al, 4
jnz     short loc_10DC4
mov     ax, 32h ; '2'
push    ax
mov     es, seg_2788C
assume es:seg008
push    es:word_22298
push    es:word_22296
push    ax
mov     ax, 0Ah
push    ax
call    sub_195D8
add     sp, 0Ah
mov     ax, 52h ; 'R'
push    ax
mov     ax, 17h
push    ax
mov     al, 8
push    ax
call    sub_19E78
add     sp, 6
mov     [bp+var_2], al
cmp     al, 8
jnz     short loc_10DA0
jmp     loc_10E7C

loc_10DA0:
cmp     al, 0FFh
jnz     short loc_10DA7
jmp     loc_10E7C

loc_10DA7:
sub     ah, ah
mov     si, ax
shl     si, 1
shl     si, 1
push    word ptr [bp+si+var_36+2]
push    word ptr [bp+si+var_36] ; char *
call    sub_197EC
add     sp, 4
pop     si
pop     di
mov     sp, bp
pop     bp
retf
align 2

loc_10DC4:
cmp     [bp+var_184], 5
jnz     short loc_10E24
mov     ax, 33h ; '3'
push    ax
mov     es, seg_2788C
push    es:word_22298
push    es:word_22296
mov     ax, 32h ; '2'
push    ax
mov     ax, 0Ah
push    ax
call    sub_195D8
add     sp, 0Ah
mov     ax, 52h ; 'R'
push    ax
mov     ax, 17h
push    ax
mov     al, 8
push    ax
call    sub_19E78
add     sp, 6
mov     [bp+var_2], al
cmp     al, 8
jz      short loc_10E7C
cmp     al, 0FFh
jz      short loc_10E7C
sub     ah, ah
mov     si, ax
shl     si, 1
shl     si, 1
push    word ptr [bp+si+var_36+2]
push    word ptr [bp+si+var_36] ; char *
call    sub_19A42
add     sp, 4
jmp     short loc_10E7C
align 2

loc_10E24:
cmp     [bp+var_184], 0
jnz     short loc_10E32
call    sub_18C2A
jmp     short loc_10E7C

loc_10E32:
cmp     [bp+var_184], 1
jnz     short loc_10E50
call    sub_18FDA
mov     ax, 0Fh
push    ax
call    sub_1F9E2
add     sp, 2
pop     si
pop     di
mov     sp, bp
pop     bp
retf

loc_10E50:
cmp     [bp+var_184], 2
jnz     short loc_10E5E
call    sub_18A46
jmp     short loc_10E7C

loc_10E5E:
cmp     [bp+var_184], 3
jnz     short loc_10E70
call    sub_17D50
pop     si
pop     di
mov     sp, bp
pop     bp
retf

loc_10E70:
cmp     [bp+var_184], 7
jnz     short loc_10E7C
call    sub_1C48C

loc_10E7C:
mov     ax, 0Ah
push    ax
call    sub_1F9E2
add     sp, 2
sub     ax, ax
push    ax
mov     ax, 160h
push    ax
mov     ax, 16h
push    ax
mov     ax, 792h
push    ax
call    sub_200C6
add     sp, 8
pop     si
pop     di
mov     sp, bp
pop     bp
retf
sub_10A5A endp

align 2


; Attributes: bp-based frame

sub_10EA6 proc far

var_1CE= byte ptr -1CEh
var_A2= byte ptr -0A2h
var_A0= word ptr -0A0h
var_9E= word ptr -9Eh
var_9C= word ptr -9Ch
var_9A= word ptr -9Ah
var_98= word ptr -98h
var_96= word ptr -96h
var_94= word ptr -94h
var_92= word ptr -92h
var_90= word ptr -90h
var_8E= word ptr -8Eh
var_8C= word ptr -8Ch
var_8A= word ptr -8Ah
var_88= word ptr -88h
var_86= word ptr -86h
var_84= word ptr -84h
var_82= word ptr -82h
var_80= word ptr -80h
var_7E= word ptr -7Eh
var_7C= word ptr -7Ch
var_7A= word ptr -7Ah
var_78= word ptr -78h
var_76= word ptr -76h
var_74= word ptr -74h
var_72= word ptr -72h
var_70= word ptr -70h
var_6E= word ptr -6Eh
var_6C= word ptr -6Ch
var_6A= word ptr -6Ah
var_68= word ptr -68h
var_66= word ptr -66h
var_64= word ptr -64h
var_62= word ptr -62h
var_60= word ptr -60h
var_5E= word ptr -5Eh
var_5C= word ptr -5Ch
var_5A= word ptr -5Ah
var_58= word ptr -58h
var_56= word ptr -56h
var_54= word ptr -54h
var_52= word ptr -52h
var_50= word ptr -50h
var_4E= word ptr -4Eh
var_4C= word ptr -4Ch
var_4A= word ptr -4Ah
var_48= word ptr -48h
var_46= word ptr -46h
var_44= word ptr -44h
var_42= word ptr -42h
var_40= word ptr -40h
var_3E= word ptr -3Eh
var_3C= word ptr -3Ch
var_3A= word ptr -3Ah
var_38= word ptr -38h
var_36= word ptr -36h
var_34= word ptr -34h
var_32= word ptr -32h
var_30= word ptr -30h
var_2E= word ptr -2Eh
var_2C= word ptr -2Ch
var_2A= word ptr -2Ah
var_28= word ptr -28h
var_26= word ptr -26h
var_24= word ptr -24h
var_22= word ptr -22h
var_20= word ptr -20h
var_1E= word ptr -1Eh
var_1C= word ptr -1Ch
var_1A= word ptr -1Ah
var_18= byte ptr -18h
var_4= word ptr -4
var_2= word ptr -2

push    bp
mov     bp, sp
sub     sp, 1CEh
push    di
push    si
mov     [bp+var_A0], 2
mov     [bp+var_94], 6
mov     [bp+var_8C], 0Bh
mov     [bp+var_88], 7
mov     ax, 32h ; '2'
mov     [bp+var_92], ax
mov     [bp+var_86], ax
mov     [bp+var_80], 0Dh
mov     [bp+var_7E], 0Eh
mov     ax, 0Ch
mov     [bp+var_8A], ax
mov     [bp+var_7C], ax
mov     [bp+var_7A], 320h
mov     [bp+var_72], 10h
mov     ax, 0Fh
mov     [bp+var_74], ax
mov     [bp+var_70], ax
mov     [bp+var_68], 11h
mov     [bp+var_66], 12h
mov     [bp+var_54], 1Dh
mov     ax, 15h
mov     [bp+var_90], ax
mov     [bp+var_50], ax
mov     ax, 0C8h
mov     [bp+var_6E], ax
mov     [bp+var_4A], ax
mov     [bp+var_46], 20h ; ' '
mov     ax, 17h
mov     [bp+var_84], ax
mov     [bp+var_44], ax
mov     ax, 18h
mov     [bp+var_82], ax
mov     [bp+var_42], ax
mov     [bp+var_40], 27h ; '''
mov     [bp+var_3E], 7D0h
mov     [bp+var_3C], 21h ; '!'
mov     [bp+var_3A], 22h ; '"'
mov     ax, 19h
mov     [bp+var_78], ax
mov     [bp+var_38], ax
mov     ax, 1Ah
mov     [bp+var_76], ax
mov     [bp+var_36], ax
mov     [bp+var_34], 2Dh ; '-'
mov     ax, 3E8h
mov     [bp+var_56], ax
mov     [bp+var_32], ax
mov     [bp+var_30], 23h ; '#'
mov     [bp+var_2E], 24h ; '$'
mov     ax, 1Bh
mov     [bp+var_6C], ax
mov     [bp+var_2C], ax
mov     ax, 1Ch
mov     [bp+var_6A], ax
mov     [bp+var_64], ax
mov     [bp+var_2A], ax
mov     [bp+var_28], 2Fh ; '/'
mov     [bp+var_26], 0FA0h
mov     [bp+var_24], 25h ; '%'
mov     ax, 26h ; '&'
mov     [bp+var_4C], ax
mov     [bp+var_22], ax
mov     ax, 1Eh
mov     [bp+var_52], ax
mov     [bp+var_20], ax
mov     ax, 1Fh
mov     [bp+var_58], ax
mov     [bp+var_48], ax
mov     [bp+var_1E], ax
mov     ax, 792h
push    ax
mov     ax, 160h
push    ax
mov     ax, 16h
mov     [bp+var_8E], ax
mov     [bp+var_4E], ax
push    ax
sub     ax, ax
mov     [bp+var_9E], ax
mov     [bp+var_9C], ax
mov     [bp+var_9A], ax
mov     [bp+var_98], ax
mov     [bp+var_96], ax
mov     [bp+var_62], ax
mov     [bp+var_60], ax
mov     [bp+var_5E], ax
mov     [bp+var_5C], ax
mov     [bp+var_5A], ax
push    ax
call    sub_2016C
add     sp, 8
mov     [bp+var_2], 0
jmp     short loc_10FFF

loc_10FFC:
inc     [bp+var_2]

loc_10FFF:
cmp     [bp+var_2], 32h ; '2'
jnb     short loc_11020
mov     es, seg_27886
mov     ax, es:word_2232E
mov     si, [bp+var_2]
mov     cx, si
shl     si, 1
add     si, cx
shl     si, 1
shl     si, 1
cmp     [bp+si+var_A0], ax
jnz     short loc_10FFC

loc_11020:
cmp     [bp+var_2], 32h ; '2'
jnz     short loc_11038
mov     ax, 0A92h
push    ds
push    ax              ; char *
call    _printf
add     sp, 4
call    sub_1C48C

loc_11038:
mov     es, seg_27886
cmp     es:word_2232E, 6
jz      short loc_11097
cmp     es:word_2232E, 7
jz      short loc_11097
cmp     es:word_2232E, 0Ch
jnz     short loc_11060
mov     es, seg_27888
cmp     es:word_22292, 1
jz      short loc_11097

loc_11060:
mov     es, seg_27886
cmp     es:word_2232E, 0Fh
jz      short loc_11097
cmp     es:word_2232E, 1Fh
jz      short loc_11097
cmp     es:word_2232E, 26h ; '&'
jz      short loc_11097
cmp     es:word_2232E, 27h ; '''
jz      short loc_11097
cmp     es:word_2232E, 2Fh ; '/'
jz      short loc_11097
cmp     es:word_2232E, 2Dh ; '-'
jz      short loc_11097
jmp     loc_11302

loc_11097:
mov     es, seg_2788A
mov     si, [bp+var_2]
mov     ax, si
shl     si, 1
add     si, ax
shl     si, 1
shl     si, 1
mov     bx, [bp+si+var_9C]
cmp     byte ptr es:[bx+1Eh], 0
jz      short loc_110B7
jmp     loc_112A4

loc_110B7:
mov     bx, [bp+si+var_9A]
cmp     byte ptr es:[bx+1Eh], 0
jz      short loc_110C6
jmp     loc_112A4

loc_110C6:
push    [bp+si+var_98]
mov     es, seg_2788C
push    es:word_22298
push    es:word_22296
mov     ax, 78h ; 'x'
push    ax
mov     ax, 4
push    ax
call    sub_194BA
add     sp, 0Ah
mov     ax, 0ACh
mov     [bp+var_1C], ax
push    ax
mov     ax, 17h
mov     [bp+var_1A], ax
push    ax
mov     al, 1
push    ax
call    sub_19E78
add     sp, 6
mov     [bp+var_A2], al
or      al, al
jz      short loc_1110C
jmp     loc_11276

loc_1110C:
mov     es, seg_27896
mov     ax, es:word_22332
cmp     [bp+si+var_9E], ax
jbe     short loc_1111D
jmp     loc_11276

loc_1111D:
mov     ax, [bp+si+var_9E]
sub     es:word_22332, ax
mov     al, 4
push    ax
call    sub_1B96C
add     sp, 2
mov     es, seg_27886
cmp     es:word_2232E, 6
jnz     short loc_1114B
mov     es, seg_27898
inc     es:word_2232A
call    sub_19FF8

loc_1114B:
mov     es, seg_27886
cmp     es:word_2232E, 7
jnz     short loc_11166
mov     es, seg_2789A
add     es:word_222AC, 5
call    sub_19FF8

loc_11166:
mov     es, seg_27886
cmp     es:word_2232E, 0Ch
jnz     short loc_11180
mov     es, seg_2789C
inc     es:word_22330
call    sub_19FF8

loc_11180:
mov     es, seg_27886
cmp     es:word_2232E, 0Fh
jnz     short loc_1119A
mov     es, seg_27898
inc     es:word_2232A
call    sub_19FF8

loc_1119A:
mov     es, seg_27886
cmp     es:word_2232E, 1Fh
jnz     short loc_111BE
mov     es, seg_2789A
add     es:word_222AC, 4
mov     es, seg_27898
inc     es:word_2232A
call    sub_19FF8

loc_111BE:
mov     es, seg_27886
cmp     es:word_2232E, 26h ; '&'
jnz     short loc_111D9
mov     es, seg_2789A
add     es:word_222AC, 3
call    sub_19FF8

loc_111D9:
mov     es, seg_27886
cmp     es:word_2232E, 27h ; '''
jnz     short loc_111F4
mov     es, seg_27898
add     es:word_2232A, 3
call    sub_19FF8

loc_111F4:
mov     es, seg_27886
cmp     es:word_2232E, 2Dh ; '-'
jnz     short loc_11222
mov     es, seg_2789E
add     es:word_22328, 7D0h
mov     al, 1
push    ax
call    sub_1B96C
add     sp, 2
mov     ax, 6
push    ax
call    sub_20FAB
add     sp, 2

loc_11222:
mov     es, seg_27886
cmp     es:word_2232E, 2Fh ; '/'
jnz     short loc_11255
mov     ax, 0ABBh
push    ds
push    ax
call    sub_19D80
add     sp, 4
mov     es, seg_2788A
mov     es:byte_222C0, 1
push    cs
call    near ptr sub_12F8C
mov     ax, 6
push    ax
call    sub_20FAB
add     sp, 2

loc_11255:
mov     es, seg_2788A
mov     si, [bp+var_2]
mov     ax, si
shl     si, 1
add     si, ax
shl     si, 1
shl     si, 1
mov     bx, [bp+si+var_9C]
mov     byte ptr es:[bx+1Eh], 1
mov     ax, 0ADAh
jmp     loc_114D2

loc_11276:
cmp     [bp+var_A2], 0
jz      short loc_11280
jmp     loc_1155E

loc_11280:
mov     es, seg_27896
mov     ax, es:word_22332
mov     si, [bp+var_2]
mov     cx, si
shl     si, 1
add     si, cx
shl     si, 1
shl     si, 1
cmp     [bp+si+var_9E], ax
ja      short loc_1129E
jmp     loc_1155E

loc_1129E:
mov     ax, 0AE7h
jmp     loc_114D2

loc_112A4:
mov     si, ax
shl     si, 1
add     si, ax
shl     si, 1
shl     si, 1
mov     bx, [bp+si+var_9C]
cmp     byte ptr es:[bx+1Eh], 1
jnz     short loc_112F2
mov     bx, [bp+si+var_9A]
cmp     byte ptr es:[bx+1Eh], 0
jnz     short loc_112F2
mov     byte ptr es:[bx+1Eh], 1
push    [bp+si+var_96]
mov     es, seg_2788C
push    es:word_22298
push    es:word_22296
mov     ax, 78h ; 'x'
push    ax
mov     ax, 8
push    ax
call    sub_194BA
add     sp, 0Ah
jmp     loc_11559
align 2

loc_112F2:
mov     ax, 0AFAh
push    ds
push    ax
mov     ax, 78h ; 'x'
push    ax
mov     ax, 2
jmp     loc_11550
align 2

loc_11302:
cmp     es:word_2232E, 0Ch
jz      short loc_1130D
jmp     loc_11430

loc_1130D:
mov     es, seg_27888
cmp     es:word_22292, 9
jz      short loc_1131C
jmp     loc_11430

loc_1131C:
mov     ax, (offset dword_222A2+2)
mov     es, seg_278A0
mul     es:word_22326
mov     [bp+var_4], ax
push    ax
lea     ax, [bp+var_18]
push    ss
push    ax
call    sub_1B7D4
add     sp, 6
lea     ax, [bp+var_1CE]
mov     di, ax
mov     si, 0B11h
push    ss
pop     es
assume es:nothing
mov     cx, 14h
rep movsw
mov     bx, ax
mov     si, ss
push    si
push    ds
push    si
lea     di, [bp+var_18]
mov     si, bx
pop     ds
mov     cx, 0FFFFh
xor     ax, ax
repne scasb
not     cx
sub     di, cx
push    cx
xchg    di, si
push    ds
push    es
pop     ds
pop     es
mov     cx, 0FFFFh
repne scasb
dec     di
pop     cx
shr     cx, 1
rep movsw
adc     cx, cx
rep movsb
pop     ds
pop     si
mov     di, ss
push    di
push    si
push    ds
push    di
mov     di, 0B39h
mov     si, bx
push    ds
pop     es
assume es:dseg
pop     ds
mov     cx, 0FFFFh
repne scasb
not     cx
sub     di, cx
push    cx
xchg    di, si
push    ds
push    es
pop     ds
pop     es
assume es:nothing
mov     cx, 0FFFFh
repne scasb
dec     di
pop     cx
shr     cx, 1
rep movsw
adc     cx, cx
rep movsb
pop     ds
pop     si
pop     di
push    ss
push    bx
mov     ax, 78h ; 'x'
push    ax
mov     cx, 4
push    cx
call    sub_193EC
add     sp, 8
mov     ax, 0ACh
mov     [bp+var_1C], ax
push    ax
mov     ax, 17h
mov     [bp+var_1A], ax
push    ax
mov     al, 1
push    ax
call    sub_19E78
add     sp, 6
mov     [bp+var_A2], al
or      al, al
jnz     short loc_1140E
mov     ax, [bp+var_4]
mov     es, seg_27896
assume es:seg008
cmp     es:word_22332, ax
jb      short loc_1140E
sub     es:word_22332, ax
mov     al, 4
push    ax
call    sub_1B96C
add     sp, 2
mov     es, seg_2789A
inc     es:word_222AC
call    sub_19FF8
mov     ax, 0B6Ah
jmp     loc_114D2

loc_1140E:
cmp     [bp+var_A2], 0
jz      short loc_11418
jmp     loc_1155E

loc_11418:
mov     ax, [bp+var_4]
mov     es, seg_27896
cmp     es:word_22332, ax
jb      short loc_11429
jmp     loc_1155E

loc_11429:
mov     ax, 0B77h
jmp     loc_114D2
align 2

loc_11430:
mov     es, seg_27886
cmp     es:word_2232E, 1Ch
jz      short loc_1143F
jmp     loc_114E4

loc_1143F:
mov     ax, 13h
push    ax
mov     es, seg_2788C
push    es:word_22298
push    es:word_22296
mov     ax, 78h ; 'x'
push    ax
mov     cx, 4
push    cx
call    sub_194BA
add     sp, 0Ah
mov     ax, 0ACh
mov     [bp+var_1C], ax
push    ax
mov     ax, 17h
mov     [bp+var_1A], ax
push    ax
mov     al, 1
push    ax
call    sub_19E78
add     sp, 6
mov     [bp+var_A2], al
or      al, al
jnz     short loc_114B6
mov     es, seg_2789A
cmp     es:word_222AC, 0
jz      short loc_114B6
mov     es, seg_27896
add     es:word_22332, 64h ; 'd'
mov     al, 4
push    ax
call    sub_1B96C
add     sp, 2
mov     es, seg_2789A
dec     es:word_222AC
call    sub_19FF8
mov     ax, 0B8Ah
jmp     short loc_114D2

loc_114B6:
cmp     [bp+var_A2], 0
jz      short loc_114C0
jmp     loc_1155E

loc_114C0:
mov     es, seg_2789A
cmp     es:word_222AC, 0
jz      short loc_114CF
jmp     loc_1155E

loc_114CF:
mov     ax, 0B97h

loc_114D2:
push    ds
push    ax
mov     ax, 78h ; 'x'
push    ax
mov     ax, 4
push    ax
call    sub_1958C
jmp     short loc_11556
align 2

loc_114E4:
cmp     es:word_2232E, 2
jnz     short loc_1155E
mov     es, seg_2788A
cmp     es:byte_222C2, 0
jnz     short loc_11544
mov     es:byte_222C2, 1
mov     ax, 1Dh
push    ax
mov     es, seg_2788C
push    es:word_22298
push    es:word_22296
mov     ax, 78h ; 'x'
push    ax
mov     ax, 4
push    ax
call    sub_194BA
add     sp, 0Ah
mov     es, seg_27896
add     es:word_22332, 3E8h
mov     al, 4
push    ax
call    sub_1B96C
add     sp, 2
mov     ax, 6
push    ax
call    sub_20FAB
add     sp, 2
jmp     short loc_11559

loc_11544:
mov     ax, 0BAAh
push    ds
push    ax
mov     ax, 78h ; 'x'
push    ax
mov     ax, 4

loc_11550:
push    ax
call    sub_193EC

loc_11556:
add     sp, 8

loc_11559:
call    sub_20CDA

loc_1155E:
sub     ax, ax
push    ax
mov     ax, 160h
push    ax
mov     ax, 16h
push    ax
mov     ax, 792h
push    ax
call    sub_200C6
add     sp, 8
mov     ax, 0Ah
push    ax
call    sub_1F9E2
add     sp, 2
pop     si
pop     di
mov     sp, bp
pop     bp
retf
sub_10EA6 endp

align 2


; Attributes: bp-based frame

sub_11588 proc far

var_C= word ptr -0Ch
var_A= word ptr -0Ah
var_8= word ptr -8
var_6= word ptr -6

push    bp
mov     bp, sp
sub     sp, 10h
mov     es, seg_27886
cmp     es:word_2232E, 3
jnz     short loc_115C9
mov     es, seg_27888
cmp     es:word_22292, 4
jnz     short loc_115C9
mov     es, seg_27894
cmp     es:word_22294, 8
jnz     short loc_115C9
mov     es, seg_2788A
cmp     es:byte_222E9, 0
jnz     short loc_115C9
mov     es:byte_222E9, 1
call    sub_16AE0

loc_115C9:
mov     es, seg_27886
cmp     es:word_2232E, 0Ah
jnz     short loc_1161D
mov     es, seg_27888
cmp     es:word_22292, 5
jnz     short loc_1161D
mov     es, seg_27894
cmp     es:word_22294, 5
jnz     short loc_1161D
mov     ax, 0F8h        ; "8"
mov     es, seg_27886
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
cmp     word ptr es:[bx+1B7Ch], 6
jnz     short loc_1161D
mov     es, seg_2788A
assume es:seg008
cmp     es:byte_222EB, 0
jnz     short loc_1161D
mov     es:byte_222EB, 1
push    cs
call    near ptr sub_13E0A

loc_1161D:
mov     es, seg_27886
cmp     es:word_2232E, 0Ah
jnz     short loc_1165F
mov     es, seg_27888
cmp     es:word_22292, 5
jnz     short loc_1165F
mov     es, seg_27894
cmp     es:word_22294, 8
jnz     short loc_1165F
mov     es, seg_2788A
cmp     es:byte_222EB, 1
jnz     short loc_1165F
cmp     es:byte_222EE, 0
jnz     short loc_1165F
mov     es:byte_222EE, 1
push    cs
call    near ptr sub_103E0

loc_1165F:
mov     es, seg_27886
cmp     es:word_2232E, 0Fh
jnz     short loc_116C4
mov     es, seg_27888
cmp     es:word_22292, 5
jnz     short loc_116C4
mov     es, seg_27894
cmp     es:word_22294, 7
jnz     short loc_116C4
mov     es, seg_2788A
cmp     es:byte_222EF, 0
jnz     short loc_116C4
mov     es:byte_222EF, 1
mov     ax, 0F8h        ; "8"
mov     es, seg_27886
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
mov     word ptr es:[bx+1BA8h], 4
mov     ax, 8
mov     [bp+var_C], ax
push    ax
mov     ax, 5
mov     [bp+var_8], ax
push    ax
call    sub_17B26
add     sp, 4

loc_116C4:
mov     es, seg_27886
assume es:seg008
cmp     es:word_2232E, 14h
jnz     short loc_11718
mov     es, seg_27888
cmp     es:word_22292, 5
jnz     short loc_11718
mov     es, seg_27894
cmp     es:word_22294, 7
jnz     short loc_11718
mov     ax, 0F8h        ; "8"
mov     es, seg_27886
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
cmp     word ptr es:[bx+1BA8h], 6
jnz     short loc_11718
mov     es, seg_2788A
assume es:seg008
cmp     es:byte_222F7, 0
jnz     short loc_11718
mov     es:byte_222F7, 1
push    cs
call    near ptr sub_13044

loc_11718:
mov     es, seg_27886
cmp     es:word_2232E, 28h ; '('
jnz     short loc_1176C
mov     es, seg_27888
cmp     es:word_22292, 5
jnz     short loc_1176C
mov     es, seg_27894
cmp     es:word_22294, 6
jnz     short loc_1176C
mov     ax, 0F8h        ; "8"
mov     es, seg_27886
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
cmp     word ptr es:[bx+1B92h], 6
jnz     short loc_1176C
mov     es, seg_2788A
assume es:seg008
cmp     es:byte_22309, 0
jnz     short loc_1176C
mov     es:byte_22309, 1
push    cs
call    near ptr sub_1325E

loc_1176C:
mov     es, seg_27886
cmp     es:word_2232E, 1Eh
jz      short loc_1177B
jmp     loc_117FD

loc_1177B:
mov     es, seg_27888
cmp     es:word_22292, 5
jnz     short loc_117FD
mov     es, seg_27894
cmp     es:word_22294, 5
jnz     short loc_117FD
mov     es, seg_2788A
cmp     es:byte_222FD, 0
jnz     short loc_117FD
mov     es:byte_222FD, 1
mov     ax, 0F8h        ; "8"
mov     es, seg_27886
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
mov     word ptr es:[bx+1B3Ah], 4
mov     ax, 3
push    ax
mov     ax, 5
push    ax
call    sub_17B26
add     sp, 4
mov     ax, 0F8h        ; "8"
mov     es, seg_27886
assume es:seg008
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
mov     word ptr es:[bx+1B7Ch], 4
mov     ax, 6
mov     [bp+var_C], ax
push    ax
mov     ax, 5
mov     [bp+var_8], ax
push    ax
call    sub_17B26
add     sp, 4

loc_117FD:
mov     es, seg_27886
assume es:seg008
cmp     es:word_2232E, 20h ; ' '
jnz     short loc_11852
mov     es, seg_27888
cmp     es:word_22292, 5
jnz     short loc_11852
mov     es, seg_27894
cmp     es:word_22294, 9
jnz     short loc_11852
mov     es, seg_2788A
cmp     es:byte_222FF, 0
jnz     short loc_11852
mov     es:byte_222FF, 1
call    sub_168B0
mov     es, seg_27892
assume es:dseg
mov     es:word_2410E, 15h
mov     [bp+var_C], 1
mov     ax, 6
mov     [bp+var_8], ax
mov     es:word_25A68, ax

loc_11852:
mov     es, seg_27886
assume es:seg008
cmp     es:word_2232E, 21h ; '!'
jnz     short loc_118B7
mov     es, seg_27888
cmp     es:word_22292, 8
jnz     short loc_118B7
mov     es, seg_27894
cmp     es:word_22294, 9
jnz     short loc_118B7
mov     es, seg_2788A
cmp     es:byte_22302, 0
jnz     short loc_118B7
mov     es:byte_22302, 1
mov     ax, 0F8h        ; "8"
mov     es, seg_27886
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
mov     word ptr es:[bx+1BC2h], 8
mov     ax, 9
mov     [bp+var_C], ax
push    ax
mov     ax, 7
mov     [bp+var_8], ax
push    ax
call    sub_1AE6E
add     sp, 4

loc_118B7:
mov     es, seg_27886
assume es:seg008
cmp     es:word_2232E, 21h ; '!'
jz      short loc_118C6
jmp     loc_11967

loc_118C6:
mov     es, seg_2788A
cmp     es:byte_22301, 0
jz      short loc_118D5
jmp     loc_11967

loc_118D5:
mov     es, seg_27888
cmp     es:word_22292, 9
jnz     short loc_118ED
mov     es, seg_27894
cmp     es:word_22294, 4
jz      short loc_11905

loc_118ED:
mov     es, seg_27888
cmp     es:word_22292, 9
jnz     short loc_11967
mov     es, seg_27894
cmp     es:word_22294, 6
jnz     short loc_11967

loc_11905:
mov     es, seg_2788A
mov     es:byte_22301, 1
mov     ax, 0F8h        ; "8"
mov     es, seg_27886
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
mov     word ptr es:[bx+1B42h], 4
mov     ax, 3
push    ax
mov     ax, 9
push    ax
call    sub_17B26
add     sp, 4
mov     ax, 0F8h        ; "8"
mov     es, seg_27886
assume es:seg008
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
mov     word ptr es:[bx+1B9Ah], 4
mov     ax, 7
mov     [bp+var_C], ax
push    ax
mov     ax, 9
mov     [bp+var_8], ax
push    ax
call    sub_17B26
add     sp, 4

loc_11967:
mov     es, seg_27886
assume es:seg008
cmp     es:word_2232E, 26h ; '&'
jnz     short loc_119CC
mov     es, seg_27888
cmp     es:word_22292, 1
jnz     short loc_119CC
mov     es, seg_27894
cmp     es:word_22294, 5
jnz     short loc_119CC
mov     es, seg_2788A
cmp     es:byte_22307, 0
jnz     short loc_119CC
mov     es:byte_22307, 1
mov     ax, 0F8h        ; "8"
mov     es, seg_27886
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
mov     word ptr es:[bx+1B48h], 8
mov     ax, 4
mov     [bp+var_C], ax
push    ax
mov     ax, 1
mov     [bp+var_8], ax
push    ax
call    sub_1AE6E
add     sp, 4

loc_119CC:
mov     es, seg_27886
assume es:seg008
cmp     es:word_2232E, 2Ah ; '*'
jnz     short loc_11A07
mov     es, seg_27888
cmp     es:word_22292, 5
jnz     short loc_11A07
mov     es, seg_27894
cmp     es:word_22294, 9
jnz     short loc_11A07
mov     es, seg_2788A
cmp     es:byte_2230B, 0
jnz     short loc_11A07
mov     es:byte_2230B, 1
call    sub_17182

loc_11A07:
mov     es, seg_27886
cmp     es:word_2232E, 19h
jz      short loc_11A16
jmp     loc_11AD9

loc_11A16:
mov     es, seg_27888
cmp     es:word_22292, 5
jz      short loc_11A25
jmp     loc_11AD9

loc_11A25:
mov     es, seg_27894
cmp     es:word_22294, 8
jz      short loc_11A34
jmp     loc_11AD9

loc_11A34:
mov     es, seg_2788A
cmp     es:byte_222F9, 0
jz      short loc_11A43
jmp     loc_11AD9

loc_11A43:
mov     es:byte_222F9, 1
mov     ax, 0F8h        ; "8"
mov     es, seg_27886
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
mov     word ptr es:[bx+1BBEh], 4
mov     ax, 9
mov     [bp+var_C], ax
push    ax
mov     ax, 5
mov     [bp+var_8], ax
push    ax
call    sub_17B26
add     sp, 4
mov     ax, 792h
push    ax
mov     cx, 160h
push    cx
mov     dx, 16h
push    dx
sub     bx, bx
push    bx
call    sub_2016C
add     sp, 8
mov     ax, 9Fh
push    ax
mov     es, seg_2788C
assume es:seg008
push    es:word_22298
push    es:word_22296
mov     ax, 32h ; '2'
push    ax
mov     ax, 2
push    ax
call    sub_194BA
add     sp, 0Ah
call    sub_20CDA
sub     ax, ax
push    ax
mov     ax, 160h
push    ax
mov     ax, 16h
push    ax
mov     ax, 792h
push    ax
call    sub_200C6
add     sp, 8
mov     ax, 1Eh
push    ax
call    sub_1F9E2
add     sp, 2

loc_11AD9:
mov     ax, offset byte_2230C
mov     es, seg_27886
mul     es:word_2232E
mov     es, seg_27894
mov     bx, es:word_22294
mov     cx, bx
shl     bx, 1
shl     bx, 1
add     bx, cx
shl     bx, 1
add     bx, cx
add     bx, ax
mov     es, seg_27888
add     bx, es:word_22292
shl     bx, 1
mov     es, seg_27892
assume es:dseg
cmp     word ptr es:[bx+1AF0h], 5Dh ; ']'
jnz     short loc_11B1B
cmp     word ptr es:[bx+1AECh], 5Dh ; ']'
jz      short loc_11B5E

loc_11B1B:
mov     ax, offset byte_2230C
mov     es, seg_27886
assume es:seg008
mul     es:word_2232E
mov     es, seg_27894
mov     bx, cx
shl     bx, 1
shl     bx, 1
add     bx, cx
shl     bx, 1
add     bx, cx
add     bx, ax
mov     es, seg_27888
add     bx, es:word_22292
shl     bx, 1
mov     es, seg_27892
assume es:dseg
cmp     word ptr es:[bx+1B04h], 5Dh ; ']'
jz      short loc_11B53
jmp     loc_11C16

loc_11B53:
cmp     word ptr es:[bx+1AD8h], 5Dh ; ']'
jz      short loc_11B5E
jmp     loc_11C16

loc_11B5E:
mov     es, seg_2788A
assume es:seg008
cmp     es:byte_222B2, 5
jnz     short loc_11B6D
jmp     loc_11C16

loc_11B6D:
mov     es, seg_27888
mov     ax, es:word_22292
shl     ax, 1
shl     ax, 1
add     ax, 12h
mov     [bp+var_6], ax
mov     cl, 5
mov     es, seg_27894
mov     ax, es:word_22294
shl     ax, cl
add     ax, 18h
mov     [bp+var_A], ax
mov     es, seg_278A2
mov     ax, es:word_2229A
mov     dx, es:word_2229C
add     ax, 87Ah
push    dx
push    ax
mov     ax, 4Ch ; 'L'
push    ax
call    sub_1F737
add     sp, 6
mov     al, 11h
push    ax
mov     ax, 4Ch ; 'L'
push    ax
mov     ax, 20h ; ' '
push    ax
mov     ax, 2
push    ax
mov     ax, 50h ; 'P'
mul     [bp+var_A]
add     ax, [bp+var_6]
push    ax
call    sub_20256
add     sp, 0Ah
mov     ax, 0BBDh
push    ds
push    ax
call    sub_19D80
add     sp, 4
mov     ax, 7
push    ax
call    sub_20FAB
add     sp, 2
mov     ax, 1Eh
push    ax
call    sub_19288
add     sp, 2
call    sub_1A1E4
mov     es, seg_2789E
cmp     es:word_22328, 1
jz      short loc_11C0B
shr     es:word_22328, 1

loc_11C0B:
mov     al, 1
push    ax
call    sub_1B96C
add     sp, 2

loc_11C16:
mov     ax, offset byte_2230C
mov     es, seg_27886
mul     es:word_2232E
mov     es, seg_27894
mov     bx, es:word_22294
mov     cx, bx
shl     bx, 1
shl     bx, 1
add     bx, cx
shl     bx, 1
add     bx, cx
add     bx, ax
mov     es, seg_27888
add     bx, es:word_22292
shl     bx, 1
mov     es, seg_27892
assume es:dseg
cmp     word ptr es:[bx+1AF0h], 97h
jnz     short loc_11C60
mov     es, seg_27888
assume es:seg008
cmp     es:word_22292, 0Ah
jz      short loc_11C60
jmp     loc_11D21

loc_11C60:
mov     ax, offset byte_2230C
mov     es, seg_27886
mul     es:word_2232E
mov     es, seg_27894
mov     bx, cx
shl     bx, 1
shl     bx, 1
add     bx, cx
shl     bx, 1
add     bx, cx
add     bx, ax
mov     es, seg_27888
add     bx, es:word_22292
shl     bx, 1
mov     es, seg_27892
assume es:dseg
cmp     word ptr es:[bx+1AECh], 97h
jnz     short loc_11CA2
mov     es, seg_27888
assume es:seg008
cmp     es:word_22292, 0
jnz     short loc_11D21

loc_11CA2:
mov     ax, offset byte_2230C
mov     es, seg_27886
mul     es:word_2232E
mov     es, seg_27894
mov     bx, cx
mov     dx, cx
shl     bx, 1
shl     bx, 1
add     bx, cx
shl     bx, 1
add     bx, cx
add     bx, ax
mov     es, seg_27888
add     bx, es:word_22292
shl     bx, 1
mov     es, seg_27892
assume es:dseg
cmp     word ptr es:[bx+1B04h], 97h
jnz     short loc_11CDF
cmp     dx, 0Ah
jnz     short loc_11D21

loc_11CDF:
mov     ax, offset byte_2230C
mov     es, seg_27886
assume es:seg008
mul     es:word_2232E
mov     es, seg_27894
mov     bx, cx
mov     dx, cx
shl     bx, 1
shl     bx, 1
add     bx, cx
shl     bx, 1
add     bx, cx
add     bx, ax
mov     es, seg_27888
add     bx, es:word_22292
shl     bx, 1
mov     es, seg_27892
assume es:dseg
cmp     word ptr es:[bx+1AD8h], 97h
jz      short loc_11D1A
jmp     loc_11DF7

loc_11D1A:
or      dx, dx
jnz     short loc_11D21
jmp     loc_11DF7

loc_11D21:
mov     es, seg_2788A
assume es:seg008
cmp     es:byte_222B2, 5
jnz     short loc_11D30
jmp     loc_11DF7

loc_11D30:
mov     es, seg_27888
mov     ax, es:word_22292
shl     ax, 1
shl     ax, 1
add     ax, 12h
mov     [bp+var_6], ax
mov     cl, 5
mov     es, seg_27894
mov     ax, es:word_22294
shl     ax, cl
add     ax, 18h
mov     [bp+var_A], ax
mov     es, seg_278A2
mov     ax, es:word_2229A
mov     dx, es:word_2229C
add     ax, 87Ah
push    dx
push    ax
mov     ax, 4Ch ; 'L'
push    ax
call    sub_1F737
add     sp, 6
mov     al, 11h
push    ax
mov     ax, 4Ch ; 'L'
push    ax
mov     ax, 20h ; ' '
push    ax
mov     ax, 2
push    ax
mov     ax, 50h ; 'P'
mul     [bp+var_A]
add     ax, [bp+var_6]
push    ax
call    sub_20256
add     sp, 0Ah
mov     ax, 0BE0h
push    ds
push    ax
call    sub_19D80
add     sp, 4
mov     ax, 7
push    ax
call    sub_20FAB
add     sp, 2
mov     ax, 1Eh
push    ax
call    sub_19288
add     sp, 2
call    sub_1A1E4
mov     es, seg_2789E
cmp     es:word_22328, 0C8h
jbe     short loc_11DE0
sub     es:word_22328, 0C8h
mov     al, 1
push    ax
call    sub_1B96C
add     sp, 2
jmp     short loc_11DF7
align 4

loc_11DE0:
mov     es:word_22328, 0
mov     al, 1
push    ax
call    sub_1B96C
add     sp, 2
call    sub_197AC

loc_11DF7:
mov     ax, offset byte_2230C
mov     es, seg_27886
mul     es:word_2232E
mov     es, seg_27894
mov     bx, es:word_22294
mov     cx, bx
shl     bx, 1
shl     bx, 1
add     bx, cx
shl     bx, 1
add     bx, cx
add     bx, ax
mov     es, seg_27888
add     bx, es:word_22292
shl     bx, 1
mov     es, seg_27892
assume es:dseg
cmp     word ptr es:[bx+1AF0h], 99h
jnz     short loc_11E41
mov     es, seg_27888
assume es:seg008
cmp     es:word_22292, 0Ah
jz      short loc_11E41
jmp     loc_11F02

loc_11E41:
mov     ax, offset byte_2230C
mov     es, seg_27886
mul     es:word_2232E
mov     es, seg_27894
mov     bx, cx
shl     bx, 1
shl     bx, 1
add     bx, cx
shl     bx, 1
add     bx, cx
add     bx, ax
mov     es, seg_27888
add     bx, es:word_22292
shl     bx, 1
mov     es, seg_27892
assume es:dseg
cmp     word ptr es:[bx+1AECh], 99h
jnz     short loc_11E83
mov     es, seg_27888
assume es:seg008
cmp     es:word_22292, 0
jnz     short loc_11F02

loc_11E83:
mov     ax, offset byte_2230C
mov     es, seg_27886
mul     es:word_2232E
mov     es, seg_27894
mov     bx, cx
mov     dx, cx
shl     bx, 1
shl     bx, 1
add     bx, cx
shl     bx, 1
add     bx, cx
add     bx, ax
mov     es, seg_27888
add     bx, es:word_22292
shl     bx, 1
mov     es, seg_27892
assume es:dseg
cmp     word ptr es:[bx+1B04h], 99h
jnz     short loc_11EC0
cmp     dx, 0Ah
jnz     short loc_11F02

loc_11EC0:
mov     ax, offset byte_2230C
mov     es, seg_27886
assume es:seg008
mul     es:word_2232E
mov     es, seg_27894
mov     bx, cx
mov     dx, cx
shl     bx, 1
shl     bx, 1
add     bx, cx
shl     bx, 1
add     bx, cx
add     bx, ax
mov     es, seg_27888
add     bx, es:word_22292
shl     bx, 1
mov     es, seg_27892
assume es:dseg
cmp     word ptr es:[bx+1AD8h], 99h
jz      short loc_11EFB
jmp     loc_11FD5

loc_11EFB:
or      dx, dx
jnz     short loc_11F02
jmp     loc_11FD5

loc_11F02:
mov     es, seg_2788A
assume es:seg008
cmp     es:byte_222B2, 5
jnz     short loc_11F11
jmp     loc_11FD5

loc_11F11:
mov     es, seg_27888
mov     ax, es:word_22292
shl     ax, 1
shl     ax, 1
add     ax, 12h
mov     [bp+var_6], ax
mov     cl, 5
mov     es, seg_27894
mov     ax, es:word_22294
shl     ax, cl
add     ax, 18h
mov     [bp+var_A], ax
mov     es, seg_278A2
mov     ax, es:word_2229A
mov     dx, es:word_2229C
add     ax, 87Ah
push    dx
push    ax
mov     ax, 4Ch ; 'L'
push    ax
call    sub_1F737
add     sp, 6
mov     al, 11h
push    ax
mov     ax, 4Ch ; 'L'
push    ax
mov     ax, 20h ; ' '
push    ax
mov     ax, 2
push    ax
mov     ax, 50h ; 'P'
mul     [bp+var_A]
add     ax, [bp+var_6]
push    ax
call    sub_20256
add     sp, 0Ah
mov     ax, 0C0Fh
push    ds
push    ax
call    sub_19D80
add     sp, 4
mov     ax, 7
push    ax
call    sub_20FAB
add     sp, 2
mov     ax, 1Eh
push    ax
call    sub_19288
add     sp, 2
call    sub_1A1E4
mov     es, seg_2789E
cmp     es:word_22328, 64h ; 'd'
jbe     short loc_11FBE
sub     es:word_22328, 64h ; 'd'
mov     al, 1
push    ax
call    sub_1B96C
add     sp, 2
jmp     short loc_11FD5
align 2

loc_11FBE:
mov     es:word_22328, 0
mov     al, 1
push    ax
call    sub_1B96C
add     sp, 2
call    sub_197AC

loc_11FD5:
mov     es, seg_27886
cmp     es:word_2232E, 0Dh
jz      short loc_11FE4
jmp     loc_12096

loc_11FE4:
mov     es, seg_27888
cmp     es:word_22292, 5
jz      short loc_11FF3
jmp     loc_12096

loc_11FF3:
mov     es, seg_27894
cmp     es:word_22294, 9
jz      short loc_12002
jmp     loc_12096

loc_12002:
mov     es, seg_2788A
cmp     es:byte_222BE, 1
jz      short loc_12011
jmp     loc_12096

loc_12011:
mov     ax, 0C3Eh
push    ds
push    ax
call    sub_19D80
add     sp, 4
mov     es, seg_2788A
mov     es:byte_222BE, 0
push    cs
call    near ptr sub_12F8C
mov     ax, 5
mov     [bp+var_8], ax
mov     [bp+var_C], ax
jmp     short loc_12090
align 2

loc_12038:
mov     ax, offset byte_2230C
mov     es, seg_27886
mul     es:word_2232E
mov     bx, ax
mov     ax, [bp+var_C]
mov     cx, ax
shl     ax, 1
shl     ax, 1
add     ax, cx
shl     ax, 1
add     ax, cx
add     bx, ax
add     bx, [bp+var_8]
shl     bx, 1
mov     es, seg_27892
assume es:dseg
mov     word ptr es:[bx+1AEEh], 6
push    [bp+var_C]
push    [bp+var_8]
call    sub_1AE6E
add     sp, 4
mov     ax, 6
push    ax
call    sub_20FAB
add     sp, 2
mov     ax, 1Eh
push    ax
call    sub_1F9E2
add     sp, 2
inc     [bp+var_C]

loc_12090:
cmp     [bp+var_C], 9
jb      short loc_12038

loc_12096:
mov     es, seg_27886
assume es:seg008
cmp     es:word_2232E, 2Fh ; '/'
jz      short loc_120A5
jmp     loc_12177

loc_120A5:
mov     es, seg_27888
cmp     es:word_22292, 0
jz      short loc_120B4
jmp     loc_12177

loc_120B4:
mov     es, seg_27894
cmp     es:word_22294, 2
ja      short loc_120C3
jmp     loc_12177

loc_120C3:
mov     ax, offset byte_2230C
mov     es, seg_27886
mul     es:word_2232E
mov     es, seg_27894
mov     bx, es:word_22294
mov     dx, bx
mov     cx, bx
shl     bx, 1
shl     bx, 1
add     bx, cx
shl     bx, 1
add     bx, cx
add     bx, ax
mov     ax, es
mov     es, seg_27888
add     bx, es:word_22292
shl     bx, 1
mov     es, seg_27892
assume es:dseg
cmp     word ptr es:[bx+1AD8h], 97h
jnz     short loc_12177
mov     word ptr es:[bx+1AD8h], 6
dec     dx
push    dx
mov     es, seg_27888
assume es:seg008
push    es:word_22292
call    sub_1AE6E
add     sp, 4
mov     ax, offset byte_2230C
mov     es, seg_27886
mul     es:word_2232E
mov     es, seg_27894
mov     bx, es:word_22294
mov     dx, bx
mov     cx, bx
shl     bx, 1
shl     bx, 1
add     bx, cx
shl     bx, 1
add     bx, cx
add     bx, ax
mov     es, seg_27888
add     bx, es:word_22292
shl     bx, 1
mov     es, seg_27892
assume es:dseg
mov     word ptr es:[bx+1AC2h], 97h
dec     dx
dec     dx
push    dx
mov     es, seg_27888
assume es:seg008
push    es:word_22292
call    sub_1AE6E
add     sp, 4
mov     ax, 6
push    ax
call    sub_20FAB
add     sp, 2

loc_12177:
mov     es, seg_27886
cmp     es:word_2232E, 2Bh ; '+'
jz      short loc_12186
jmp     loc_12273

loc_12186:
mov     es, seg_27888
cmp     es:word_22292, 7
jz      short loc_12195
jmp     loc_12273

loc_12195:
mov     es, seg_27894
cmp     es:word_22294, 0
jz      short loc_121A4
jmp     loc_12273

loc_121A4:
mov     ax, 0F8h        ; "8"
mov     es, seg_27886
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
cmp     word ptr es:[bx+1AFEh], 5Dh ; ']'
jz      short loc_121C1
jmp     loc_12273

loc_121C1:
mov     word ptr es:[bx+1AFEh], 6
sub     ax, ax
push    ax
mov     cx, 8
push    cx
call    sub_1AE6E
add     sp, 4
mov     ax, 0F8h        ; "8"
mov     es, seg_27886
assume es:seg008
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
mov     word ptr es:[bx+1B02h], 5Dh ; ']'
sub     ax, ax
push    ax
mov     cx, 0Ah
push    cx
call    sub_1AE6E
add     sp, 4
mov     ax, 6
push    ax
call    sub_20FAB
add     sp, 2
mov     ax, 1Eh
push    ax
call    sub_19288
add     sp, 2
mov     ax, 0F8h        ; "8"
mov     es, seg_27886
assume es:seg008
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
mov     word ptr es:[bx+1AFAh], 8
sub     ax, ax
push    ax
mov     cx, 6
push    cx
call    sub_1AE6E
add     sp, 4
mov     ax, 0F8h        ; "8"
mov     es, seg_27886
assume es:seg008
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
mov     word ptr es:[bx+1B00h], 8
sub     ax, ax
push    ax
mov     ax, 9
push    ax
call    sub_1AE6E
add     sp, 4
mov     ax, 0Bh
push    ax
call    sub_20FAB
add     sp, 2

loc_12273:
mov     es, seg_27886
assume es:seg008
cmp     es:word_2232E, 31h ; '1'
jnz     short loc_122C8
mov     es, seg_27888
cmp     es:word_22292, 5
jnz     short loc_122C8
mov     es, seg_27894
cmp     es:word_22294, 5
jnz     short loc_122C8
mov     ax, 0F8h        ; "8"
mov     es, seg_27886
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
cmp     word ptr es:[bx+1B7Ch], 6
jnz     short loc_122C8
mov     es, seg_2788A
assume es:seg008
cmp     es:byte_22312, 0
jnz     short loc_122C8
mov     es:byte_22312, 1
call    sub_1D284

loc_122C8:
mov     es, seg_27886
cmp     es:word_2232E, 18h
jz      short loc_122D7
jmp     loc_123EA

loc_122D7:
mov     es, seg_27888
cmp     es:word_22292, 5
jz      short loc_122E6
jmp     loc_123EA

loc_122E6:
mov     es, seg_27894
cmp     es:word_22294, 6
jz      short loc_122F5
jmp     loc_123EA

loc_122F5:
mov     ax, 0F8h        ; "8"
mov     es, seg_27886
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
cmp     word ptr es:[bx+1B66h], 4
jz      short loc_12312
jmp     loc_123EA

loc_12312:
mov     word ptr es:[bx+1B66h], 4
mov     ax, 5
push    ax
push    ax
call    sub_17A68
add     sp, 4
mov     [bp+var_8], 5
mov     [bp+var_C], 4
mov     es, seg_27892
mov     es:word_26F00, 15h
mov     ax, 908h
push    ds
push    ax
call    sub_1FA51
add     sp, 4
sub     al, al
push    ax
mov     ax, 160h
push    ax
mov     ax, 16h
push    ax
mov     ax, 792h
push    ax
call    sub_1FCD9
add     sp, 8
mov     ax, 1Eh
push    ax
call    sub_1F9E2
add     sp, 2
mov     ax, 908h
push    ds
push    ax
call    sub_1FB8A
add     sp, 4
mov     es, seg_27886
assume es:seg008
mov     es:word_2232E, 18h
jmp     short loc_123A6
align 2

loc_12386:
mov     al, 5
push    ax
call    sub_1B96C
add     sp, 2
mov     ax, 5
push    ax
call    sub_1F9E2
add     sp, 2
mov     es, seg_27886
inc     es:word_2232E

loc_123A6:
cmp     es:word_2232E, 32h ; '2'
jb      short loc_12386
mov     al, 5
push    ax
call    sub_1B96C
add     sp, 2
call    sub_1AFA6
mov     es, seg_27888
mov     es:word_22292, 5
mov     es, seg_27894
mov     es:word_22294, 6
call    sub_1A1E4
mov     ax, 3Ch ; '<'
push    ax
call    sub_1F9E2
add     sp, 2
call    sub_1C4D8

loc_123EA:
mov     sp, bp
pop     bp
retf
sub_11588 endp



; Attributes: bp-based frame

sub_123EE proc far

var_15A= byte ptr -15Ah
var_2E= word ptr -2Eh
var_22= word ptr -22h
var_20= byte ptr -20h
var_A= word ptr -0Ah
var_2= word ptr -2
arg_0= byte ptr  6
arg_2= dword ptr  8

push    bp
mov     bp, sp
sub     sp, 15Ah
push    di
push    si
les     bx, [bp+arg_2]
assume es:nothing
mov     si, es:[bx]
mov     cx, si
mov     ax, si
shl     si, 1
add     si, ax
shl     si, 1
cmp     byte ptr [si+282h], 1
jz      short loc_12411
jmp     loc_12574

loc_12411:
dec     cx
jz      short loc_12417
jmp     loc_12502

loc_12417:
mov     es, seg_2789A
assume es:seg008
cmp     es:word_222AC, 0
jnz     short loc_12426
jmp     loc_12502

loc_12426:
dec     es:word_222AC
call    sub_19FF8
les     bx, [bp+arg_2]
assume es:nothing
mov     word ptr es:[bx], 6
mov     ax, 1
push    ax
mov     cl, [bp+arg_0]
sub     ch, ch
push    cx
call    sub_17BE6
add     sp, 4
mov     es, seg_27886
assume es:seg008
cmp     es:word_2232E, 27h ; '''
jz      short loc_12459
jmp     loc_12F85

loc_12459:
mov     ax, 0F8h
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
cmp     word ptr es:[bx+1B06h], 1
jz      short loc_12472
jmp     loc_12F85

loc_12472:
cmp     word ptr es:[bx+1B0Ah], 6
jz      short loc_1247D
jmp     loc_12F85

loc_1247D:
cmp     word ptr es:[bx+1B0Eh], 1
jz      short loc_12488
jmp     loc_12F85

loc_12488:
cmp     word ptr es:[bx+1B32h], 1
jz      short loc_12493
jmp     loc_12F85

loc_12493:
cmp     word ptr es:[bx+1B36h], 1
jz      short loc_1249E
jmp     loc_12F85

loc_1249E:
cmp     word ptr es:[bx+1B3Ah], 6
jz      short loc_124A9
jmp     loc_12F85

loc_124A9:
cmp     word ptr es:[bx+1B5Eh], 1
jz      short loc_124B4
jmp     loc_12F85

loc_124B4:
cmp     word ptr es:[bx+1B62h], 1
jz      short loc_124BF
jmp     loc_12F85

loc_124BF:
cmp     word ptr es:[bx+1B66h], 1
jz      short loc_124CA
jmp     loc_12F85

loc_124CA:
mov     ax, 6
push    ax
call    sub_20FAB
add     sp, 2
mov     ax, 0F8h        ; "8"
mov     es, seg_27886
assume es:seg008
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
mov     word ptr es:[bx+1B36h], 2Bh ; '+'
mov     ax, 3
mov     [bp+var_A], ax
mov     [bp+var_22], ax
push    ax
push    ax
call    sub_1AE6E
jmp     short loc_1256A
align 2

loc_12502:
mov     es, word ptr [bp+arg_2+2]
assume es:nothing
cmp     word ptr es:[bx], 2
jnz     short loc_1252E
mov     es, seg_27898
assume es:seg008
cmp     es:word_2232A, 0
jz      short loc_1252E
dec     es:word_2232A
call    sub_19FF8
les     bx, [bp+arg_2]
assume es:nothing
mov     word ptr es:[bx], 6
mov     ax, 2
jmp     short loc_1255E

loc_1252E:
mov     es, word ptr [bp+arg_2+2]
cmp     word ptr es:[bx], 3
jz      short loc_1253A
jmp     loc_12F80

loc_1253A:
mov     es, seg_2789C
assume es:seg008
cmp     es:word_22330, 0
jnz     short loc_12549
jmp     loc_12F80

loc_12549:
dec     es:word_22330
call    sub_19FF8
les     bx, [bp+arg_2]
assume es:nothing
mov     word ptr es:[bx], 6
mov     ax, 3

loc_1255E:
push    ax
mov     al, [bp+arg_0]
sub     ah, ah
push    ax
call    sub_17BE6

loc_1256A:
add     sp, 4
pop     si
pop     di
mov     sp, bp
pop     bp
retf
align 2

loc_12574:
cmp     ax, 1Dh
jz      short loc_12586
cmp     ax, 1Eh
jz      short loc_12586
cmp     ax, 1Fh
jz      short loc_12586
jmp     loc_1261A

loc_12586:
mov     ax, 6
push    ax
call    sub_20FAB
add     sp, 2
les     bx, [bp+arg_2]
cmp     word ptr es:[bx], 1Dh
jnz     short loc_125B4
mov     ax, 0C51h
push    ds
push    ax
call    sub_19D80
add     sp, 4
mov     es, seg_2789A
assume es:seg008
inc     es:word_222AC
jmp     short loc_125EE
align 2

loc_125B4:
cmp     word ptr es:[bx], 1Eh
jnz     short loc_125D2
mov     ax, 0C62h
push    ds
push    ax
call    sub_19D80
add     sp, 4
mov     es, seg_2789C
inc     es:word_22330
jmp     short loc_125EE

loc_125D2:
cmp     word ptr es:[bx], 1Fh
jnz     short loc_125EE
mov     ax, 0C77h
push    ds
push    ax
call    sub_19D80
add     sp, 4
mov     es, seg_27898
inc     es:word_2232A

loc_125EE:
call    sub_19FF8

loc_125F3:
les     bx, [bp+arg_2]
assume es:nothing

loc_125F6:
mov     word ptr es:[bx], 6
mov     al, [bp+arg_0]
push    ax
call    sub_1AE00
add     sp, 2
mov     ax, 0Ah

loc_1260A:
push    ax
call    sub_19288

loc_12610:
add     sp, 2
pop     si
pop     di
mov     sp, bp
pop     bp
retf
align 2

loc_1261A:
cmp     ax, 20h ; ' '
jz      short loc_12627
cmp     ax, 21h ; '!'
jz      short loc_12627
jmp     loc_1270E

loc_12627:
mov     ax, 6
push    ax
call    sub_20FAB
add     sp, 2
les     bx, [bp+arg_2]
cmp     word ptr es:[bx], 20h ; ' '
jnz     short loc_12652
mov     es, seg_27886
assume es:seg008
mov     ax, es:word_2232E
dec     ax
mov     cx, 0Ah
sub     dx, dx
div     cx
inc     ax
mov     cx, 32h ; '2'
jmp     short loc_1266C

loc_12652:
cmp     word ptr es:[bx], 21h ; '!'
jnz     short loc_12671
mov     es, seg_27886
mov     ax, es:word_2232E
dec     ax
mov     cx, 0Ah
sub     dx, dx
div     cx
inc     ax
mov     cx, 0C8h

loc_1266C:
mul     cx
mov     [bp+var_2E], ax

loc_12671:
push    [bp+var_2E]
lea     ax, [bp+var_20]
push    ss
push    ax
call    sub_1B7D4
add     sp, 6
lea     ax, [bp+var_15A]
mov     di, ax
mov     si, 0C8Ch
push    ss
pop     es
assume es:nothing
mov     cx, 0Fh
rep movsw
movsb
mov     bx, ax
mov     si, ss
push    si
push    ds
push    si
lea     di, [bp+var_20]
mov     si, bx
pop     ds
mov     cx, 0FFFFh
xor     ax, ax
repne scasb
not     cx
sub     di, cx
push    cx
xchg    di, si
push    ds
push    es
pop     ds
pop     es
mov     cx, 0FFFFh
repne scasb
dec     di
pop     cx
shr     cx, 1
rep movsw
adc     cx, cx
rep movsb
pop     ds
pop     si
mov     di, ss
push    di
push    si
push    ds
push    di
mov     di, 0CABh
mov     si, bx
push    ds
pop     es
assume es:dseg
pop     ds
mov     cx, 0FFFFh
repne scasb
not     cx
sub     di, cx
push    cx
xchg    di, si
push    ds
push    es
pop     ds
pop     es
assume es:nothing
mov     cx, 0FFFFh
repne scasb
dec     di
pop     cx
shr     cx, 1
rep movsw
adc     cx, cx
rep movsb
pop     ds
pop     si
pop     di
push    ss
push    bx
call    sub_19D80
add     sp, 4
mov     ax, [bp+var_2E]
mov     es, seg_2789E
assume es:seg008
add     es:word_22328, ax
mov     al, 1
jmp     loc_127DE
align 2

loc_1270E:
cmp     ax, 22h ; '"'
jz      short loc_1271B
cmp     ax, 23h ; '#'
jz      short loc_1271B
jmp     loc_128A2

loc_1271B:
mov     ax, 6
push    ax
call    sub_20FAB
add     sp, 2
les     bx, [bp+arg_2]
assume es:nothing
cmp     word ptr es:[bx], 22h ; '"'
jz      short loc_12733
jmp     loc_127EA

loc_12733:
mov     es, seg_27886
assume es:seg008
mov     ax, es:word_2232E
dec     ax
mov     cx, 0Ah
sub     dx, dx
div     cx
inc     ax
mov     [bp+var_2E], ax
push    ax
lea     ax, [bp+var_20]
push    ss
push    ax
call    sub_1B7D4
add     sp, 6
lea     ax, [bp+var_15A]
mov     di, ax
mov     si, 0CBAh
push    ss
pop     es
assume es:nothing
mov     cx, 14h
rep movsw
movsb
mov     bx, ax
mov     si, ss
push    si
push    ds
push    si
lea     di, [bp+var_20]
mov     si, bx
pop     ds
mov     cx, 0FFFFh
xor     ax, ax
repne scasb
not     cx
sub     di, cx
push    cx
xchg    di, si
push    ds
push    es
pop     ds
pop     es
mov     cx, 0FFFFh
repne scasb
dec     di
pop     cx
shr     cx, 1
rep movsw
adc     cx, cx
rep movsb
pop     ds
pop     si
mov     di, ss
push    di
push    si
push    ds
push    di
mov     di, 0CE3h
mov     si, bx
push    ds
pop     es
assume es:dseg
pop     ds
mov     cx, 0FFFFh
repne scasb
not     cx
sub     di, cx
push    cx
xchg    di, si
push    ds
push    es
pop     ds
pop     es
assume es:nothing
mov     cx, 0FFFFh
repne scasb
dec     di
pop     cx
shr     cx, 1
rep movsw
adc     cx, cx
rep movsb
pop     ds
pop     si
pop     di
push    ss
push    bx
call    sub_19D80
add     sp, 4
mov     ax, [bp+var_2E]
mov     es, seg_2788E
assume es:seg008
add     es:word_2232C, ax
mov     al, 2

loc_127DE:
push    ax
call    sub_1B96C
add     sp, 2
jmp     loc_125F3

loc_127EA:
cmp     word ptr es:[bx], 23h ; '#'
jz      short loc_127F3
jmp     loc_125F3

loc_127F3:
mov     es, seg_27886
mov     ax, es:word_2232E
dec     ax
mov     cx, 0Ah
sub     dx, dx
div     cx
inc     ax
mov     [bp+var_2E], ax
push    ax
lea     ax, [bp+var_20]
push    ss
push    ax
call    sub_1B7D4
add     sp, 6
lea     ax, [bp+var_15A]
mov     di, ax
mov     si, 0CF2h
push    ss
pop     es
assume es:nothing
mov     cx, 16h
rep movsw
movsb
mov     bx, ax
mov     si, ss
push    si
push    ds
push    si
lea     di, [bp+var_20]
mov     si, bx
pop     ds
mov     cx, 0FFFFh
xor     ax, ax
repne scasb
not     cx
sub     di, cx
push    cx
xchg    di, si
push    ds
push    es
pop     ds
pop     es
mov     cx, 0FFFFh
repne scasb
dec     di
pop     cx
shr     cx, 1
rep movsw
adc     cx, cx
rep movsb
pop     ds
pop     si
mov     di, ss
push    di
push    si
push    ds
push    di
mov     di, 0D1Fh
mov     si, bx
push    ds
pop     es
assume es:dseg
pop     ds
mov     cx, 0FFFFh
repne scasb
not     cx
sub     di, cx
push    cx
xchg    di, si
push    ds
push    es
pop     ds
pop     es
assume es:nothing
mov     cx, 0FFFFh
repne scasb
dec     di
pop     cx
shr     cx, 1
rep movsw
adc     cx, cx
rep movsb
pop     ds
pop     si
pop     di
push    ss
push    bx
call    sub_19D80
add     sp, 4
mov     ax, [bp+var_2E]
mov     es, seg_27890
assume es:seg008
add     es:word_222A6, ax
mov     al, 3
jmp     loc_127DE
align 2

loc_128A2:
mov     bx, es:[bx]
mov     ax, bx
shl     bx, 1
add     bx, ax
shl     bx, 1
cmp     byte ptr [bx+282h], 8
jz      short loc_128BB
cmp     byte ptr [bx+282h], 0Ah
jnz     short loc_128D0

loc_128BB:
mov     al, [bp+arg_0]
push    ax
push    es
push    word ptr [bp+arg_2]
push    cs
call    near ptr sub_16082
add     sp, 6
pop     si
pop     di
mov     sp, bp
pop     bp
retf

loc_128D0:
mov     bx, word ptr [bp+arg_2]
cmp     word ptr es:[bx], 0Bh
jz      short loc_128E2
cmp     word ptr es:[bx], 0Ch
jz      short loc_128E2
jmp     loc_12A0A

loc_128E2:
mov     ax, 8
push    ax
call    sub_20FAB
add     sp, 2
mov     ax, 0D2Eh
push    ds
push    ax
call    sub_19D80
add     sp, 4
les     bx, [bp+arg_2]
assume es:nothing
cmp     word ptr es:[bx], 0Bh
jnz     short loc_1294E
mov     es, seg_27886
assume es:seg008
inc     es:word_2232E
cmp     es:word_2232E, 2Ch ; ','
jnz     short loc_1291E
mov     ax, es:word_2232E
inc     ax
mov     es:word_2232E, ax

loc_1291E:
mov     ax, 0F8h
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
mov     ax, es:[bx+1AEAh]
mov     [bp+var_2], ax
mov     es, seg_27886
assume es:seg008
mov     ax, es:word_2232E
mov     es, seg_278A0
cmp     es:word_22326, ax
jnb     short loc_129BC
mov     es:word_22326, ax
jmp     short loc_129BC
align 2

loc_1294E:
mov     es, seg_27886
dec     es:word_2232E
cmp     es:word_2232E, 2Ch ; ','
jnz     short loc_12968
mov     ax, es:word_2232E
dec     ax
mov     es:word_2232E, ax

loc_12968:
mov     ax, 0F8h
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
mov     ax, es:[bx+1AECh]
mov     [bp+var_2], ax
mov     es, seg_27886
assume es:seg008
cmp     es:word_2232E, 1Ch
jnz     short loc_129BC
mov     es, seg_2788A
cmp     es:byte_222FC, 0
jnz     short loc_129BC
mov     es:byte_222FC, 1
mov     es, seg_27892
assume es:dseg
mov     es:word_25A68, 15h
mov     [bp+var_A], 5
mov     [bp+var_22], 3
mov     ax, 6
mov     es:word_25A7C, ax
mov     es:word_25A92, ax

loc_129BC:
mov     al, 5
push    ax
call    sub_1B96C
add     sp, 2
call    sub_1AFA6
mov     ax, [bp+var_2]
mov     cx, 0Bh
sub     dx, dx
div     cx
mov     bx, ax
mov     dx, ax
shl     ax, 1
shl     ax, 1
add     ax, dx
shl     ax, 1
add     ax, dx
sub     ax, [bp+var_2]
neg     ax
mov     es, seg_27888
assume es:seg008
mov     es:word_22292, ax
mov     es, seg_27894
mov     es:word_22294, bx
call    sub_1A1E4
push    cs
call    near ptr sub_11588
pop     si
pop     di
mov     sp, bp
pop     bp
retf
align 2

loc_12A0A:
cmp     word ptr es:[bx], 10h
jnz     short loc_12A1A
push    cs
call    near ptr sub_142AA
pop     si
pop     di
mov     sp, bp
pop     bp
retf

loc_12A1A:
cmp     word ptr es:[bx], 13h
jnz     short loc_12A28
push    cs
call    near ptr sub_10EA6
jmp     loc_12F85
align 2

loc_12A28:
cmp     word ptr es:[bx], 19h
jnz     short loc_12A36
push    cs
call    near ptr sub_10000
jmp     loc_12F85
align 2

loc_12A36:
cmp     word ptr es:[bx], 15h
jnz     short loc_12A44
push    cs
call    near ptr sub_103E0
jmp     loc_12F85
align 2

loc_12A44:
cmp     word ptr es:[bx], 1Bh
jnz     short loc_12AC0
mov     ax, 792h
push    ax
mov     cx, 160h
push    cx
mov     dx, 16h
push    dx
sub     bx, bx
push    bx
call    sub_2016C
add     sp, 8
mov     ax, 0A0h
push    ax
mov     es, seg_2788C
push    es:word_22298
push    es:word_22296
mov     ax, 78h ; 'x'
push    ax
mov     ax, 6
push    ax
call    sub_194BA
add     sp, 0Ah
call    sub_20CDA
sub     ax, ax
push    ax
mov     ax, 160h
push    ax
mov     ax, 16h
push    ax
mov     ax, 792h
push    ax
call    sub_200C6
add     sp, 8
mov     ax, 5
mov     [bp+var_A], ax
mov     [bp+var_22], ax
mov     es, seg_27892
assume es:dseg
mov     es:word_255E6, 4
mov     ax, 0Ah
push    ax
call    sub_1F9E2
jmp     loc_12610
align 2

loc_12AC0:
cmp     word ptr es:[bx], 17h
jnz     short loc_12AE0
call    sub_174F6

loc_12ACB:
les     bx, [bp+arg_2]
assume es:nothing
mov     word ptr es:[bx], 6
mov     al, [bp+arg_0]
push    ax
call    sub_1AE00
jmp     loc_12610
align 2

loc_12AE0:
cmp     word ptr es:[bx], 33h ; '3'
jz      short loc_12B01
cmp     word ptr es:[bx], 34h ; '4'
jz      short loc_12B01
cmp     word ptr es:[bx], 35h ; '5'
jz      short loc_12B01
cmp     word ptr es:[bx], 36h ; '6'
jz      short loc_12B01
cmp     word ptr es:[bx], 37h ; '7'
jz      short loc_12B01
jmp     loc_12BF2

loc_12B01:
mov     ax, 6
push    ax
call    sub_20FAB
add     sp, 2
les     bx, [bp+arg_2]
cmp     word ptr es:[bx], 33h ; '3'
jnz     short loc_12B3A
mov     ax, 0D2Fh
push    ds
push    ax
call    sub_19D80
add     sp, 4
mov     es, seg_2788E
assume es:seg008
add     es:word_2232C, 0Ah
mov     es, seg_2788A
mov     es:byte_222B1, 1
jmp     loc_12BDF

loc_12B3A:
cmp     word ptr es:[bx], 34h ; '4'
jnz     short loc_12B64
mov     ax, 0D42h
push    ds
push    ax
call    sub_19D80
add     sp, 4
mov     es, seg_2788E
add     es:word_2232C, 14h
mov     es, seg_2788A
mov     es:byte_222B1, 2
jmp     short loc_12BDF
align 2

loc_12B64:
cmp     word ptr es:[bx], 35h ; '5'
jnz     short loc_12B8E
mov     ax, 0D57h
push    ds
push    ax
call    sub_19D80
add     sp, 4
mov     es, seg_2788E
add     es:word_2232C, 28h ; '('
mov     es, seg_2788A
mov     es:byte_222B1, 3
jmp     short loc_12BDF
align 2

loc_12B8E:
cmp     word ptr es:[bx], 36h ; '6'
jnz     short loc_12BB8
mov     ax, 0D6Eh
push    ds
push    ax
call    sub_19D80
add     sp, 4
mov     es, seg_2788E
add     es:word_2232C, 32h ; '2'
mov     es, seg_2788A
mov     es:byte_222B1, 4
jmp     short loc_12BDF
align 2

loc_12BB8:
cmp     word ptr es:[bx], 37h ; '7'
jnz     short loc_12BDF
mov     ax, 0D81h
push    ds
push    ax
call    sub_19D80
add     sp, 4
mov     es, seg_2788E
add     es:word_2232C, 64h ; 'd'
mov     es, seg_2788A
mov     es:byte_222B1, 5

loc_12BDF:
call    sub_19B9C
mov     al, 2

loc_12BE6:
push    ax
call    sub_1B96C
add     sp, 2
jmp     loc_12ACB

loc_12BF2:
cmp     word ptr es:[bx], 38h ; '8'
jz      short loc_12C13
cmp     word ptr es:[bx], 39h ; '9'
jz      short loc_12C13
cmp     word ptr es:[bx], 3Ah ; ':'
jz      short loc_12C13
cmp     word ptr es:[bx], 3Bh ; ';'
jz      short loc_12C13
cmp     word ptr es:[bx], 3Ch ; '<'
jz      short loc_12C13
jmp     loc_12CFC

loc_12C13:
mov     ax, 6
push    ax
call    sub_20FAB
add     sp, 2
les     bx, [bp+arg_2]
assume es:nothing
cmp     word ptr es:[bx], 38h ; '8'
jnz     short loc_12C4C
mov     ax, 0D94h
push    ds
push    ax
call    sub_19D80
add     sp, 4
mov     es, seg_27890
assume es:seg008
add     es:word_222A6, 0Ah
mov     es, seg_2788A
mov     es:byte_222B2, 1
jmp     loc_12CF1

loc_12C4C:
cmp     word ptr es:[bx], 39h ; '9'
jnz     short loc_12C76
mov     ax, 0DA9h
push    ds
push    ax
call    sub_19D80
add     sp, 4
mov     es, seg_27890
add     es:word_222A6, 14h
mov     es, seg_2788A
mov     es:byte_222B2, 2
jmp     short loc_12CF1
align 2

loc_12C76:
cmp     word ptr es:[bx], 3Ah ; ':'
jnz     short loc_12CA0
mov     ax, 0DBEh
push    ds
push    ax
call    sub_19D80
add     sp, 4
mov     es, seg_27890
add     es:word_222A6, 28h ; '('
mov     es, seg_2788A
mov     es:byte_222B2, 3
jmp     short loc_12CF1
align 2

loc_12CA0:
cmp     word ptr es:[bx], 3Bh ; ';'
jnz     short loc_12CCA
mov     ax, 0DD5h
push    ds
push    ax
call    sub_19D80
add     sp, 4
mov     es, seg_27890
add     es:word_222A6, 32h ; '2'
mov     es, seg_2788A
mov     es:byte_222B2, 4
jmp     short loc_12CF1
align 2

loc_12CCA:
cmp     word ptr es:[bx], 3Ch ; '<'
jnz     short loc_12CF1
mov     ax, 0DE8h
push    ds
push    ax
call    sub_19D80
add     sp, 4
mov     es, seg_27890
add     es:word_222A6, 64h ; 'd'
mov     es, seg_2788A
mov     es:byte_222B2, 5

loc_12CF1:
call    sub_19C8E
mov     al, 3
jmp     loc_12BE6
align 2

loc_12CFC:
cmp     word ptr es:[bx], 24h ; '$'
jz      short loc_12D53
cmp     word ptr es:[bx], 25h ; '%'
jz      short loc_12D53
cmp     word ptr es:[bx], 26h ; '&'
jz      short loc_12D53
cmp     word ptr es:[bx], 27h ; '''
jz      short loc_12D53
cmp     word ptr es:[bx], 2Bh ; '+'
jz      short loc_12D53
cmp     word ptr es:[bx], 2Ah ; '*'
jz      short loc_12D53
cmp     word ptr es:[bx], 29h ; ')'
jz      short loc_12D53
cmp     word ptr es:[bx], 2Ch ; ','
jz      short loc_12D53
cmp     word ptr es:[bx], 2Dh ; '-'
jz      short loc_12D53
cmp     word ptr es:[bx], 2Eh ; '.'
jz      short loc_12D53
cmp     word ptr es:[bx], 2Fh ; '/'
jz      short loc_12D53
cmp     word ptr es:[bx], 30h ; '0'
jz      short loc_12D53
cmp     word ptr es:[bx], 31h ; '1'
jz      short loc_12D53
cmp     word ptr es:[bx], 32h ; '2'
jz      short loc_12D53
jmp     loc_12F26

loc_12D53:
mov     ax, 6
push    ax
call    sub_20FAB
add     sp, 2
les     bx, [bp+arg_2]
assume es:nothing
cmp     word ptr es:[bx], 24h ; '$'
jnz     short loc_12D82
mov     ax, 0DFBh
push    ds
push    ax
call    sub_19D80
add     sp, 4
mov     es, seg_2788A
assume es:seg008
mov     es:byte_222B3, 1
jmp     loc_12F1F

loc_12D82:
cmp     word ptr es:[bx], 25h ; '%'
jnz     short loc_12DA2
mov     ax, 0E16h
push    ds
push    ax
call    sub_19D80
add     sp, 4
mov     es, seg_2788A
mov     es:byte_222B4, 1
jmp     loc_12F1F

loc_12DA2:
cmp     word ptr es:[bx], 26h ; '&'
jnz     short loc_12DC2
mov     ax, 0E31h
push    ds
push    ax
call    sub_19D80
add     sp, 4
mov     es, seg_2788A
mov     es:byte_222B5, 1
jmp     loc_12F1F

loc_12DC2:
cmp     word ptr es:[bx], 27h ; '''
jnz     short loc_12DE2
mov     ax, 0E4Ch
push    ds
push    ax
call    sub_19D80
add     sp, 4
mov     es, seg_2788A
mov     es:byte_222B6, 1
jmp     loc_12F1F

loc_12DE2:
cmp     word ptr es:[bx], 29h ; ')'
jnz     short loc_12E02
mov     ax, 0E61h
push    ds
push    ax
call    sub_19D80
add     sp, 4
mov     es, seg_2788A
mov     es:byte_222B8, 1
jmp     loc_12F1F

loc_12E02:
cmp     word ptr es:[bx], 2Bh ; '+'
jnz     short loc_12E22
mov     ax, 0E78h
push    ds
push    ax
call    sub_19D80
add     sp, 4
mov     es, seg_2788A
mov     es:byte_222BA, 1
jmp     loc_12F1F

loc_12E22:
cmp     word ptr es:[bx], 2Ah ; '*'
jnz     short loc_12E42
mov     ax, 0E95h
push    ds
push    ax
call    sub_19D80
add     sp, 4
mov     es, seg_2788A
mov     es:byte_222B9, 1
jmp     loc_12F1F

loc_12E42:
cmp     word ptr es:[bx], 2Ch ; ','
jnz     short loc_12E62
mov     ax, 0EACh
push    ds
push    ax
call    sub_19D80
add     sp, 4
mov     es, seg_2788A
mov     es:byte_222BB, 1
jmp     loc_12F1F

loc_12E62:
cmp     word ptr es:[bx], 2Dh ; '-'
jnz     short loc_12E82
mov     ax, 0EC3h
push    ds
push    ax
call    sub_19D80
add     sp, 4
mov     es, seg_2788A
mov     es:byte_222BC, 1
jmp     loc_12F1F

loc_12E82:
cmp     word ptr es:[bx], 2Eh ; '.'
jnz     short loc_12EA2
mov     ax, 0EDAh
push    ds
push    ax
call    sub_19D80
add     sp, 4
mov     es, seg_2788A
mov     es:byte_222BD, 1
jmp     short loc_12F1F
align 2

loc_12EA2:
cmp     word ptr es:[bx], 2Fh ; '/'
jnz     short loc_12EC2
mov     ax, 0EFBh
push    ds
push    ax
call    sub_19D80
add     sp, 4
mov     es, seg_2788A
mov     es:byte_222BE, 1
jmp     short loc_12F1F
align 2

loc_12EC2:
cmp     word ptr es:[bx], 30h ; '0'
jnz     short loc_12EE2
mov     ax, 0F12h
push    ds
push    ax
call    sub_19D80
add     sp, 4
mov     es, seg_2788A
mov     es:byte_222BF, 1
jmp     short loc_12F1F
align 2

loc_12EE2:
cmp     word ptr es:[bx], 31h ; '1'
jnz     short loc_12F02
mov     ax, 0F29h
push    ds
push    ax
call    sub_19D80
add     sp, 4
mov     es, seg_2788A
mov     es:byte_222C0, 1
jmp     short loc_12F1F
align 2

loc_12F02:
cmp     word ptr es:[bx], 32h ; '2'
jnz     short loc_12F1F
mov     ax, 0F48h
push    ds
push    ax
call    sub_19D80
add     sp, 4
mov     es, seg_2788A
mov     es:byte_222C1, 1

loc_12F1F:
push    cs
call    near ptr sub_12F8C
jmp     loc_125F3

loc_12F26:
cmp     word ptr es:[bx], 9
jnz     short loc_12F2F
jmp     loc_125F6

loc_12F2F:
cmp     word ptr es:[bx], 0Ah
jnz     short loc_12F3C
push    cs
call    near ptr sub_102C6
jmp     short loc_12F85
align 2

loc_12F3C:
cmp     word ptr es:[bx], 7
jnz     short loc_12F80
mov     ax, 6
push    ax
call    sub_20FAB
add     sp, 2
mov     ax, 0F8h        ; "8"
mov     es, seg_27886
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
mov     word ptr es:[bx+1AEEh], 5Dh ; ']'
sub     ax, ax
mov     [bp+var_A], ax
mov     [bp+var_22], ax
push    ax
push    ax
call    sub_1AE6E
add     sp, 4
mov     ax, 32h ; '2'
jmp     loc_1260A
align 2

loc_12F80:
call    sub_192A4

loc_12F85:
pop     si
pop     di
mov     sp, bp
pop     bp
retf
sub_123EE endp

align 2



sub_12F8C proc far
push    di
push    si
mov     si, 35Ah
sub     di, di

loc_12F93:
mov     al, 0DDh
push    ax
mov     ax, 20h ; ' '
push    ax
mov     ax, 2
push    ax
mov     ax, 4Ch ; 'L'
push    ax
call    sub_1FD07
add     sp, 8
mov     es, seg_2788A
assume es:seg008
cmp     byte ptr es:[di+23h], 1
jnz     short loc_12FFE
mov     es, seg_278A2
mov     ax, es:word_2229A
mov     dx, es:word_2229C
add     ax, [si+4]
push    dx
push    ax
mov     ax, 0A4Ch
push    ax
call    sub_1F737
add     sp, 6
cmp     byte ptr [si], 5
jnz     short loc_12FDE
mov     al, 11h
jmp     short loc_12FE5
align 2

loc_12FDE:
cmp     byte ptr [si], 6
jnz     short loc_12FFE
mov     al, 88h

loc_12FE5:
push    ax
mov     ax, 0A4Ch
push    ax
mov     ax, 20h ; ' '
push    ax
mov     ax, 2
push    ax
mov     ax, 4Ch ; 'L'
push    ax
call    sub_20385
add     sp, 0Ah

loc_12FFE:
mov     ax, 4Ch ; 'L'
push    ax
mov     ax, 20h ; ' '
push    ax
mov     ax, 2
push    ax
mov     ax, di
mov     cx, 3
sub     dx, dx
div     cx
mov     ax, di
mov     bx, dx
sub     dx, dx
div     cx
mov     cx, 280h
mul     cx
add     bx, ax
shl     bx, 1
shl     bx, 1
add     bx, 3C02h
push    bx
call    sub_1FE82
add     sp, 8
inc     di
add     si, 6
cmp     si, 3B4h
jnb     short loc_13040
jmp     loc_12F93

loc_13040:
pop     si
pop     di
retf
sub_12F8C endp

align 2


; Attributes: bp-based frame

sub_13044 proc far

var_46= word ptr -46h
var_44= word ptr -44h
var_42= word ptr -42h
var_40= word ptr -40h
var_3E= word ptr -3Eh
var_3C= word ptr -3Ch
var_3A= word ptr -3Ah
var_38= word ptr -38h
var_36= word ptr -36h
var_34= word ptr -34h
var_32= word ptr -32h
var_30= word ptr -30h
var_2E= word ptr -2Eh
var_2C= word ptr -2Ch
var_2A= word ptr -2Ah
var_28= word ptr -28h
var_26= word ptr -26h
var_24= word ptr -24h
var_22= word ptr -22h
var_20= word ptr -20h
var_1E= word ptr -1Eh
var_1C= word ptr -1Ch
var_1A= word ptr -1Ah
var_18= word ptr -18h
var_16= word ptr -16h
var_14= word ptr -14h
var_12= word ptr -12h
var_10= word ptr -10h
var_E= word ptr -0Eh
var_C= word ptr -0Ch
var_A= word ptr -0Ah
var_8= word ptr -8
var_6= word ptr -6
var_4= word ptr -4
var_2= word ptr -2

push    bp
mov     bp, sp
sub     sp, 46h
push    di
push    si
mov     [bp+var_2A], 5Fh ; '_'
mov     ax, 6
mov     [bp+var_42], ax
mov     [bp+var_3C], ax
mov     [bp+var_3A], ax
mov     [bp+var_36], ax
mov     [bp+var_30], ax
mov     [bp+var_28], ax
mov     [bp+var_24], ax
mov     [bp+var_20], ax
mov     [bp+var_1E], ax
mov     [bp+var_1A], ax
mov     [bp+var_18], ax
mov     [bp+var_16], ax
mov     [bp+var_14], ax
mov     [bp+var_12], ax
mov     ax, 0FFFFh
mov     [bp+var_10], ax
mov     [bp+var_E], ax
mov     [bp+var_C], ax
mov     ax, 0F8h        ; "8"
mov     es, seg_27886
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
mov     ax, 4
mov     [bp+var_46], ax
mov     [bp+var_44], ax
mov     [bp+var_3E], ax
mov     [bp+var_38], ax
mov     [bp+var_34], ax
mov     [bp+var_22], ax
mov     es:[bx+1BA8h], ax
mov     ax, 8
push    ax
mov     ax, 5
mov     [bp+var_40], ax
mov     [bp+var_32], ax
mov     [bp+var_2E], ax
mov     [bp+var_2C], ax
mov     [bp+var_26], ax
mov     [bp+var_1C], ax
push    ax
call    sub_17B26
add     sp, 4
sub     di, di

loc_130DA:
sub     si, si
mov     [bp+var_4], di

loc_130DF:
mov     es, seg_278A2
assume es:seg008
push    es:word_2229C
push    es:word_2229A
mov     ax, di
add     ax, si
push    ax
call    sub_1F737
add     sp, 6
add     si, 4
cmp     si, 3Ch ; '<'
jb      short loc_130DF
add     di, 0A00h
cmp     di, 3C00h
jb      short loc_130DA
mov     es, seg_278A4
mov     ax, es:word_2229E
mov     dx, es:word_222A0
add     ax, 7577h
push    dx
push    ax
mov     ax, 3C00h
push    ax
call    sub_1F737
add     sp, 6
sub     al, al
push    ax
mov     ax, 3C00h
push    ax
mov     ax, 0C0h
push    ax
mov     ax, 3Ch ; '<'
push    ax
sub     ax, ax
push    ax
call    sub_20385
add     sp, 0Ah
mov     [bp+var_2], 22h ; '"'
mov     [bp+var_4], 98h
mov     [bp+var_6], 6
mov     [bp+var_8], 60h ; '`'
sub     di, di

loc_1315A:
sub     si, si
mov     [bp+var_A], di

loc_1315F:
mov     ax, di
add     ax, si
push    ax
mov     ax, 60h ; '`'
push    ax
mov     ax, 6
push    ax
mov     ax, 2FA2h
push    ax
call    sub_1FE82
add     sp, 8
mov     ax, 19h
push    ax
call    sub_1F9E2
add     sp, 2
add     si, 0Ch
cmp     si, 3Ch ; '<'
jb      short loc_1315F
add     di, 1E00h
cmp     di, 3C00h
jb      short loc_1315A
lea     si, [bp+var_44]

loc_13199:
mov     ax, offset byte_2230C
mov     es, seg_27886
mul     es:word_2232E
mov     bx, ax
add     bx, [si-2]
mov     ax, [si]
mov     cx, ax
shl     ax, 1
shl     ax, 1
add     ax, cx
shl     ax, 1
add     ax, cx
add     bx, ax
shl     bx, 1
mov     es, seg_27892
assume es:dseg
mov     ax, [si+2]
mov     es:[bx+1AEEh], ax
push    word ptr [si]
push    word ptr [si-2]
call    sub_1AE6E
add     sp, 4
add     si, 6
cmp     word ptr [si+2], 0FFFFh
jnz     short loc_13199
mov     ax, 32h ; '2'
push    ax
call    sub_1F9E2
add     sp, 2
mov     ax, 792h
push    ax
mov     cx, 160h
push    cx
mov     dx, 16h
push    dx
sub     bx, bx
push    bx
call    sub_2016C
add     sp, 8
mov     ax, 79h ; 'y'
push    ax
mov     es, seg_2788C
assume es:seg008
push    es:word_22298
push    es:word_22296
mov     ax, 78h ; 'x'
push    ax
mov     ax, 5
push    ax
call    sub_194BA
add     sp, 0Ah
call    sub_20CDA
sub     ax, ax
push    ax
mov     ax, 160h
push    ax
mov     ax, 16h
push    ax
mov     ax, 792h
push    ax
call    sub_200C6
add     sp, 8
sub     al, al
push    ax
mov     ax, 7E90h
push    ax
mov     ax, 7D00h
push    ax
call    sub_1A986
add     sp, 6
call    sub_1ABE6
pop     si
pop     di
mov     sp, bp
pop     bp
retf
sub_13044 endp

align 2


; Attributes: bp-based frame

sub_1325E proc far

var_102= word ptr -102h
var_FE= word ptr -0FEh
var_FA= word ptr -0FAh
var_F8= word ptr -0F8h
var_F6= word ptr -0F6h
var_F4= word ptr -0F4h
var_F2= word ptr -0F2h
var_F0= word ptr -0F0h
var_EE= word ptr -0EEh
var_EC= word ptr -0ECh
var_EA= word ptr -0EAh
var_E8= word ptr -0E8h
var_E6= word ptr -0E6h
var_E4= word ptr -0E4h
var_E2= word ptr -0E2h
var_E0= word ptr -0E0h
var_DE= word ptr -0DEh
var_DC= word ptr -0DCh
var_DA= word ptr -0DAh
var_D8= word ptr -0D8h
var_D6= word ptr -0D6h
var_D4= word ptr -0D4h
var_D2= word ptr -0D2h
var_D0= word ptr -0D0h
var_CE= word ptr -0CEh
var_CC= word ptr -0CCh
var_CA= word ptr -0CAh
var_C8= word ptr -0C8h
var_C6= word ptr -0C6h
var_C4= word ptr -0C4h
var_C2= word ptr -0C2h
var_C0= word ptr -0C0h
var_BE= word ptr -0BEh
var_BC= word ptr -0BCh
var_BA= word ptr -0BAh
var_B8= word ptr -0B8h
var_B6= word ptr -0B6h
var_B4= word ptr -0B4h
var_B2= word ptr -0B2h
var_B0= word ptr -0B0h
var_AE= word ptr -0AEh
var_AC= word ptr -0ACh
var_AA= word ptr -0AAh
var_A8= word ptr -0A8h
var_A6= word ptr -0A6h
var_A4= word ptr -0A4h
var_A2= word ptr -0A2h
var_A0= word ptr -0A0h
var_9E= word ptr -9Eh
var_9C= word ptr -9Ch
var_9A= word ptr -9Ah
var_98= word ptr -98h
var_96= word ptr -96h
var_94= word ptr -94h
var_92= byte ptr -92h
var_91= byte ptr -91h
var_90= byte ptr -90h
var_8F= byte ptr -8Fh
var_8E= byte ptr -8Eh
var_8D= byte ptr -8Dh
var_8C= byte ptr -8Ch
var_8B= byte ptr -8Bh
var_8A= byte ptr -8Ah
var_89= byte ptr -89h
var_88= byte ptr -88h
var_87= byte ptr -87h
var_86= byte ptr -86h
var_85= byte ptr -85h
var_84= byte ptr -84h
var_83= byte ptr -83h
var_82= byte ptr -82h
var_81= byte ptr -81h
var_80= byte ptr -80h
var_7F= byte ptr -7Fh
var_7E= byte ptr -7Eh
var_7D= byte ptr -7Dh
var_7C= byte ptr -7Ch
var_7B= byte ptr -7Bh
var_7A= byte ptr -7Ah
var_79= byte ptr -79h
var_78= byte ptr -78h
var_77= byte ptr -77h
var_76= byte ptr -76h
var_75= byte ptr -75h
var_74= byte ptr -74h
var_73= byte ptr -73h
var_72= byte ptr -72h
var_71= byte ptr -71h
var_70= byte ptr -70h
var_6F= byte ptr -6Fh
var_6E= byte ptr -6Eh
var_6D= byte ptr -6Dh
var_6C= byte ptr -6Ch
var_6B= byte ptr -6Bh
var_6A= byte ptr -6Ah
var_69= byte ptr -69h
var_68= byte ptr -68h
var_67= byte ptr -67h
var_66= byte ptr -66h
var_65= byte ptr -65h
var_64= byte ptr -64h
var_63= byte ptr -63h
var_62= byte ptr -62h
var_61= byte ptr -61h
var_60= byte ptr -60h
var_5F= byte ptr -5Fh
var_5E= byte ptr -5Eh
var_5D= byte ptr -5Dh
var_5C= byte ptr -5Ch
var_5B= byte ptr -5Bh
var_5A= byte ptr -5Ah
var_59= byte ptr -59h
var_58= byte ptr -58h
var_57= byte ptr -57h
var_56= byte ptr -56h
var_55= byte ptr -55h
var_54= byte ptr -54h
var_53= byte ptr -53h
var_52= byte ptr -52h
var_51= byte ptr -51h
var_50= byte ptr -50h
var_4F= byte ptr -4Fh
var_4E= byte ptr -4Eh
var_4D= byte ptr -4Dh
var_4C= byte ptr -4Ch
var_4B= byte ptr -4Bh
var_4A= byte ptr -4Ah
var_49= byte ptr -49h
var_48= byte ptr -48h
var_47= byte ptr -47h
var_46= byte ptr -46h
var_45= byte ptr -45h
var_44= byte ptr -44h
var_43= byte ptr -43h
var_42= byte ptr -42h
var_41= byte ptr -41h
var_40= byte ptr -40h
var_3F= byte ptr -3Fh
var_3E= byte ptr -3Eh
var_3D= byte ptr -3Dh
var_3C= byte ptr -3Ch
var_3B= byte ptr -3Bh
var_3A= byte ptr -3Ah
var_38= word ptr -38h
var_36= word ptr -36h
var_34= word ptr -34h
var_32= word ptr -32h
var_30= word ptr -30h
var_2E= word ptr -2Eh
var_2C= word ptr -2Ch
var_2A= word ptr -2Ah
var_28= word ptr -28h
var_26= word ptr -26h
var_24= word ptr -24h
var_22= word ptr -22h
var_20= word ptr -20h
var_1E= word ptr -1Eh
var_1C= word ptr -1Ch
var_1A= word ptr -1Ah
var_18= word ptr -18h
var_16= word ptr -16h
var_14= word ptr -14h
var_12= word ptr -12h
var_10= word ptr -10h
var_E= word ptr -0Eh
var_C= word ptr -0Ch
var_A= word ptr -0Ah
var_8= word ptr -8
var_6= word ptr -6
var_4= word ptr -4
var_2= word ptr -2

push    bp
mov     bp, sp
sub     sp, 102h
push    si
mov     [bp+var_EA], 17h
mov     ax, 22h ; '"'
mov     [bp+var_E4], ax
mov     [bp+var_DE], ax
mov     [bp+var_D8], ax
mov     ax, 23h ; '#'
mov     [bp+var_D2], ax
mov     [bp+var_CC], ax
mov     [bp+var_C6], ax
mov     ax, 21h ; '!'
mov     [bp+var_C0], ax
mov     [bp+var_BA], ax
mov     [bp+var_B4], ax
mov     ax, 1Dh
mov     [bp+var_AE], ax
mov     [bp+var_A8], ax
mov     [bp+var_A2], ax
mov     [bp+var_9E], 0
mov     [bp+var_9C], 0Bh
mov     ax, 0FFFFh
mov     [bp+var_9A], ax
mov     [bp+var_98], ax
mov     [bp+var_96], ax
mov     ax, 4
mov     [bp+var_B8], ax
mov     [bp+var_38], ax
mov     ax, 6
mov     [bp+var_F0], ax
mov     [bp+var_B2], ax
mov     [bp+var_2C], ax
mov     ax, 3
mov     [bp+var_DC], ax
mov     [bp+var_C2], ax
mov     [bp+var_BE], ax
mov     [bp+var_BC], ax
mov     [bp+var_B6], ax
mov     [bp+var_B0], ax
mov     [bp+var_AA], ax
mov     [bp+var_A4], ax
mov     [bp+var_36], ax
mov     [bp+var_34], ax
mov     [bp+var_32], ax
mov     [bp+var_2E], ax
mov     [bp+var_2A], ax
mov     [bp+var_26], ax
mov     [bp+var_22], ax
mov     [bp+var_20], ax
mov     ax, 2
mov     [bp+var_E2], ax
mov     [bp+var_C4], ax
mov     [bp+var_30], ax
mov     [bp+var_1C], ax
mov     ax, 7
mov     [bp+var_F2], ax
mov     [bp+var_D6], ax
mov     [bp+var_AC], ax
mov     [bp+var_28], ax
mov     [bp+var_14], ax
mov     ax, 8
mov     [bp+var_D0], ax
mov     [bp+var_A6], ax
mov     [bp+var_24], ax
mov     [bp+var_10], ax
mov     ax, 9
mov     [bp+var_CA], ax
mov     [bp+var_C], ax
mov     ax, 1
mov     [bp+var_E8], ax
mov     [bp+var_E6], ax
mov     [bp+var_E0], ax
mov     [bp+var_DA], ax
mov     [bp+var_D4], ax
mov     [bp+var_CE], ax
mov     [bp+var_C8], ax
mov     [bp+var_1E], ax
mov     [bp+var_1A], ax
mov     [bp+var_18], ax
mov     [bp+var_16], ax
mov     [bp+var_12], ax
mov     [bp+var_E], ax
mov     [bp+var_A], ax
mov     [bp+var_6], ax
mov     ax, 5
mov     [bp+var_F4], ax
mov     [bp+var_EE], ax
mov     [bp+var_EC], ax
mov     [bp+var_A0], ax
mov     [bp+var_8], ax
mov     [bp+var_4], ax
mov     [bp+var_2], ax
mov     al, 1
mov     [bp+var_91], al
mov     [bp+var_8E], al
mov     [bp+var_8C], al
mov     [bp+var_89], al
mov     [bp+var_88], al
mov     [bp+var_86], al
mov     al, 5
mov     [bp+var_8F], al
mov     [bp+var_8A], al
mov     [bp+var_84], al
mov     [bp+var_80], al
mov     al, 2
mov     [bp+var_82], al
mov     [bp+var_7F], al
mov     [bp+var_7D], al
mov     al, 3
mov     [bp+var_92], al
mov     [bp+var_90], al
mov     [bp+var_8D], al
mov     [bp+var_8B], al
mov     [bp+var_87], al
mov     [bp+var_85], al
mov     [bp+var_83], al
mov     [bp+var_81], al
mov     [bp+var_7E], al
mov     [bp+var_7C], al
mov     al, 1
mov     [bp+var_73], al
mov     [bp+var_71], al
mov     [bp+var_6D], al
mov     [bp+var_6B], al
mov     [bp+var_69], al
mov     [bp+var_65], al
mov     [bp+var_64], al
mov     [bp+var_62], al
mov     [bp+var_60], al
mov     al, 2
mov     [bp+var_7A], al
mov     [bp+var_79], al
mov     [bp+var_77], al
mov     [bp+var_5B], al
mov     [bp+var_59], al
mov     [bp+var_55], al
mov     [bp+var_53], al
mov     [bp+var_51], al
mov     [bp+var_4D], al
mov     [bp+var_4C], al
mov     [bp+var_4A], al
mov     [bp+var_48], al
mov     al, 3
mov     [bp+var_78], al
mov     [bp+var_76], al
mov     [bp+var_74], al
mov     [bp+var_72], al
mov     [bp+var_70], al
mov     [bp+var_6F], al
mov     [bp+var_6C], al
mov     [bp+var_6A], al
mov     [bp+var_68], al
mov     [bp+var_67], al
mov     [bp+var_63], al
mov     [bp+var_61], al
mov     [bp+var_5F], al
mov     [bp+var_5E], al
mov     [bp+var_5C], al
mov     [bp+var_5A], al
mov     [bp+var_58], al
mov     [bp+var_57], al
mov     [bp+var_54], al
mov     [bp+var_52], al
mov     [bp+var_50], al
mov     [bp+var_4F], al
mov     [bp+var_4B], al
mov     [bp+var_49], al
mov     [bp+var_47], al
mov     [bp+var_46], al
mov     [bp+var_44], al
mov     [bp+var_43], al
mov     [bp+var_42], al
mov     [bp+var_41], al
mov     al, 4
mov     [bp+var_3F], al
mov     [bp+var_3E], al
mov     [bp+var_3D], al
mov     [bp+var_3C], al
mov     [bp+var_3B], al
mov     al, 5
mov     [bp+var_7B], al
mov     [bp+var_75], al
mov     [bp+var_6E], al
mov     [bp+var_66], al
mov     [bp+var_5D], al
mov     [bp+var_56], al
mov     [bp+var_4E], al
mov     [bp+var_45], al
mov     [bp+var_40], al
mov     [bp+var_3A], al
mov     ax, 792h
push    ax
mov     cx, 160h
push    cx
mov     dx, 16h
push    dx
sub     bx, bx
push    bx
call    sub_2016C
add     sp, 8
mov     ax, 87h
push    ax
mov     es, seg_2788C
push    es:word_22298
push    es:word_22296
mov     ax, 78h ; 'x'
push    ax
mov     ax, 3
push    ax
call    sub_194BA
add     sp, 0Ah
call    sub_20CDA
sub     ax, ax
push    ax
mov     cx, 160h
push    cx
mov     cx, 16h
push    cx
mov     cx, 792h
push    cx
call    sub_200C6
add     sp, 8
mov     ax, 0F8h        ; "8"
mov     es, seg_27886
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
mov     word ptr es:[bx+1B92h], 4
mov     ax, 7
mov     [bp+var_F8], ax
push    ax
mov     ax, 5
mov     [bp+var_F6], ax
push    ax
call    sub_17B26
add     sp, 4
mov     al, 11h
push    ax
mov     ax, 0DE04h
push    ax
mov     ax, 0DC93h
push    ax
call    sub_1A986
add     sp, 6
call    sub_1ABE6
sub     ax, ax
mov     [bp+var_FA], ax
mov     [bp+var_FE], ax
jmp     loc_1363C

loc_13584:
push    [bp+var_F8]
push    [bp+var_F6]
mov     al, [bp+si+var_92]
push    ax
mov     [bp+var_102], ax
call    sub_1A276
add     sp, 6
cmp     byte ptr [bp+var_102], 1
jnz     short loc_135A8
inc     [bp+var_F6]

loc_135A8:
mov     si, [bp+var_FA]
cmp     [bp+si+var_92], 2
jnz     short loc_135B7
dec     [bp+var_F6]

loc_135B7:
cmp     [bp+si+var_92], 3
jnz     short loc_135C2
inc     [bp+var_F8]

loc_135C2:
cmp     [bp+si+var_92], 4
jnz     short loc_135CD
dec     [bp+var_F8]

loc_135CD:
inc     [bp+var_FA]

loc_135D1:
mov     si, [bp+var_FA]
cmp     [bp+si+var_92], 5
jnz     short loc_13584
inc     [bp+var_FA]
mov     ax, 5
mov     [bp+var_F6], ax
mov     [bp+var_F8], ax
push    ax
push    ax
call    sub_1AE6E
add     sp, 4
mov     [bp+var_94], 8Dh
sub     al, al
push    ax
lea     ax, [bp+var_94]
push    ss
push    ax
push    cs
call    near ptr sub_16082
add     sp, 6
mov     es, seg_27886
assume es:seg008
cmp     es:word_2232E, 28h ; '('
jz      short loc_1361A
jmp     loc_13E05

loc_1361A:
mov     es, seg_27888
cmp     es:word_22292, 5
jz      short loc_13629
jmp     loc_13E05

loc_13629:
mov     es, seg_27894
cmp     es:word_22294, 6
jz      short loc_13638
jmp     loc_13E05

loc_13638:
inc     [bp+var_FE]

loc_1363C:
cmp     [bp+var_FE], 3
jnb     short loc_13686
mov     si, [bp+var_FE]
shl     si, 1
shl     si, 1
mov     ax, [bp+si+var_36]
mov     [bp+var_F8], ax
mov     cx, ax
shl     ax, 1
shl     ax, 1
add     ax, cx
shl     ax, 1
add     ax, cx
mov     bx, [bp+si+var_38]
mov     [bp+var_F6], bx
add     bx, ax
mov     ax, offset byte_2230C
mov     es, seg_27886
mul     es:word_2232E
add     bx, ax
shl     bx, 1
mov     es, seg_27892
assume es:dseg
mov     word ptr es:[bx+1AEEh], 6
jmp     loc_135D1
align 2

loc_13686:
mov     ax, 792h
push    ax
mov     cx, 160h
push    cx
mov     dx, 16h
push    dx
sub     bx, bx
push    bx
call    sub_2016C
add     sp, 8
mov     ax, 88h
push    ax
mov     es, seg_2788C
assume es:seg008
push    es:word_22298
push    es:word_22296
mov     ax, 78h ; 'x'
push    ax
mov     ax, 2
push    ax
call    sub_194BA
add     sp, 0Ah
call    sub_20CDA
sub     ax, ax
push    ax
mov     ax, 160h
push    ax
mov     ax, 16h
push    ax
mov     ax, 792h
push    ax
call    sub_200C6
add     sp, 8
mov     al, 11h
push    ax
mov     ax, 0DB26h
push    ax
mov     ax, 0D9B8h
push    ax
call    sub_1A986
add     sp, 6
call    sub_1ABE6

loc_136F3:
cmp     [bp+var_FE], 6
jb      short loc_1376A
mov     ax, 792h
push    ax
mov     cx, 160h
push    cx
mov     dx, 16h
push    dx
sub     bx, bx
push    bx
call    sub_2016C
add     sp, 8
mov     ax, 89h
push    ax
mov     es, seg_2788C
push    es:word_22298
push    es:word_22296
mov     ax, 78h ; 'x'
push    ax
mov     ax, 2
push    ax
call    sub_194BA
add     sp, 0Ah
call    sub_20CDA
sub     ax, ax
push    ax
mov     ax, 160h
push    ax
mov     ax, 16h
push    ax
mov     ax, 792h
push    ax
call    sub_200C6
add     sp, 8
mov     al, 88h
push    ax
mov     ax, 0D82Ch
push    ax
mov     ax, 0D6A4h
push    ax
call    sub_1A986
add     sp, 6
call    sub_1ABE6
jmp     loc_13964

loc_1376A:
mov     si, [bp+var_FE]
shl     si, 1
shl     si, 1
mov     ax, [bp+si+var_36]
mov     [bp+var_F8], ax
mov     cx, ax
shl     ax, 1
shl     ax, 1
add     ax, cx
shl     ax, 1
add     ax, cx
mov     bx, [bp+si+var_38]
mov     [bp+var_F6], bx
add     bx, ax
mov     ax, offset byte_2230C
mov     es, seg_27886
mul     es:word_2232E
add     bx, ax
shl     bx, 1
mov     es, seg_27892
assume es:dseg
mov     word ptr es:[bx+1AEEh], 6
jmp     short loc_137F9
align 2

loc_137AC:
push    [bp+var_F8]
push    [bp+var_F6]
mov     al, [bp+si+var_92]
push    ax
mov     [bp+var_102], ax
call    sub_1A276
add     sp, 6
cmp     byte ptr [bp+var_102], 1
jnz     short loc_137D0
inc     [bp+var_F6]

loc_137D0:
mov     si, [bp+var_FA]
cmp     [bp+si+var_92], 2
jnz     short loc_137DF
dec     [bp+var_F6]

loc_137DF:
cmp     [bp+si+var_92], 3
jnz     short loc_137EA
inc     [bp+var_F8]

loc_137EA:
cmp     [bp+si+var_92], 4
jnz     short loc_137F5
dec     [bp+var_F8]

loc_137F5:
inc     [bp+var_FA]

loc_137F9:
mov     si, [bp+var_FA]
cmp     [bp+si+var_92], 5
jnz     short loc_137AC
inc     [bp+var_FA]
inc     [bp+var_FE]
mov     ax, 5
mov     [bp+var_F6], ax
mov     [bp+var_F8], ax
push    ax
push    ax
call    sub_1AE6E
add     sp, 4
mov     [bp+var_94], 8Bh
sub     al, al
push    ax
lea     ax, [bp+var_94]
push    ss
push    ax
push    cs
call    near ptr sub_16082
add     sp, 6
mov     es, seg_27886
assume es:seg008
cmp     es:word_2232E, 28h ; '('
jz      short loc_13846
jmp     loc_13E05

loc_13846:
mov     es, seg_27888
cmp     es:word_22292, 5
jz      short loc_13855
jmp     loc_13E05

loc_13855:
mov     es, seg_27894
cmp     es:word_22294, 6
jnz     short loc_13864
jmp     loc_136F3

loc_13864:
pop     si
mov     sp, bp
pop     bp
retf
align 2

loc_1386A:
mov     si, [bp+var_FE]
shl     si, 1
shl     si, 1
mov     ax, [bp+si+var_36]
mov     [bp+var_F8], ax
mov     cx, ax
shl     ax, 1
shl     ax, 1
add     ax, cx
shl     ax, 1
add     ax, cx
mov     bx, [bp+si+var_38]
mov     [bp+var_F6], bx
add     bx, ax
mov     ax, offset byte_2230C
mov     es, seg_27886
mul     es:word_2232E
add     bx, ax
shl     bx, 1
mov     es, seg_27892
assume es:dseg
mov     word ptr es:[bx+1AEEh], 6
jmp     short loc_138F9
align 2

loc_138AC:
push    [bp+var_F8]
push    [bp+var_F6]
mov     al, [bp+si+var_92]
push    ax
mov     [bp+var_102], ax
call    sub_1A276
add     sp, 6
cmp     byte ptr [bp+var_102], 1
jnz     short loc_138D0
inc     [bp+var_F6]

loc_138D0:
mov     si, [bp+var_FA]
cmp     [bp+si+var_92], 2
jnz     short loc_138DF
dec     [bp+var_F6]

loc_138DF:
cmp     [bp+si+var_92], 3
jnz     short loc_138EA
inc     [bp+var_F8]

loc_138EA:
cmp     [bp+si+var_92], 4
jnz     short loc_138F5
dec     [bp+var_F8]

loc_138F5:
inc     [bp+var_FA]

loc_138F9:
mov     si, [bp+var_FA]
cmp     [bp+si+var_92], 5
jnz     short loc_138AC
inc     [bp+var_FA]
inc     [bp+var_FE]
mov     ax, 5
mov     [bp+var_F6], ax
mov     [bp+var_F8], ax
push    ax
push    ax
call    sub_1AE6E
add     sp, 4
mov     [bp+var_94], 89h
sub     al, al
push    ax
lea     ax, [bp+var_94]
push    ss
push    ax
push    cs
call    near ptr sub_16082
add     sp, 6
mov     es, seg_27886
assume es:seg008
cmp     es:word_2232E, 28h ; '('
jz      short loc_13946
jmp     loc_13E05

loc_13946:
mov     es, seg_27888
cmp     es:word_22292, 5
jz      short loc_13955
jmp     loc_13E05

loc_13955:
mov     es, seg_27894
cmp     es:word_22294, 6
jz      short loc_13964
jmp     loc_13E05

loc_13964:
cmp     [bp+var_FE], 9
jnb     short loc_1396E
jmp     loc_1386A

loc_1396E:
mov     ax, 792h
push    ax
mov     cx, 160h
push    cx
mov     dx, 16h
push    dx
sub     bx, bx
push    bx
call    sub_2016C
add     sp, 8
mov     ax, 8Ah
push    ax
mov     es, seg_2788C
push    es:word_22298
push    es:word_22296
mov     ax, 78h ; 'x'
push    ax
mov     ax, 2
push    ax
call    sub_194BA
add     sp, 0Ah
call    sub_20CDA
sub     ax, ax
push    ax
mov     ax, 160h
push    ax
mov     ax, 16h
push    ax
mov     ax, 792h
push    ax
call    sub_200C6
add     sp, 8
mov     al, 88h
push    ax
mov     ax, 0D521h
push    ax
mov     ax, 0D397h
push    ax
call    sub_1A986
add     sp, 6
call    sub_1ABE6

loc_139DB:
cmp     [bp+var_FE], 0Ch
jnb     short loc_139E5
jmp     loc_13A94

loc_139E5:
mov     ax, 792h
push    ax
mov     cx, 160h
push    cx
mov     dx, 16h
push    dx
sub     bx, bx
push    bx
call    sub_2016C
add     sp, 8
mov     ax, 8Bh
push    ax
mov     es, seg_2788C
push    es:word_22298
push    es:word_22296
mov     ax, 78h ; 'x'
push    ax
mov     ax, 3
push    ax
call    sub_194BA
add     sp, 0Ah
call    sub_20CDA
sub     ax, ax
push    ax
mov     ax, 160h
push    ax
mov     ax, 16h
push    ax
mov     ax, 792h
push    ax
call    sub_200C6
add     sp, 8
mov     al, 88h
push    ax
mov     ax, 0D1FCh
push    ax
mov     ax, 0D05Ch
push    ax
call    sub_1A986
add     sp, 6
call    sub_1ABE6
mov     si, [bp+var_FE]
shl     si, 1
shl     si, 1
mov     ax, [bp+si+var_36]
mov     [bp+var_F8], ax
mov     cx, ax
shl     ax, 1
shl     ax, 1
add     ax, cx
shl     ax, 1
add     ax, cx
mov     bx, [bp+si+var_38]
mov     [bp+var_F6], bx
add     bx, ax
mov     ax, offset byte_2230C
mov     es, seg_27886
mul     es:word_2232E
add     bx, ax
shl     bx, 1
mov     es, seg_27892
assume es:dseg
mov     word ptr es:[bx+1AEEh], 6
jmp     loc_13BE1

loc_13A94:
mov     si, [bp+var_FE]
shl     si, 1
shl     si, 1
mov     ax, [bp+si+var_36]
mov     [bp+var_F8], ax
mov     cx, ax
shl     ax, 1
shl     ax, 1
add     ax, cx
shl     ax, 1
add     ax, cx
mov     bx, [bp+si+var_38]
mov     [bp+var_F6], bx
add     bx, ax
mov     ax, offset byte_2230C
mov     es, seg_27886
assume es:seg008
mul     es:word_2232E
add     bx, ax
shl     bx, 1
mov     es, seg_27892
assume es:dseg
mov     word ptr es:[bx+1AEEh], 6
jmp     short loc_13B23
align 2

loc_13AD6:
push    [bp+var_F8]
push    [bp+var_F6]
mov     al, [bp+si+var_92]
push    ax
mov     [bp+var_102], ax
call    sub_1A276
add     sp, 6
cmp     byte ptr [bp+var_102], 1
jnz     short loc_13AFA
inc     [bp+var_F6]

loc_13AFA:
mov     si, [bp+var_FA]
cmp     [bp+si+var_92], 2
jnz     short loc_13B09
dec     [bp+var_F6]

loc_13B09:
cmp     [bp+si+var_92], 3
jnz     short loc_13B14
inc     [bp+var_F8]

loc_13B14:
cmp     [bp+si+var_92], 4
jnz     short loc_13B1F
dec     [bp+var_F8]

loc_13B1F:
inc     [bp+var_FA]

loc_13B23:
mov     si, [bp+var_FA]
cmp     [bp+si+var_92], 5
jnz     short loc_13AD6
inc     [bp+var_FA]
inc     [bp+var_FE]
mov     ax, 5
mov     [bp+var_F6], ax
mov     [bp+var_F8], ax
push    ax
push    ax
call    sub_1AE6E
add     sp, 4
mov     [bp+var_94], 87h
sub     al, al
push    ax
lea     ax, [bp+var_94]
push    ss
push    ax
push    cs
call    near ptr sub_16082
add     sp, 6
mov     es, seg_27886
assume es:seg008
cmp     es:word_2232E, 28h ; '('
jz      short loc_13B70
jmp     loc_13E05

loc_13B70:
mov     es, seg_27888
cmp     es:word_22292, 5
jz      short loc_13B7F
jmp     loc_13E05

loc_13B7F:
mov     es, seg_27894
cmp     es:word_22294, 6
jnz     short loc_13B8E
jmp     loc_139DB

loc_13B8E:
pop     si
mov     sp, bp
pop     bp
retf
align 2

loc_13B94:
push    [bp+var_F8]
push    [bp+var_F6]
mov     al, [bp+si+var_92]
push    ax
mov     [bp+var_102], ax
call    sub_1A276
add     sp, 6
cmp     byte ptr [bp+var_102], 1
jnz     short loc_13BB8
inc     [bp+var_F6]

loc_13BB8:
mov     si, [bp+var_FA]
cmp     [bp+si+var_92], 2
jnz     short loc_13BC7
dec     [bp+var_F6]

loc_13BC7:
cmp     [bp+si+var_92], 3
jnz     short loc_13BD2
inc     [bp+var_F8]

loc_13BD2:
cmp     [bp+si+var_92], 4
jnz     short loc_13BDD
dec     [bp+var_F8]

loc_13BDD:
inc     [bp+var_FA]

loc_13BE1:
mov     si, [bp+var_FA]
cmp     [bp+si+var_92], 5
jnz     short loc_13B94
inc     [bp+var_FA]
mov     ax, 5
mov     [bp+var_F6], ax
mov     [bp+var_F8], ax
push    ax
push    ax
call    sub_1AE6E
add     sp, 4
mov     [bp+var_94], 85h
sub     al, al
push    ax
lea     ax, [bp+var_94]
push    ss
push    ax
push    cs
call    near ptr sub_16082
add     sp, 6
mov     es, seg_27886
cmp     es:word_2232E, 28h ; '('
jz      short loc_13C2A
jmp     loc_13E05

loc_13C2A:
mov     es, seg_27888
cmp     es:word_22292, 5
jz      short loc_13C39
jmp     loc_13E05

loc_13C39:
mov     es, seg_27894
cmp     es:word_22294, 6
jz      short loc_13C48
jmp     loc_13E05

loc_13C48:
mov     ax, 792h
push    ax
mov     cx, 160h
push    cx
mov     dx, 16h
push    dx
sub     bx, bx
push    bx
call    sub_2016C
add     sp, 8
mov     ax, 8Ch
push    ax
mov     es, seg_2788C
push    es:word_22298
push    es:word_22296
mov     ax, 78h ; 'x'
push    ax
mov     ax, 5
push    ax
call    sub_194BA
add     sp, 0Ah
call    sub_20CDA
sub     ax, ax
push    ax
mov     ax, 160h
push    ax
mov     ax, 16h
push    ax
mov     ax, 792h
push    ax
call    sub_200C6
add     sp, 8
jmp     short loc_13CED
align 2

loc_13CA0:
push    [bp+var_F8]
push    [bp+var_F6]
mov     al, [bp+si+var_92]
push    ax
mov     [bp+var_102], ax
call    sub_1A276
add     sp, 6
cmp     byte ptr [bp+var_102], 1
jnz     short loc_13CC4
inc     [bp+var_F6]

loc_13CC4:
mov     si, [bp+var_FA]
cmp     [bp+si+var_92], 2
jnz     short loc_13CD3
dec     [bp+var_F6]

loc_13CD3:
cmp     [bp+si+var_92], 3
jnz     short loc_13CDE
inc     [bp+var_F8]

loc_13CDE:
cmp     [bp+si+var_92], 4
jnz     short loc_13CE9
dec     [bp+var_F8]

loc_13CE9:
inc     [bp+var_FA]

loc_13CED:
mov     si, [bp+var_FA]
cmp     [bp+si+var_92], 5
jnz     short loc_13CA0
sub     ax, ax
mov     [bp+var_F8], ax
push    ax
mov     ax, 5
mov     [bp+var_F6], ax
push    ax
call    sub_1AE6E
add     sp, 4
mov     [bp+var_FA], 0
jmp     short loc_13D50
align 2

loc_13D18:
mov     ax, 6
push    ax
call    sub_20FAB
add     sp, 2
mov     si, [bp+var_FA]
mov     ax, si
shl     si, 1
add     si, ax
shl     si, 1
push    [bp+si+var_F2]
push    [bp+si+var_F4]
call    sub_1AE6E
add     sp, 4
mov     ax, 19h
push    ax
call    sub_19288
add     sp, 2

loc_13D4C:
inc     [bp+var_FA]

loc_13D50:
mov     si, [bp+var_FA]
mov     ax, si
shl     si, 1
add     si, ax
shl     si, 1
cmp     [bp+si+var_F0], 0FFFFh
jz      short loc_13DAE
mov     ax, offset byte_2230C
mov     es, seg_27886
mul     es:word_2232E
mov     bx, [bp+si+var_F2]
mov     dx, bx
mov     cx, bx
shl     bx, 1
shl     bx, 1
add     bx, cx
shl     bx, 1
add     bx, cx
add     bx, [bp+si+var_F4]
add     bx, ax
shl     bx, 1
mov     es, seg_27892
assume es:dseg
mov     ax, [bp+si+var_F0]
mov     es:[bx+1AEEh], ax
cmp     ax, 6
jz      short loc_13D9E
jmp     loc_13D18

loc_13D9E:
push    dx
push    [bp+si+var_F4]
call    sub_17A68
add     sp, 4
jmp     short loc_13D4C
align 2

loc_13DAE:
mov     ax, 32h ; '2'
push    ax
call    sub_19288
add     sp, 2
call    sub_174F6
mov     ax, 0F8h        ; "8"
mov     es, seg_27886
assume es:seg008
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
mov     word ptr es:[bx+1B66h], 6
mov     ax, 5
mov     [bp+var_F6], ax
mov     [bp+var_F8], ax
push    ax
push    ax
call    sub_1AE6E
add     sp, 4
sub     al, al
push    ax
mov     ax, 7E90h
push    ax
mov     ax, 7D00h
push    ax
call    sub_1A986
add     sp, 6
call    sub_1ABE6

loc_13E05:
pop     si
mov     sp, bp
pop     bp
retf
sub_1325E endp



; Attributes: bp-based frame

sub_13E0A proc far

var_5E= word ptr -5Eh
var_5C= word ptr -5Ch
var_5A= word ptr -5Ah
var_58= word ptr -58h
var_56= word ptr -56h
var_54= word ptr -54h
var_52= word ptr -52h
var_50= word ptr -50h
var_4E= word ptr -4Eh
var_4C= word ptr -4Ch
var_4A= word ptr -4Ah
var_48= word ptr -48h
var_46= word ptr -46h
var_44= word ptr -44h
var_42= word ptr -42h
var_40= word ptr -40h
var_3E= word ptr -3Eh
var_3A= word ptr -3Ah
var_36= word ptr -36h
var_34= word ptr -34h
var_32= word ptr -32h
var_30= byte ptr -30h
var_2F= byte ptr -2Fh
var_2E= byte ptr -2Eh
var_2D= byte ptr -2Dh
var_2C= byte ptr -2Ch
var_2B= byte ptr -2Bh
var_2A= byte ptr -2Ah
var_29= byte ptr -29h
var_28= byte ptr -28h
var_27= byte ptr -27h
var_26= byte ptr -26h
var_25= byte ptr -25h
var_24= byte ptr -24h
var_23= byte ptr -23h
var_22= byte ptr -22h
var_21= byte ptr -21h
var_20= byte ptr -20h
var_1F= byte ptr -1Fh
var_1E= byte ptr -1Eh
var_1D= byte ptr -1Dh
var_1C= byte ptr -1Ch
var_1B= byte ptr -1Bh
var_1A= byte ptr -1Ah
var_19= byte ptr -19h
var_18= byte ptr -18h
var_17= byte ptr -17h
var_16= byte ptr -16h
var_15= byte ptr -15h
var_14= byte ptr -14h
var_13= byte ptr -13h
var_12= byte ptr -12h
var_11= byte ptr -11h
var_10= byte ptr -10h
var_F= byte ptr -0Fh
var_E= byte ptr -0Eh
var_D= byte ptr -0Dh
var_C= byte ptr -0Ch
var_B= byte ptr -0Bh
var_A= byte ptr -0Ah
var_9= byte ptr -9
var_8= byte ptr -8
var_7= byte ptr -7
var_6= byte ptr -6
var_5= byte ptr -5
var_4= byte ptr -4
var_3= byte ptr -3
var_2= byte ptr -2
var_1= byte ptr -1

push    bp
mov     bp, sp
sub     sp, 5Eh
push    si
mov     [bp+var_50], 8
mov     ax, 9
mov     [bp+var_58], ax
mov     [bp+var_48], ax
mov     [bp+var_40], 0Ah
mov     al, 1
mov     [bp+var_30], al
mov     [bp+var_2F], al
mov     [bp+var_2E], al
mov     [bp+var_2B], al
mov     [bp+var_23], al
mov     [bp+var_22], al
mov     [bp+var_17], al
mov     [bp+var_16], al
mov     [bp+var_15], al
mov     [bp+var_B], al
mov     [bp+var_A], al
mov     [bp+var_9], al
mov     [bp+var_8], al
mov     al, 3
mov     [bp+var_2D], al
mov     [bp+var_2C], al
mov     [bp+var_24], al
mov     [bp+var_21], al
mov     [bp+var_20], al
mov     [bp+var_1E], al
mov     [bp+var_1B], al
mov     [bp+var_1A], al
mov     [bp+var_18], al
mov     [bp+var_14], al
mov     [bp+var_12], al
mov     [bp+var_E], al
mov     [bp+var_C], al
mov     [bp+var_6], al
mov     al, 2
mov     [bp+var_29], al
mov     [bp+var_28], al
mov     [bp+var_27], al
mov     [bp+var_26], al
mov     [bp+var_1D], al
mov     [bp+var_1C], al
mov     [bp+var_11], al
mov     [bp+var_10], al
mov     [bp+var_F], al
mov     [bp+var_5], al
mov     [bp+var_4], al
mov     [bp+var_3], al
mov     [bp+var_2], al
mov     al, 5
mov     [bp+var_2A], al
mov     [bp+var_25], al
mov     [bp+var_1F], al
mov     [bp+var_19], al
mov     [bp+var_13], al
mov     [bp+var_D], al
mov     [bp+var_7], al
mov     [bp+var_1], al
mov     es, seg_27894
assume es:seg008
push    es:word_22294
mov     es, seg_27888
push    es:word_22292
mov     al, 4
push    ax
call    sub_1A276
add     sp, 6
mov     es, seg_27894
dec     es:word_22294
mov     ax, 792h
push    ax
mov     cx, 160h
push    cx
mov     dx, 16h
push    dx
sub     bx, bx
mov     [bp+var_44], bx
push    bx
call    sub_2016C
add     sp, 8
mov     ax, 64h ; 'd'
push    ax
mov     es, seg_2788C
push    es:word_22298
push    es:word_22296
mov     ax, 78h ; 'x'
push    ax
mov     ax, 5
push    ax
call    sub_194BA
add     sp, 0Ah
call    sub_20CDA
sub     ax, ax
push    ax
mov     ax, 160h
push    ax
mov     ax, 16h
push    ax
mov     ax, 792h
push    ax
call    sub_200C6
add     sp, 8
mov     al, 11h
push    ax
mov     cx, 9BF3h
push    cx
mov     cx, 9A93h
push    cx
call    sub_1A986
add     sp, 6
call    sub_1ABE6
mov     ax, 0F8h        ; "8"
mov     es, seg_27886
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
mov     word ptr es:[bx+1B3Ah], 6
mov     ax, 3
mov     [bp+var_5A], ax
mov     [bp+var_56], ax
push    ax
mov     ax, 5
push    ax
mov     cl, 4
push    cx
call    sub_1A276
add     sp, 6
mov     ax, 2
mov     [bp+var_54], ax
mov     [bp+var_52], ax
mov     [bp+var_4E], ax
mov     [bp+var_4A], ax
mov     [bp+var_46], ax
mov     [bp+var_42], ax
mov     [bp+var_3E], ax
push    ax
mov     ax, 5
push    ax
mov     cl, 4
push    cx
call    sub_1A276
add     sp, 6
mov     ax, 1
mov     [bp+var_5C], ax
mov     [bp+var_4C], ax
push    ax
mov     ax, 5
push    ax
mov     cl, 4
push    cx
call    sub_1A276
add     sp, 6
mov     ax, 0F8h        ; "8"
mov     es, seg_27886
assume es:seg008
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
mov     word ptr es:[bx+1AF8h], 51h ; 'Q'
mov     word ptr es:[bx+1B24h], 4
mov     ax, 2
push    ax
mov     ax, 5
push    ax
call    sub_17B26
add     sp, 4
mov     ax, 0F8h        ; "8"
mov     es, seg_27886
assume es:seg008
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
mov     word ptr es:[bx+1B7Ch], 4
mov     ax, 6
push    ax
mov     cx, 5
push    cx
call    sub_17B26
add     sp, 4
mov     ax, 0F8h        ; "8"
mov     es, seg_27886
assume es:seg008
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
mov     word ptr es:[bx+1B36h], 6
mov     ax, 3
push    ax
push    ax
call    sub_17A68
add     sp, 4
mov     ax, 0F8h        ; "8"
mov     es, seg_27886
assume es:seg008
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
mov     word ptr es:[bx+1B3Eh], 6
mov     ax, 3
mov     [bp+var_34], ax
push    ax
mov     ax, 7
mov     [bp+var_32], ax
push    ax
call    sub_17A68
add     sp, 4
mov     al, 11h
push    ax
mov     ax, 9938h
push    ax
mov     ax, 97E1h
push    ax
call    sub_1A986
add     sp, 6
call    sub_1ABE6
sub     ax, ax
mov     [bp+var_36], ax
mov     [bp+var_3A], ax
jmp     short loc_14113
align 2

loc_14096:
push    [bp+var_34]
push    [bp+var_32]
mov     al, [bp+si+var_30]
push    ax
mov     [bp+var_5E], ax
call    sub_1A276
add     sp, 6
cmp     byte ptr [bp+var_5E], 1
jnz     short loc_140B4
inc     [bp+var_32]

loc_140B4:
mov     si, [bp+var_36]
cmp     [bp+si+var_30], 2
jnz     short loc_140C0
dec     [bp+var_32]

loc_140C0:
cmp     [bp+si+var_30], 3
jnz     short loc_140C9
inc     [bp+var_34]

loc_140C9:
cmp     [bp+si+var_30], 4
jnz     short loc_140D2
dec     [bp+var_34]

loc_140D2:
inc     [bp+var_36]

loc_140D5:
mov     si, [bp+var_36]
cmp     [bp+si+var_30], 5
jnz     short loc_14096
inc     [bp+var_36]
mov     ax, offset byte_2230C
mov     es, seg_27886
assume es:seg008
mul     es:word_2232E
mov     bx, ax
mov     ax, [bp+var_34]
mov     cx, ax
shl     ax, 1
shl     ax, 1
add     ax, cx
shl     ax, 1
add     ax, cx
add     bx, ax
add     bx, [bp+var_32]
shl     bx, 1
mov     es, seg_27892
assume es:dseg
mov     word ptr es:[bx+1AEEh], 4Fh ; 'O'
inc     [bp+var_3A]

loc_14113:
cmp     [bp+var_3A], 2
jnb     short loc_14158
mov     si, [bp+var_3A]
shl     si, 1
shl     si, 1
mov     ax, [bp+si+var_5A]
mov     [bp+var_34], ax
mov     cx, ax
shl     ax, 1
shl     ax, 1
add     ax, cx
shl     ax, 1
add     ax, cx
mov     bx, [bp+si+var_5C]
mov     [bp+var_32], bx
add     bx, ax
mov     ax, offset byte_2230C
mov     es, seg_27886
assume es:seg008
mul     es:word_2232E
add     bx, ax
shl     bx, 1
mov     es, seg_27892
assume es:dseg
mov     word ptr es:[bx+1AEEh], 6
jmp     loc_140D5

loc_14158:
mov     al, 11h
push    ax
mov     ax, 96C1h
push    ax
mov     ax, 959Ah
push    ax
call    sub_1A986
add     sp, 6
call    sub_1ABE6
jmp     loc_1422F
align 2

loc_14174:
mov     si, [bp+var_3A]
shl     si, 1
shl     si, 1
mov     ax, [bp+si+var_5A]
mov     [bp+var_34], ax
mov     cx, ax
shl     ax, 1
shl     ax, 1
add     ax, cx
shl     ax, 1
add     ax, cx
mov     bx, [bp+si+var_5C]
mov     [bp+var_32], bx
add     bx, ax
mov     ax, offset byte_2230C
mov     es, seg_27886
assume es:seg008
mul     es:word_2232E
add     bx, ax
shl     bx, 1
mov     es, seg_27892
assume es:dseg
mov     word ptr es:[bx+1AEEh], 6
jmp     short loc_141F1

loc_141B2:
push    [bp+var_34]
push    [bp+var_32]
mov     al, [bp+si+var_30]
push    ax
mov     [bp+var_5E], ax
call    sub_1A276
add     sp, 6
cmp     byte ptr [bp+var_5E], 1
jnz     short loc_141D0
inc     [bp+var_32]

loc_141D0:
mov     si, [bp+var_36]
cmp     [bp+si+var_30], 2
jnz     short loc_141DC
dec     [bp+var_32]

loc_141DC:
cmp     [bp+si+var_30], 3
jnz     short loc_141E5
inc     [bp+var_34]

loc_141E5:
cmp     [bp+si+var_30], 4
jnz     short loc_141EE
dec     [bp+var_34]

loc_141EE:
inc     [bp+var_36]

loc_141F1:
mov     si, [bp+var_36]
cmp     [bp+si+var_30], 5
jnz     short loc_141B2
inc     [bp+var_36]
mov     ax, offset byte_2230C
mov     es, seg_27886
assume es:seg008
mul     es:word_2232E
mov     bx, ax
mov     ax, [bp+var_34]
mov     cx, ax
shl     ax, 1
shl     ax, 1
add     ax, cx
shl     ax, 1
add     ax, cx
add     bx, ax
add     bx, [bp+var_32]
shl     bx, 1
mov     es, seg_27892
assume es:dseg
mov     word ptr es:[bx+1AEEh], 4Dh ; 'M'
inc     [bp+var_3A]

loc_1422F:
cmp     [bp+var_3A], 8
jnb     short loc_14238
jmp     loc_14174

loc_14238:
mov     ax, 0F8h        ; "8"
mov     es, seg_27886
assume es:seg008
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
mov     word ptr es:[bx+1B36h], 4
mov     ax, 3
push    ax
push    ax
call    sub_17B26
add     sp, 4
mov     ax, 0F8h        ; "8"
mov     es, seg_27886
assume es:seg008
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
mov     word ptr es:[bx+1B3Eh], 4
mov     ax, 3
mov     [bp+var_34], ax
push    ax
mov     ax, 7
mov     [bp+var_32], ax
push    ax
call    sub_17B26
add     sp, 4
sub     al, al
push    ax
mov     ax, 7E90h
push    ax
mov     ax, 7D00h
push    ax
call    sub_1A986
add     sp, 6
call    sub_1ABE6
pop     si
mov     sp, bp
pop     bp
retf
sub_13E0A endp



; Attributes: bp-based frame

sub_142AA proc far

var_14A= byte ptr -14Ah
var_1E= byte ptr -1Eh
var_A= word ptr -0Ah
var_8= word ptr -8
var_6= word ptr -6
var_4= word ptr -4
var_2= word ptr -2

push    bp
mov     bp, sp
sub     sp, 14Ah
push    di
push    si
mov     ax, 792h
push    ax
mov     ax, 160h
push    ax
mov     ax, 16h
push    ax
sub     ax, ax
push    ax
call    sub_2016C
add     sp, 8
mov     es, seg_278A6
assume es:seg008
mov     ax, es:word_22290
mov     cx, ax
inc     cx
mul     cx
inc     ax
inc     ax
mov     cx, ax
shl     ax, 1
shl     ax, 1
add     ax, cx
shl     ax, 1
mov     [bp+var_4], ax
cmp     ax, 2706h
jbe     short loc_142F0
mov     [bp+var_4], 2706h

loc_142F0:
mov     ax, es:word_22290
inc     ax
mov     cx, 64h ; 'd'
mul     cx
mov     [bp+var_8], ax
mov     es, seg_27886
mov     ax, es:word_2232E
dec     ax
mov     cx, 0Ah
sub     dx, dx
div     cx
inc     ax
mov     cx, ax
shl     ax, 1
mov     [bp+var_6], ax
shl     cx, 1
shl     cx, 1
mov     [bp+var_A], cx
mov     ax, 0F61h
push    ds
push    ax
mov     ax, 78h ; 'x'
push    ax
mov     ax, 5
push    ax
call    sub_193EC
add     sp, 8
call    sub_20CDA
lea     ax, [bp+var_14A]
mov     di, ax
mov     si, 0F6Eh
push    ss
pop     es
assume es:nothing
mov     cx, 6
rep movsw
movsb
push    [bp+var_4]
lea     ax, [bp+var_1E]
push    ss
push    ax
call    sub_1B7D4
add     sp, 6
mov     [bp+var_2], 0
lea     ax, [bp+var_1E]
push    ss
push    ax
call    sub_1F4B2
add     sp, 4
cmp     ax, 4
jnb     short loc_143B4

loc_1436E:
mov     di, 0F7Bh
lea     si, [bp+var_14A]
push    ds
pop     es
assume es:dseg
push    ds
mov     cx, 0FFFFh
xor     ax, ax
repne scasb
not     cx
sub     di, cx
mov     bx, cx
xchg    di, si
push    ds
push    es
pop     ds
pop     es
assume es:nothing
mov     cx, 0FFFFh
repne scasb
dec     di
mov     cx, bx
shr     cx, 1
rep movsw
adc     cx, cx
rep movsb
pop     ds
lea     ax, [bp+var_1E]
push    ss
push    ax
call    sub_1F4B2
add     sp, 4
inc     [bp+var_2]
add     ax, [bp+var_2]
cmp     ax, 4
jb      short loc_1436E

loc_143B4:
lea     di, [bp+var_1E]
lea     si, [bp+var_14A]
push    ss
pop     es
push    ds
mov     cx, 0FFFFh
xor     ax, ax
repne scasb
not     cx
sub     di, cx
mov     bx, cx
xchg    di, si
push    ds
push    es
pop     ds
pop     es
mov     cx, 0FFFFh
repne scasb
dec     di
mov     cx, bx
shr     cx, 1
rep movsw
adc     cx, cx
rep movsb
pop     ds
mov     di, 0F7Eh
lea     si, [bp+var_14A]
push    ds
pop     es
assume es:dseg
push    ds
mov     cx, 0FFFFh
xor     ax, ax
repne scasb
not     cx
sub     di, cx
mov     bx, cx
xchg    di, si
push    ds
push    es
pop     ds
pop     es
assume es:nothing
mov     cx, 0FFFFh
repne scasb
dec     di
mov     cx, bx
shr     cx, 1
rep movsw
adc     cx, cx
rep movsb
pop     ds
lea     ax, [bp+var_14A]
push    ss
push    ax
mov     ax, 78h ; 'x'
push    ax
mov     ax, 5
push    ax
call    sub_1958C
add     sp, 8
mov     ax, 0C0h
push    ax
mov     ax, 17h
push    ax
mov     al, 1
push    ax
call    sub_19E78
add     sp, 6
mov     byte ptr [bp+var_2+1], al
lea     ax, [bp+var_14A]
mov     di, ax
mov     si, 0FD7h
push    ss
pop     es
mov     cx, 12h
rep movsw
mov     si, ss
push    si
push    ds
push    si
mov     di, 0FFBh
mov     si, ax
push    ds
pop     es
assume es:dseg
pop     ds
mov     cx, 0FFFFh
xor     ax, ax
repne scasb
not     cx
sub     di, cx
push    cx
xchg    di, si
push    ds
push    es
pop     ds
pop     es
assume es:nothing
mov     cx, 0FFFFh
repne scasb
dec     di
pop     cx
shr     cx, 1
rep movsw
adc     cx, cx
rep movsb
pop     ds
pop     si
push    [bp+var_8]
lea     ax, [bp+var_1E]
push    ss
push    ax
call    sub_1B7D4
add     sp, 6
lea     di, [bp+var_1E]
lea     si, [bp+var_14A]
push    ss
pop     es
push    ds
mov     cx, 0FFFFh
xor     ax, ax
repne scasb
not     cx
sub     di, cx
mov     bx, cx
xchg    di, si
push    ds
push    es
pop     ds
pop     es
mov     cx, 0FFFFh
repne scasb
dec     di
mov     cx, bx
shr     cx, 1
rep movsw
adc     cx, cx
rep movsb
pop     ds
mov     di, 1008h
lea     si, [bp+var_14A]
push    ds
pop     es
assume es:dseg
push    ds
mov     cx, 0FFFFh
xor     ax, ax
repne scasb
not     cx
sub     di, cx
mov     bx, cx
xchg    di, si
push    ds
push    es
pop     ds
pop     es
assume es:nothing
mov     cx, 0FFFFh
repne scasb
dec     di
mov     cx, bx
shr     cx, 1
rep movsw
adc     cx, cx
rep movsb
pop     ds
mov     di, 1016h
lea     si, [bp+var_14A]
push    ds
pop     es
assume es:dseg
push    ds
mov     cx, 0FFFFh
xor     ax, ax
repne scasb
not     cx
sub     di, cx
mov     bx, cx
xchg    di, si
push    ds
push    es
pop     ds
pop     es
assume es:nothing
mov     cx, 0FFFFh
repne scasb
dec     di
mov     cx, bx
shr     cx, 1
rep movsw
adc     cx, cx
rep movsb
pop     ds
push    [bp+var_6]
lea     ax, [bp+var_1E]
push    ss
push    ax
call    sub_1B7D4
add     sp, 6
lea     di, [bp+var_1E]
lea     si, [bp+var_14A]
push    ss
pop     es
push    ds
mov     cx, 0FFFFh
xor     ax, ax
repne scasb
not     cx
sub     di, cx
mov     bx, cx
xchg    di, si
push    ds
push    es
pop     ds
pop     es
mov     cx, 0FFFFh
repne scasb
dec     di
mov     cx, bx
shr     cx, 1
rep movsw
adc     cx, cx
rep movsb
pop     ds
mov     di, 1023h
lea     si, [bp+var_14A]
push    ds
pop     es
assume es:dseg
push    ds
mov     cx, 0FFFFh
xor     ax, ax
repne scasb
not     cx
sub     di, cx
mov     bx, cx
xchg    di, si
push    ds
push    es
pop     ds
pop     es
assume es:nothing
mov     cx, 0FFFFh
repne scasb
dec     di
mov     cx, bx
shr     cx, 1
rep movsw
adc     cx, cx
rep movsb
pop     ds
mov     di, 1033h
lea     si, [bp+var_14A]
push    ds
pop     es
assume es:dseg
push    ds
mov     cx, 0FFFFh
xor     ax, ax
repne scasb
not     cx
sub     di, cx
mov     bx, cx
xchg    di, si
push    ds
push    es
pop     ds
pop     es
assume es:nothing
mov     cx, 0FFFFh
repne scasb
dec     di
mov     cx, bx
shr     cx, 1
rep movsw
adc     cx, cx
rep movsb
pop     ds
push    [bp+var_A]
lea     ax, [bp+var_1E]
push    ss
push    ax
call    sub_1B7D4
add     sp, 6
lea     di, [bp+var_1E]
lea     si, [bp+var_14A]
push    ss
pop     es
push    ds
mov     cx, 0FFFFh
xor     ax, ax
repne scasb
not     cx
sub     di, cx
mov     bx, cx
xchg    di, si
push    ds
push    es
pop     ds
pop     es
mov     cx, 0FFFFh
repne scasb
dec     di
mov     cx, bx
shr     cx, 1
rep movsw
adc     cx, cx
rep movsb
pop     ds
mov     di, 1040h
lea     si, [bp+var_14A]
push    ds
pop     es
assume es:dseg
push    ds
mov     cx, 0FFFFh
xor     ax, ax
repne scasb
not     cx
sub     di, cx
mov     bx, cx
xchg    di, si
push    ds
push    es
pop     ds
pop     es
assume es:nothing
mov     cx, 0FFFFh
repne scasb
dec     di
mov     cx, bx
shr     cx, 1
rep movsw
adc     cx, cx
rep movsb
pop     ds
mov     di, 1050h
lea     si, [bp+var_14A]
push    ds
pop     es
assume es:dseg
push    ds
mov     cx, 0FFFFh
xor     ax, ax
repne scasb
not     cx
sub     di, cx
mov     bx, cx
xchg    di, si
push    ds
push    es
pop     ds
pop     es
assume es:nothing
mov     cx, 0FFFFh
repne scasb
dec     di
mov     cx, bx
shr     cx, 1
rep movsw
adc     cx, cx
rep movsb
pop     ds
cmp     byte ptr [bp+var_2+1], 0
jz      short loc_14653
jmp     loc_1470A

loc_14653:
mov     ax, [bp+var_4]
mov     es, seg_27896
assume es:seg008
cmp     es:word_22332, ax
jnb     short loc_14664
jmp     loc_1470A

loc_14664:
lea     ax, [bp+var_14A]
push    ss
push    ax
mov     ax, 78h ; 'x'
push    ax
mov     ax, 5
push    ax
call    sub_1958C
add     sp, 8
mov     ax, 98h
push    ax
mov     ax, 17h
push    ax
mov     al, 3
push    ax
call    sub_19E78
add     sp, 6
mov     byte ptr [bp+var_2+1], al
cmp     al, 3
jnz     short loc_14697
jmp     loc_14738

loc_14697:
cmp     al, 0FFh
jnz     short loc_1469E
jmp     loc_14738

loc_1469E:
mov     es, seg_278A6
inc     es:word_22290
mov     ax, [bp+var_4]
mov     es, seg_27896
sub     es:word_22332, ax
mov     al, 4
push    ax
call    sub_1B96C
add     sp, 2
cmp     byte ptr [bp+var_2+1], 0
jnz     short loc_146DE
mov     ax, [bp+var_8]
mov     es, seg_2789E
add     es:word_22328, ax
mov     al, 1

loc_146D2:
push    ax
call    sub_1B96C
add     sp, 2
jmp     short loc_14738
align 2

loc_146DE:
cmp     byte ptr [bp+var_2+1], 1
jnz     short loc_146F4
mov     ax, [bp+var_6]
mov     es, seg_2788E
add     es:word_2232C, ax
mov     al, 2
jmp     short loc_146D2

loc_146F4:
cmp     byte ptr [bp+var_2+1], 2
jnz     short loc_14738
mov     ax, [bp+var_A]
mov     es, seg_27890
add     es:word_222A6, ax
mov     al, 3
jmp     short loc_146D2

loc_1470A:
cmp     byte ptr [bp+var_2+1], 0
jnz     short loc_14738
mov     ax, [bp+var_4]
mov     es, seg_27896
cmp     es:word_22332, ax
jnb     short loc_14738
mov     ax, 1064h
push    ds
push    ax
mov     ax, 78h ; 'x'
push    ax
mov     ax, 5
push    ax
call    sub_1958C
add     sp, 8
call    sub_20CDA

loc_14738:
sub     ax, ax
push    ax
mov     ax, 160h
push    ax
mov     ax, 16h
push    ax
mov     ax, 792h
push    ax
call    sub_200C6
add     sp, 8
mov     ax, 0Ah
push    ax
call    sub_1F9E2
add     sp, 2
pop     si
pop     di
mov     sp, bp
pop     bp
retf
sub_142AA endp

align 2


; Attributes: bp-based frame

sub_14762 proc far

var_20A= word ptr -20Ah
var_208= word ptr -208h
var_206= word ptr -206h
var_204= word ptr -204h
var_202= word ptr -202h
var_200= word ptr -200h
var_1FE= word ptr -1FEh
var_1FC= word ptr -1FCh
var_1FA= word ptr -1FAh
var_1F8= word ptr -1F8h
var_1F6= word ptr -1F6h
var_1F4= word ptr -1F4h
var_1F2= word ptr -1F2h
var_1F0= word ptr -1F0h
var_1EE= word ptr -1EEh
var_1EC= word ptr -1ECh
var_1EA= word ptr -1EAh
var_1E8= word ptr -1E8h
var_1E6= word ptr -1E6h
var_1E4= word ptr -1E4h
var_1E2= word ptr -1E2h
var_1E0= word ptr -1E0h
var_1DE= word ptr -1DEh
var_1DC= word ptr -1DCh
var_1DA= word ptr -1DAh
var_1D8= word ptr -1D8h
var_1D6= word ptr -1D6h
var_1D4= word ptr -1D4h
var_1D2= word ptr -1D2h
var_1D0= word ptr -1D0h
var_1CE= word ptr -1CEh
var_1CC= word ptr -1CCh
var_1CA= word ptr -1CAh
var_1C8= word ptr -1C8h
var_1C6= word ptr -1C6h
var_1C4= word ptr -1C4h
var_1C2= word ptr -1C2h
var_1C0= word ptr -1C0h
var_1BE= word ptr -1BEh
var_1BC= word ptr -1BCh
var_1BA= word ptr -1BAh
var_1B8= word ptr -1B8h
var_1B6= word ptr -1B6h
var_1B4= word ptr -1B4h
var_1B2= word ptr -1B2h
var_1B0= word ptr -1B0h
var_1AE= word ptr -1AEh
var_1AC= word ptr -1ACh
var_1AA= word ptr -1AAh
var_1A8= word ptr -1A8h
var_1A6= word ptr -1A6h
var_1A4= word ptr -1A4h
var_1A2= word ptr -1A2h
var_1A0= word ptr -1A0h
var_19E= word ptr -19Eh
var_19C= word ptr -19Ch
var_19A= word ptr -19Ah
var_198= word ptr -198h
var_196= word ptr -196h
var_194= word ptr -194h
var_192= word ptr -192h
var_190= word ptr -190h
var_18E= word ptr -18Eh
var_18C= word ptr -18Ch
var_18A= word ptr -18Ah
var_188= word ptr -188h
var_186= word ptr -186h
var_184= word ptr -184h
var_182= word ptr -182h
var_180= word ptr -180h
var_17E= word ptr -17Eh
var_17C= word ptr -17Ch
var_17A= word ptr -17Ah
var_178= word ptr -178h
var_176= word ptr -176h
var_174= word ptr -174h
var_172= word ptr -172h
var_170= word ptr -170h
var_16E= word ptr -16Eh
var_16C= word ptr -16Ch
var_16A= word ptr -16Ah
var_168= word ptr -168h
var_166= word ptr -166h
var_164= word ptr -164h
var_162= word ptr -162h
var_160= word ptr -160h
var_15E= word ptr -15Eh
var_15C= word ptr -15Ch
var_15A= word ptr -15Ah
var_158= word ptr -158h
var_156= word ptr -156h
var_154= word ptr -154h
var_152= word ptr -152h
var_150= word ptr -150h
var_14E= word ptr -14Eh
var_14C= word ptr -14Ch
var_14A= word ptr -14Ah
var_148= word ptr -148h
var_146= word ptr -146h
var_144= word ptr -144h
var_142= word ptr -142h
var_140= word ptr -140h
var_13E= word ptr -13Eh
var_13C= word ptr -13Ch
var_13A= word ptr -13Ah
var_138= word ptr -138h
var_134= word ptr -134h
var_130= word ptr -130h
var_12E= word ptr -12Eh
var_12C= word ptr -12Ch
var_12A= word ptr -12Ah
var_128= word ptr -128h
var_126= word ptr -126h
var_124= word ptr -124h
var_122= word ptr -122h
var_120= word ptr -120h
var_11E= word ptr -11Eh
var_11C= word ptr -11Ch
var_11A= word ptr -11Ah
var_118= word ptr -118h
var_116= word ptr -116h
var_114= word ptr -114h
var_112= word ptr -112h
var_110= word ptr -110h
var_10E= word ptr -10Eh
var_10C= word ptr -10Ch
var_10A= word ptr -10Ah
var_108= word ptr -108h
var_106= word ptr -106h
var_104= word ptr -104h
var_102= word ptr -102h
var_100= word ptr -100h
var_FE= word ptr -0FEh
var_FC= word ptr -0FCh
var_FA= word ptr -0FAh
var_F8= word ptr -0F8h
var_F6= word ptr -0F6h
var_F4= word ptr -0F4h
var_F2= word ptr -0F2h
var_F0= word ptr -0F0h
var_EE= word ptr -0EEh
var_EC= word ptr -0ECh
var_EA= word ptr -0EAh
var_E8= word ptr -0E8h
var_E6= word ptr -0E6h
var_E4= word ptr -0E4h
var_E2= word ptr -0E2h
var_E0= word ptr -0E0h
var_DE= word ptr -0DEh
var_DC= word ptr -0DCh
var_DA= word ptr -0DAh
var_D8= word ptr -0D8h
var_D6= word ptr -0D6h
var_D4= word ptr -0D4h
var_D2= word ptr -0D2h
var_D0= word ptr -0D0h
var_CE= word ptr -0CEh
var_CC= word ptr -0CCh
var_CA= word ptr -0CAh
var_C8= word ptr -0C8h
var_C6= word ptr -0C6h
var_C4= word ptr -0C4h
var_C2= word ptr -0C2h
var_C0= word ptr -0C0h
var_BE= word ptr -0BEh
var_BC= word ptr -0BCh
var_BA= word ptr -0BAh
var_B8= word ptr -0B8h
var_B6= word ptr -0B6h
var_B4= word ptr -0B4h
var_B2= word ptr -0B2h
var_B0= word ptr -0B0h
var_AE= word ptr -0AEh
var_AC= word ptr -0ACh
var_AA= word ptr -0AAh
var_A8= word ptr -0A8h
var_A6= word ptr -0A6h
var_A4= word ptr -0A4h
var_A2= word ptr -0A2h
var_A0= word ptr -0A0h
var_9E= word ptr -9Eh
var_9C= word ptr -9Ch
var_9A= word ptr -9Ah
var_98= word ptr -98h
var_96= word ptr -96h
var_94= word ptr -94h
var_92= word ptr -92h
var_90= word ptr -90h
var_8E= word ptr -8Eh
var_8C= word ptr -8Ch
var_8A= word ptr -8Ah
var_88= word ptr -88h
var_86= word ptr -86h
var_84= word ptr -84h
var_82= word ptr -82h
var_80= word ptr -80h
var_7E= word ptr -7Eh
var_7C= word ptr -7Ch
var_7A= word ptr -7Ah
var_78= word ptr -78h
var_76= word ptr -76h
var_74= word ptr -74h
var_72= word ptr -72h
var_70= word ptr -70h
var_6E= word ptr -6Eh
var_6C= word ptr -6Ch
var_6A= word ptr -6Ah
var_68= word ptr -68h
var_66= word ptr -66h
var_64= word ptr -64h
var_62= word ptr -62h
var_60= word ptr -60h
var_5E= word ptr -5Eh
var_5C= word ptr -5Ch
var_5A= word ptr -5Ah
var_58= word ptr -58h
var_56= word ptr -56h
var_54= word ptr -54h
var_52= word ptr -52h
var_50= word ptr -50h
var_4E= word ptr -4Eh
var_4C= word ptr -4Ch
var_4A= word ptr -4Ah
var_48= word ptr -48h
var_46= word ptr -46h
var_44= word ptr -44h
var_42= word ptr -42h
var_40= word ptr -40h
var_3E= word ptr -3Eh
var_3C= word ptr -3Ch
var_3A= word ptr -3Ah
var_38= word ptr -38h
var_36= word ptr -36h
var_34= word ptr -34h
var_32= word ptr -32h
var_30= word ptr -30h
var_2E= word ptr -2Eh
var_2C= word ptr -2Ch
var_2A= word ptr -2Ah
var_28= word ptr -28h
var_26= word ptr -26h
var_24= word ptr -24h
var_22= word ptr -22h
var_20= word ptr -20h
var_1E= word ptr -1Eh
var_1C= word ptr -1Ch
var_1A= word ptr -1Ah
var_18= word ptr -18h
var_16= word ptr -16h
var_14= word ptr -14h
var_12= word ptr -12h
var_10= word ptr -10h
var_E= word ptr -0Eh
var_C= word ptr -0Ch
var_A= word ptr -0Ah
var_8= word ptr -8
var_6= word ptr -6
var_4= word ptr -4
var_2= word ptr -2

push    bp
mov     bp, sp
sub     sp, 20Ah
push    si
mov     [bp+var_66], 7
mov     ax, 23h ; '#'
mov     [bp+var_3E], ax
mov     [bp+var_38], ax
mov     [bp+var_32], ax
sub     ax, ax
mov     [bp+var_54], ax
mov     [bp+var_30], ax
mov     ax, 1
mov     [bp+var_4E], ax
mov     [bp+var_2A], ax
mov     ax, 21h ; '!'
mov     [bp+var_2C], ax
mov     [bp+var_26], ax
mov     [bp+var_20], ax
mov     ax, 9
mov     [bp+var_3C], ax
mov     [bp+var_18], ax
mov     ax, 1Dh
mov     [bp+var_1A], ax
mov     [bp+var_14], ax
mov     [bp+var_E], ax
mov     ax, 0Ah
mov     [bp+var_36], ax
mov     [bp+var_12], ax
mov     [bp+var_A], ax
mov     [bp+var_8], 0Bh
mov     [bp+var_1EE], 29h ; ')'
mov     ax, 0FFFFh
mov     [bp+var_6], ax
mov     [bp+var_4], ax
mov     [bp+var_2], ax
mov     [bp+var_1DA], ax
mov     [bp+var_1D8], ax
mov     [bp+var_1D6], ax
mov     ax, 2
mov     [bp+var_58], ax
mov     [bp+var_52], ax
mov     [bp+var_4C], ax
mov     [bp+var_48], ax
mov     [bp+var_46], ax
mov     [bp+var_40], ax
mov     [bp+var_3A], ax
mov     [bp+var_34], ax
mov     [bp+var_24], ax
mov     [bp+var_FC], ax
mov     ax, 8
mov     [bp+var_42], ax
mov     [bp+var_1E], ax
mov     [bp+var_F6], ax
mov     ax, 17h
mov     [bp+var_56], ax
mov     [bp+var_EE], ax
mov     ax, 4
mov     [bp+var_20A], ax
mov     [bp+var_1F8], ax
mov     [bp+var_1F6], ax
mov     [bp+var_1F0], ax
mov     [bp+var_1EA], ax
mov     [bp+var_1E6], ax
mov     [bp+var_F0], ax
mov     [bp+var_EA], ax
mov     ax, 5
mov     [bp+var_60], ax
mov     [bp+var_5A], ax
mov     [bp+var_C], ax
mov     [bp+var_204], ax
mov     [bp+var_1F2], ax
mov     [bp+var_1E4], ax
mov     [bp+var_1DE], ax
mov     [bp+var_FE], ax
mov     [bp+var_F8], ax
mov     [bp+var_F2], ax
mov     [bp+var_E4], ax
mov     ax, 3
mov     [bp+var_6C], ax
mov     [bp+var_6A], ax
mov     [bp+var_64], ax
mov     [bp+var_2E], ax
mov     [bp+var_28], ax
mov     [bp+var_22], ax
mov     [bp+var_1C], ax
mov     [bp+var_16], ax
mov     [bp+var_10], ax
mov     [bp+var_208], ax
mov     [bp+var_202], ax
mov     [bp+var_1FC], ax
mov     [bp+var_EC], ax
mov     [bp+var_E6], ax
mov     [bp+var_E0], ax
mov     ax, 6
mov     [bp+var_68], ax
mov     [bp+var_62], ax
mov     [bp+var_5E], ax
mov     [bp+var_5C], ax
mov     [bp+var_206], ax
mov     [bp+var_200], ax
mov     [bp+var_1FE], ax
mov     [bp+var_1FA], ax
mov     [bp+var_1F4], ax
mov     [bp+var_1EC], ax
mov     [bp+var_1E8], ax
mov     [bp+var_1E2], ax
mov     [bp+var_1E0], ax
mov     [bp+var_1DC], ax
mov     [bp+var_FA], ax
mov     [bp+var_F4], ax
mov     [bp+var_DE], ax
mov     ax, 22h ; '"'
mov     [bp+var_50], ax
mov     [bp+var_4A], ax
mov     [bp+var_44], ax
mov     [bp+var_E8], ax
mov     [bp+var_E2], ax
mov     [bp+var_DC], ax
mov     ax, 23h ; '#'
mov     [bp+var_D6], ax
mov     [bp+var_D0], ax
mov     [bp+var_CA], ax
mov     ax, 1Dh
mov     [bp+var_B2], ax
mov     [bp+var_AC], ax
mov     [bp+var_A6], ax
mov     [bp+var_A2], 0
mov     [bp+var_A0], 0Bh
mov     [bp+var_152], 2Fh ; '/'
mov     ax, 7
mov     [bp+var_DA], ax
mov     [bp+var_D4], ax
mov     [bp+var_CE], ax
mov     [bp+var_C6], ax
mov     [bp+var_C0], ax
mov     [bp+var_BA], ax
mov     [bp+var_8A], ax
mov     [bp+var_84], ax
mov     ax, 8
mov     [bp+var_92], ax
mov     [bp+var_86], ax
mov     [bp+var_7A], ax
mov     ax, 0Ah
mov     [bp+var_7E], ax
mov     [bp+var_78], ax
mov     ax, 0FFFFh
mov     [bp+var_9E], ax
mov     [bp+var_9C], ax
mov     [bp+var_9A], ax
mov     [bp+var_13E], ax
mov     [bp+var_13C], ax
mov     [bp+var_13A], ax
mov     [bp+var_74], ax
mov     [bp+var_72], ax
mov     [bp+var_70], ax
mov     ax, 3
mov     [bp+var_B4], ax
mov     [bp+var_AE], ax
mov     [bp+var_A8], ax
mov     [bp+var_1C6], ax
mov     [bp+var_1C0], ax
mov     ax, 6
mov     [bp+var_CC], ax
mov     [bp+var_BC], ax
mov     [bp+var_AA], ax
mov     [bp+var_162], ax
mov     [bp+var_158], ax
mov     [bp+var_150], ax
mov     [bp+var_14C], ax
mov     [bp+var_148], ax
mov     [bp+var_146], ax
mov     [bp+var_144], ax
mov     [bp+var_142], ax
mov     [bp+var_140], ax
mov     [bp+var_94], ax
mov     [bp+var_8E], ax
mov     [bp+var_88], ax
mov     [bp+var_82], ax
mov     [bp+var_7C], ax
mov     [bp+var_76], ax
mov     [bp+var_1D0], ax
mov     [bp+var_1CE], ax
mov     [bp+var_1CA], ax
mov     [bp+var_1C4], ax
mov     [bp+var_1C2], ax
mov     [bp+var_1BE], ax
mov     ax, 1
mov     [bp+var_1D2], ax
mov     [bp+var_1CC], ax
mov     [bp+var_1BA], ax
mov     [bp+var_1B8], 17h
mov     ax, 21h ; '!'
mov     [bp+var_C4], ax
mov     [bp+var_BE], ax
mov     [bp+var_B8], ax
mov     [bp+var_16A], ax
mov     [bp+var_164], ax
mov     [bp+var_15E], ax
mov     [bp+var_1B2], ax
mov     ax, 5
mov     [bp+var_D2], ax
mov     [bp+var_C2], ax
mov     [bp+var_B0], ax
mov     [bp+var_A4], ax
mov     [bp+var_168], ax
mov     [bp+var_15A], ax
mov     [bp+var_156], ax
mov     [bp+var_154], ax
mov     [bp+var_14E], ax
mov     [bp+var_1BC], ax
mov     [bp+var_1B0], ax
mov     ax, 4
mov     [bp+var_D8], ax
mov     [bp+var_C8], ax
mov     [bp+var_B6], ax
mov     [bp+var_16E], ax
mov     [bp+var_16C], ax
mov     [bp+var_166], ax
mov     [bp+var_160], ax
mov     [bp+var_15C], ax
mov     [bp+var_14A], ax
mov     [bp+var_98], ax
mov     [bp+var_96], ax
mov     [bp+var_90], ax
mov     [bp+var_8C], ax
mov     [bp+var_80], ax
mov     [bp+var_1D4], ax
mov     [bp+var_1C8], ax
mov     [bp+var_1B6], ax
mov     [bp+var_1B4], ax
mov     [bp+var_1AE], ax
mov     ax, 21h ; '!'
mov     [bp+var_1AC], ax
mov     [bp+var_1A6], ax
mov     [bp+var_19E], 2
mov     ax, 22h ; '"'
mov     [bp+var_1A0], ax
mov     [bp+var_19A], ax
mov     [bp+var_194], ax
mov     [bp+var_18C], 8
mov     ax, 23h ; '#'
mov     [bp+var_18E], ax
mov     [bp+var_188], ax
mov     [bp+var_182], ax
mov     ax, 1
mov     [bp+var_1A4], ax
mov     [bp+var_17E], ax
mov     [bp+var_178], ax
mov     [bp+var_176], 2Eh ; '.'
mov     ax, 9
mov     [bp+var_186], ax
mov     [bp+var_12C], ax
mov     [bp+var_124], 17h
mov     ax, 3
mov     [bp+var_1A2], ax
mov     [bp+var_19C], ax
mov     [bp+var_198], ax
mov     [bp+var_196], ax
mov     [bp+var_190], ax
mov     [bp+var_18A], ax
mov     [bp+var_184], ax
mov     [bp+var_122], ax
mov     ax, 4
mov     [bp+var_1A8], ax
mov     [bp+var_180], ax
mov     [bp+var_126], ax
mov     [bp+var_11C], ax
mov     ax, 5
mov     [bp+var_12E], ax
mov     [bp+var_128], ax
mov     [bp+var_116], ax
mov     ax, 6
mov     [bp+var_1AA], ax
mov     [bp+var_17A], ax
mov     [bp+var_12A], ax
mov     [bp+var_110], ax
mov     ax, 7
mov     [bp+var_192], ax
mov     [bp+var_120], ax
mov     [bp+var_11A], ax
mov     [bp+var_114], ax
mov     [bp+var_10E], ax
mov     [bp+var_10A], ax
mov     [bp+var_108], ax
mov     ax, 1Eh
mov     [bp+var_17C], ax
mov     [bp+var_11E], ax
mov     [bp+var_118], ax
mov     [bp+var_112], ax
mov     [bp+var_10C], ax
mov     [bp+var_106], ax
mov     ax, 0FFFFh
mov     [bp+var_174], ax
mov     [bp+var_172], ax
mov     [bp+var_170], ax
mov     [bp+var_104], ax
mov     [bp+var_102], ax
mov     [bp+var_100], ax
mov     es, seg_27886
cmp     es:word_2232E, 2
jz      short loc_14BC3
jmp     loc_14C7B

loc_14BC3:
mov     es, seg_2788A
cmp     es:byte_222E7, 0
jz      short loc_14BD2
jmp     loc_14C7B

loc_14BD2:
mov     ax, 0F8h        ; "8"
mov     es, seg_27886
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
cmp     word ptr es:[bx+1B0Eh], 6
jz      short loc_14BEF
jmp     loc_14C7B

loc_14BEF:
cmp     word ptr es:[bx+1B12h], 6
jz      short loc_14BFA
jmp     loc_14C7B

loc_14BFA:
mov     es, seg_2788A
assume es:seg008
mov     es:byte_222E7, 1
mov     [bp+var_138], 0
jmp     short loc_14C68

loc_14C0C:
mov     ax, 0Bh
push    ax
call    sub_20FAB
add     sp, 2
mov     ax, offset byte_2230C
mov     es, seg_27886
mul     es:word_2232E
mov     bx, [bp+si+var_96]
mov     dx, bx
mov     cx, bx
shl     bx, 1
shl     bx, 1
add     bx, cx
shl     bx, 1
add     bx, cx
add     bx, [bp+si+var_98]
add     bx, ax
shl     bx, 1
mov     es, seg_27892
assume es:dseg
mov     ax, [bp+si+var_94]
mov     es:[bx+1AEEh], ax
push    dx
push    [bp+si+var_98]
call    sub_1AE6E
add     sp, 4
mov     ax, 19h
push    ax
call    sub_19288
add     sp, 2
inc     [bp+var_138]

loc_14C68:
mov     si, [bp+var_138]
mov     ax, si
shl     si, 1
add     si, ax
shl     si, 1
cmp     [bp+si+var_94], 0FFFFh
jnz     short loc_14C0C

loc_14C7B:
mov     es, seg_27886
assume es:seg008
cmp     es:word_2232E, 8
jnz     short loc_14CE2
mov     es, seg_2788A
cmp     es:byte_222EA, 0
jnz     short loc_14CE2
mov     ax, 0F8h        ; "8"
mov     es, seg_27886
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
cmp     word ptr es:[bx+1B56h], 6
jnz     short loc_14CE2
cmp     word ptr es:[bx+1B5Ah], 6
jnz     short loc_14CE2
mov     es, seg_2788A
assume es:seg008
mov     es:byte_222EA, 1
mov     es, seg_27892
assume es:dseg
mov     word ptr es:[bx+1B42h], 6
mov     ax, 3
mov     [bp+var_134], ax
push    ax
mov     ax, 9
mov     [bp+var_130], ax
push    ax
call    sub_17A68
add     sp, 4

loc_14CE2:
mov     es, seg_27886
assume es:seg008
cmp     es:word_2232E, 0Ah
jz      short loc_14CF1
jmp     loc_14E11

loc_14CF1:
mov     es, seg_2788A
cmp     es:byte_222EC, 0
jz      short loc_14D00
jmp     loc_14E11

loc_14D00:
mov     ax, 0F8h        ; "8"
mov     es, seg_27886
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
cmp     word ptr es:[bx+1B38h], 6
jz      short loc_14D1D
jmp     loc_14E11

loc_14D1D:
cmp     word ptr es:[bx+1B3Ah], 6
jz      short loc_14D28
jmp     loc_14E11

loc_14D28:
cmp     word ptr es:[bx+1B3Ch], 6
jz      short loc_14D33
jmp     loc_14E11

loc_14D33:
cmp     word ptr es:[bx+1B4Eh], 6
jz      short loc_14D3E
jmp     loc_14E11

loc_14D3E:
cmp     word ptr es:[bx+1B50h], 6
jz      short loc_14D49
jmp     loc_14E11

loc_14D49:
cmp     word ptr es:[bx+1B52h], 6
jz      short loc_14D54
jmp     loc_14E11

loc_14D54:
cmp     word ptr es:[bx+1B64h], 6
jz      short loc_14D5F
jmp     loc_14E11

loc_14D5F:
cmp     word ptr es:[bx+1B66h], 6
jz      short loc_14D6A
jmp     loc_14E11

loc_14D6A:
cmp     word ptr es:[bx+1B68h], 6
jz      short loc_14D75
jmp     loc_14E11

loc_14D75:
mov     es, seg_2788A
assume es:seg008
mov     es:byte_222EC, 1
mov     ax, 1Eh
push    ax
call    sub_1F9E2
add     sp, 2
mov     ax, 792h
push    ax
mov     cx, 160h
push    cx
mov     dx, 16h
push    dx
sub     bx, bx
push    bx
call    sub_2016C
add     sp, 8
mov     ax, 65h ; 'e'
push    ax
mov     es, seg_2788C
push    es:word_22298
push    es:word_22296
mov     ax, 78h ; 'x'
push    ax
mov     ax, 3
push    ax
call    sub_194BA
add     sp, 0Ah
call    sub_20CDA
sub     ax, ax
push    ax
mov     ax, 160h
push    ax
mov     ax, 16h
push    ax
mov     ax, 792h
push    ax
call    sub_200C6
add     sp, 8
mov     ax, 0F8h        ; "8"
mov     es, seg_27886
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
mov     word ptr es:[bx+1B24h], 6
mov     ax, 2
mov     [bp+var_134], ax
push    ax
mov     ax, 5
mov     [bp+var_130], ax
push    ax
call    sub_17A68
add     sp, 4

loc_14E11:
mov     es, seg_27886
assume es:seg008
cmp     es:word_2232E, 0Ah
jz      short loc_14E20
jmp     loc_14F56

loc_14E20:
mov     es, seg_2788A
cmp     es:byte_222ED, 0
jz      short loc_14E2F
jmp     loc_14F56

loc_14E2F:
cmp     es:byte_222EC, 1
jz      short loc_14E3A
jmp     loc_14F56

loc_14E3A:
mov     ax, 0F8h        ; "8"
mov     es, seg_27886
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
cmp     word ptr es:[bx+1AF8h], 6
jz      short loc_14E57
jmp     loc_14F56

loc_14E57:
mov     es, seg_2788A
assume es:seg008
mov     es:byte_222ED, 1
mov     ax, 32h ; '2'
push    ax
call    sub_19288
add     sp, 2
mov     ax, 792h
push    ax
mov     cx, 160h
push    cx
mov     dx, 16h
push    dx
sub     bx, bx
push    bx
call    sub_2016C
add     sp, 8
mov     ax, 6Ah ; 'j'
push    ax
mov     es, seg_2788C
push    es:word_22298
push    es:word_22296
mov     ax, 78h ; 'x'
push    ax
mov     ax, 6
push    ax
call    sub_194BA
add     sp, 0Ah
call    sub_20CDA
sub     ax, ax
push    ax
mov     cx, 160h
push    cx
mov     cx, 16h
push    cx
mov     cx, 792h
push    cx
call    sub_200C6
add     sp, 8
mov     [bp+var_138], 0
jmp     short loc_14F00

loc_14ECA:
mov     ax, 6
push    ax
call    sub_20FAB
add     sp, 2
mov     si, [bp+var_138]
mov     ax, si
shl     si, 1
add     si, ax
shl     si, 1
push    [bp+si+var_6A]
push    [bp+si+var_6C]
call    sub_1AE6E
add     sp, 4
mov     ax, 19h
push    ax
call    sub_19288
add     sp, 2

loc_14EFC:
inc     [bp+var_138]

loc_14F00:
mov     si, [bp+var_138]
mov     ax, si
shl     si, 1
add     si, ax
shl     si, 1
cmp     [bp+si+var_68], 0FFFFh
jz      short loc_14F56
mov     ax, offset byte_2230C
mov     es, seg_27886
mul     es:word_2232E
mov     bx, [bp+si+var_6A]
mov     dx, bx
mov     cx, bx
shl     bx, 1
shl     bx, 1
add     bx, cx
shl     bx, 1
add     bx, cx
add     bx, [bp+si+var_6C]
add     bx, ax
shl     bx, 1
mov     es, seg_27892
assume es:dseg
mov     ax, [bp+si+var_68]
mov     es:[bx+1AEEh], ax
cmp     ax, 6
jnz     short loc_14ECA
push    dx
push    [bp+si+var_6C]
call    sub_17A68
add     sp, 4
jmp     short loc_14EFC
align 2

loc_14F56:
mov     es, seg_27886
assume es:seg008
cmp     es:word_2232E, 0Bh
jnz     short loc_14FBD
mov     es, seg_2788A
cmp     es:byte_222F1, 0
jnz     short loc_14FBD
mov     ax, 0F8h        ; "8"
mov     es, seg_27886
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
cmp     word ptr es:[bx+1B46h], 6
jnz     short loc_14FBD
cmp     word ptr es:[bx+1B4Ah], 6
jnz     short loc_14FBD
mov     es, seg_2788A
assume es:seg008
mov     es:byte_222F1, 1
mov     es, seg_27892
assume es:dseg
mov     word ptr es:[bx+1B32h], 6
mov     ax, 3
mov     [bp+var_134], ax
push    ax
mov     ax, 1
mov     [bp+var_130], ax
push    ax
call    sub_17A68
add     sp, 4

loc_14FBD:
mov     es, seg_27886
assume es:seg008
cmp     es:word_2232E, 11h
jnz     short loc_15024
mov     es, seg_2788A
cmp     es:byte_222F2, 0
jnz     short loc_15024
mov     ax, 0F8h        ; "8"
mov     es, seg_27886
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
cmp     word ptr es:[bx+1B46h], 6
jnz     short loc_15024
cmp     word ptr es:[bx+1B4Ah], 6
jnz     short loc_15024
mov     es, seg_2788A
assume es:seg008
mov     es:byte_222F2, 1
mov     es, seg_27892
assume es:dseg
mov     word ptr es:[bx+1B32h], 6
mov     ax, 3
mov     [bp+var_134], ax
push    ax
mov     ax, 1
mov     [bp+var_130], ax
push    ax
call    sub_17A68
add     sp, 4

loc_15024:
mov     es, seg_27886
assume es:seg008
cmp     es:word_2232E, 11h
jnz     short loc_1508B
mov     es, seg_2788A
cmp     es:byte_222F3, 0
jnz     short loc_1508B
mov     ax, 0F8h        ; "8"
mov     es, seg_27886
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
cmp     word ptr es:[bx+1B56h], 6
jnz     short loc_1508B
cmp     word ptr es:[bx+1B5Ah], 6
jnz     short loc_1508B
mov     es, seg_2788A
assume es:seg008
mov     es:byte_222F3, 1
mov     es, seg_27892
assume es:dseg
mov     word ptr es:[bx+1B42h], 6
mov     ax, 3
mov     [bp+var_134], ax
push    ax
mov     ax, 9
mov     [bp+var_130], ax
push    ax
call    sub_17A68
add     sp, 4

loc_1508B:
mov     es, seg_27886
assume es:seg008
cmp     es:word_2232E, 11h
jnz     short loc_150F0
mov     es, seg_2788A
cmp     es:byte_222F4, 0
jnz     short loc_150F0
mov     ax, 0F8h        ; "8"
mov     es, seg_27886
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
cmp     word ptr es:[bx+1B88h], 6
jnz     short loc_150F0
cmp     word ptr es:[bx+1B8Ch], 6
jnz     short loc_150F0
mov     es, seg_2788A
assume es:seg008
mov     es:byte_222F4, 1
mov     ax, 6
mov     [bp+var_134], ax
mov     es, seg_27892
assume es:dseg
mov     es:[bx+1B74h], ax
push    ax
mov     ax, 1
mov     [bp+var_130], ax
push    ax
call    sub_17A68
add     sp, 4

loc_150F0:
mov     es, seg_27886
assume es:seg008
cmp     es:word_2232E, 11h
jnz     short loc_15155
mov     es, seg_2788A
cmp     es:byte_222F5, 0
jnz     short loc_15155
mov     ax, 0F8h        ; "8"
mov     es, seg_27886
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
cmp     word ptr es:[bx+1B98h], 6
jnz     short loc_15155
cmp     word ptr es:[bx+1B9Ch], 6
jnz     short loc_15155
mov     es, seg_2788A
assume es:seg008
mov     es:byte_222F5, 1
mov     ax, 6
mov     [bp+var_134], ax
mov     es, seg_27892
assume es:dseg
mov     es:[bx+1B84h], ax
push    ax
mov     ax, 9
mov     [bp+var_130], ax
push    ax
call    sub_17A68
add     sp, 4

loc_15155:
mov     es, seg_27886
assume es:seg008
cmp     es:word_2232E, 0Fh
jz      short loc_15164
jmp     loc_1524B

loc_15164:
mov     ax, 0F8h
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
cmp     word ptr es:[bx+1B66h], 6
jz      short loc_1517D
jmp     loc_1524B

loc_1517D:
mov     es, seg_2788A
assume es:seg008
cmp     es:byte_222F0, 0
jz      short loc_1518C
jmp     loc_1524B

loc_1518C:
mov     es:byte_222F0, 1
mov     [bp+var_138], 0
jmp     short loc_151DE

loc_1519A:
mov     ax, offset byte_2230C
mov     es, seg_27886
mul     es:word_2232E
mov     bx, [bp+si+var_208]
mov     dx, bx
mov     cx, bx
shl     bx, 1
shl     bx, 1
add     bx, cx
shl     bx, 1
add     bx, cx
add     bx, [bp+si+var_20A]
add     bx, ax
shl     bx, 1
mov     es, seg_27892
assume es:dseg
mov     ax, [bp+si+var_206]
mov     es:[bx+1AEEh], ax
push    dx
push    [bp+si+var_20A]
call    sub_1AE6E
add     sp, 4
inc     [bp+var_138]

loc_151DE:
mov     si, [bp+var_138]
mov     ax, si
shl     si, 1
add     si, ax
shl     si, 1
cmp     [bp+si+var_206], 0FFFFh
jnz     short loc_1519A
mov     ax, 0F8h        ; "8"
mov     es, seg_27886
assume es:seg008
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
mov     word ptr es:[bx+1BA8h], 6
mov     ax, 8
push    ax
mov     ax, 5
push    ax
call    sub_17A68
add     sp, 4
mov     ax, 0F8h        ; "8"
mov     es, seg_27886
assume es:seg008
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
mov     word ptr es:[bx+1B24h], 6
mov     ax, 2
mov     [bp+var_134], ax
push    ax
mov     ax, 5
mov     [bp+var_130], ax
push    ax
call    sub_17A68
add     sp, 4

loc_1524B:
mov     es, seg_27886
assume es:seg008
cmp     es:word_2232E, 0Eh
jnz     short loc_152D3
mov     es, seg_2788A
cmp     es:byte_222F6, 0
jnz     short loc_152D3
mov     ax, 0F8h        ; "8"
mov     es, seg_27886
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
cmp     word ptr es:[bx+1AEEh], 6
jnz     short loc_152D3
cmp     word ptr es:[bx+1AF2h], 6
jnz     short loc_152D3
cmp     word ptr es:[bx+1B06h], 6
jnz     short loc_152D3
mov     es, seg_2788A
assume es:seg008
mov     es:byte_222F6, 1
mov     ax, 6
push    ax
call    sub_20FAB
add     sp, 2
mov     ax, 0F8h        ; "8"
mov     es, seg_27886
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
mov     word ptr es:[bx+1B1Ah], 1Eh
mov     ax, 2
mov     [bp+var_134], ax
push    ax
sub     ax, ax
mov     [bp+var_130], ax
push    ax
call    sub_1AE6E
add     sp, 4

loc_152D3:
mov     es, seg_27886
assume es:seg008
cmp     es:word_2232E, 14h
jz      short loc_152E2
jmp     loc_15466

loc_152E2:
mov     es, seg_2788A
cmp     es:byte_222F8, 0
jz      short loc_152F1
jmp     loc_15466

loc_152F1:
cmp     es:byte_222F7, 1
jz      short loc_152FC
jmp     loc_15466

loc_152FC:
mov     ax, 0F8h        ; "8"
mov     es, seg_27886
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
cmp     word ptr es:[bx+1B66h], 6
jz      short loc_15319
jmp     loc_15466

loc_15319:
mov     es, seg_2788A
assume es:seg008
mov     es:byte_222F8, 1
mov     ax, 32h ; '2'
push    ax
call    sub_19288
add     sp, 2
mov     ax, 792h
push    ax
mov     cx, 160h
push    cx
mov     dx, 16h
push    dx
sub     bx, bx
push    bx
call    sub_2016C
add     sp, 8
mov     ax, 7Ah ; 'z'
push    ax
mov     es, seg_2788C
push    es:word_22298
push    es:word_22296
mov     ax, 78h ; 'x'
push    ax
mov     ax, 6
push    ax
call    sub_194BA
add     sp, 0Ah
call    sub_20CDA
sub     ax, ax
push    ax
mov     cx, 160h
push    cx
mov     cx, 16h
push    cx
mov     cx, 792h
push    cx
call    sub_200C6
add     sp, 8
mov     [bp+var_138], 0
jmp     short loc_153C6
db 2 dup(90h)

loc_1538E:
mov     ax, 6
push    ax
call    sub_20FAB
add     sp, 2
mov     si, [bp+var_138]
mov     ax, si
shl     si, 1
add     si, ax
shl     si, 1
push    [bp+si+var_FC]
push    [bp+si+var_FE]
call    sub_1AE6E
add     sp, 4
mov     ax, 19h
push    ax
call    sub_19288
add     sp, 2

loc_153C2:
inc     [bp+var_138]

loc_153C6:
mov     si, [bp+var_138]
mov     ax, si
shl     si, 1
add     si, ax
shl     si, 1
cmp     [bp+si+var_FA], 0FFFFh
jz      short loc_15424
mov     ax, offset byte_2230C
mov     es, seg_27886
mul     es:word_2232E
mov     bx, [bp+si+var_FC]
mov     dx, bx
mov     cx, bx
shl     bx, 1
shl     bx, 1
add     bx, cx
shl     bx, 1
add     bx, cx
add     bx, [bp+si+var_FE]
add     bx, ax
shl     bx, 1
mov     es, seg_27892
assume es:dseg
mov     ax, [bp+si+var_FA]
mov     es:[bx+1AEEh], ax
cmp     ax, 6
jz      short loc_15414
jmp     loc_1538E

loc_15414:
push    dx
push    [bp+si+var_FE]
call    sub_17A68
add     sp, 4
jmp     short loc_153C2
align 2

loc_15424:
mov     ax, 32h ; '2'
push    ax
call    sub_19288
add     sp, 2
call    sub_174F6
mov     ax, 0F8h        ; "8"
mov     es, seg_27886
assume es:seg008
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
mov     word ptr es:[bx+1B50h], 6
mov     ax, 4
mov     [bp+var_134], ax
push    ax
mov     ax, 5
mov     [bp+var_130], ax
push    ax
call    sub_1AE6E
add     sp, 4

loc_15466:
mov     es, seg_27886
assume es:seg008
cmp     es:word_2232E, 1Eh
jz      short loc_15475
jmp     loc_15560

loc_15475:
mov     es, seg_2788A
cmp     es:byte_222FE, 0
jz      short loc_15484
jmp     loc_15560

loc_15484:
mov     ax, 0F8h        ; "8"
mov     es, seg_27886
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
cmp     word ptr es:[bx+1B4Ah], 6
jz      short loc_154A1
jmp     loc_15560

loc_154A1:
cmp     word ptr es:[bx+1B4Ch], 6
jz      short loc_154AC
jmp     loc_15560

loc_154AC:
cmp     word ptr es:[bx+1B4Eh], 6
jz      short loc_154B7
jmp     loc_15560

loc_154B7:
cmp     word ptr es:[bx+1B52h], 6
jz      short loc_154C2
jmp     loc_15560

loc_154C2:
cmp     word ptr es:[bx+1B54h], 6
jz      short loc_154CD
jmp     loc_15560

loc_154CD:
cmp     word ptr es:[bx+1B56h], 6
jz      short loc_154D8
jmp     loc_15560

loc_154D8:
mov     es, seg_2788A
assume es:seg008
mov     es:byte_222FE, 1
mov     es, seg_27892
assume es:dseg
mov     word ptr es:[bx+1B3Ah], 6
mov     ax, 3
push    ax
mov     ax, 5
push    ax
call    sub_17A68
add     sp, 4
mov     ax, 0F8h        ; "8"
mov     es, seg_27886
assume es:seg008
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
mov     ax, 6
mov     es:[bx+1B7Ch], ax
push    ax
mov     ax, 5
push    ax
call    sub_17A68
add     sp, 4
mov     ax, 6
push    ax
call    sub_20FAB
add     sp, 2
mov     ax, 0F8h        ; "8"
mov     es, seg_27886
assume es:seg008
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
mov     word ptr es:[bx+1AF8h], 0Bh
sub     ax, ax
mov     [bp+var_134], ax
push    ax
mov     ax, 5
mov     [bp+var_130], ax
push    ax
call    sub_1AE6E
add     sp, 4

loc_15560:
mov     es, seg_27886
assume es:seg008
cmp     es:word_2232E, 20h ; ' '
jnz     short loc_155C7
mov     es, seg_2788A
cmp     es:byte_22300, 0
jnz     short loc_155C7
mov     ax, 0F8h        ; "8"
mov     es, seg_27886
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
cmp     word ptr es:[bx+1BB4h], 6
jnz     short loc_155C7
cmp     word ptr es:[bx+1BB8h], 6
jnz     short loc_155C7
mov     es, seg_2788A
assume es:seg008
mov     es:byte_22300, 1
mov     es, seg_27892
assume es:dseg
mov     word ptr es:[bx+1BA0h], 6
mov     ax, 8
mov     [bp+var_134], ax
push    ax
mov     ax, 1
mov     [bp+var_130], ax
push    ax
call    sub_17A68
add     sp, 4

loc_155C7:
mov     es, seg_27886
assume es:seg008
cmp     es:word_2232E, 21h ; '!'
jz      short loc_155D6
jmp     loc_1566D

loc_155D6:
mov     es, seg_2788A
cmp     es:byte_22303, 0
jz      short loc_155E5
jmp     loc_1566D

loc_155E5:
mov     ax, 0F8h        ; "8"
mov     es, seg_27886
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
cmp     word ptr es:[bx+1B56h], 6
jnz     short loc_1566D
cmp     word ptr es:[bx+1B5Ah], 6
jnz     short loc_1566D
cmp     word ptr es:[bx+1B82h], 6
jnz     short loc_1566D
cmp     word ptr es:[bx+1B86h], 6
jnz     short loc_1566D
mov     es, seg_2788A
assume es:seg008
mov     es:byte_22303, 1
mov     es, seg_27892
assume es:dseg
mov     word ptr es:[bx+1B42h], 6
mov     ax, 3
push    ax
mov     ax, 9
push    ax
call    sub_17A68
add     sp, 4
mov     ax, 0F8h        ; "8"
mov     es, seg_27886
assume es:seg008
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
mov     word ptr es:[bx+1B9Ah], 6
mov     ax, 7
mov     [bp+var_134], ax
push    ax
mov     ax, 9
mov     [bp+var_130], ax
push    ax
call    sub_17A68
add     sp, 4

loc_1566D:
mov     es, seg_27886
assume es:seg008
cmp     es:word_2232E, 22h ; '"'
jz      short loc_1567C
jmp     loc_157DE

loc_1567C:
mov     es, seg_2788A
cmp     es:byte_22304, 0
jz      short loc_1568B
jmp     loc_157DE

loc_1568B:
mov     ax, 0F8h        ; "8"
mov     es, seg_27886
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
cmp     word ptr es:[bx+1B38h], 6
jz      short loc_156A8
jmp     loc_157DE

loc_156A8:
cmp     word ptr es:[bx+1B3Ch], 6
jz      short loc_156B3
jmp     loc_157DE

loc_156B3:
cmp     word ptr es:[bx+1B40h], 6
jz      short loc_156BE
jmp     loc_157DE

loc_156BE:
cmp     word ptr es:[bx+1B44h], 6
jz      short loc_156C9
jmp     loc_157DE

loc_156C9:
cmp     word ptr es:[bx+1B90h], 6
jz      short loc_156D4
jmp     loc_157DE

loc_156D4:
cmp     word ptr es:[bx+1B94h], 6
jz      short loc_156DF
jmp     loc_157DE

loc_156DF:
cmp     word ptr es:[bx+1B98h], 6
jz      short loc_156EA
jmp     loc_157DE

loc_156EA:
cmp     word ptr es:[bx+1B9Ch], 6
jz      short loc_156F5
jmp     loc_157DE

loc_156F5:
mov     es, seg_2788A
assume es:seg008
mov     es:byte_22304, 1
mov     ax, 6
push    ax
call    sub_20FAB
add     sp, 2
mov     ax, 0F8h        ; "8"
mov     es, seg_27886
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
mov     word ptr es:[bx+1B5Eh], 1Eh
mov     ax, 5
push    ax
mov     ax, 1
push    ax
call    sub_1AE6E
add     sp, 4
mov     ax, 0F8h        ; "8"
mov     es, seg_27886
assume es:seg008
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
mov     word ptr es:[bx+1B46h], 1Dh
mov     ax, 4
push    ax
sub     cx, cx
push    cx
call    sub_1AE6E
add     sp, 4
mov     ax, 0F8h        ; "8"
mov     es, seg_27886
assume es:seg008
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
mov     word ptr es:[bx+1B4Ah], 1Dh
mov     ax, 4
push    ax
mov     ax, 2
push    ax
call    sub_1AE6E
add     sp, 4
mov     ax, 0F8h        ; "8"
mov     es, seg_27886
assume es:seg008
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
mov     word ptr es:[bx+1B72h], 1Dh
mov     ax, 6
push    ax
sub     cx, cx
push    cx
call    sub_1AE6E
add     sp, 4
mov     ax, 0F8h        ; "8"
mov     es, seg_27886
assume es:seg008
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
mov     word ptr es:[bx+1B76h], 1Dh
mov     ax, 6
mov     [bp+var_134], ax
push    ax
mov     ax, 2
mov     [bp+var_130], ax
push    ax
call    sub_1AE6E
add     sp, 4

loc_157DE:
mov     es, seg_27886
assume es:seg008
cmp     es:word_2232E, 23h ; '#'
jz      short loc_157ED
jmp     loc_158AC

loc_157ED:
mov     ax, 0F8h
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
cmp     word ptr es:[bx+1B7Ch], 6
jz      short loc_15806
jmp     loc_158AC

loc_15806:
mov     es, seg_2788A
assume es:seg008
cmp     es:byte_22305, 0
jz      short loc_15815
jmp     loc_158AC

loc_15815:
mov     es:byte_22305, 1
mov     [bp+var_138], 0
jmp     short loc_15868
align 2

loc_15824:
mov     ax, offset byte_2230C
mov     es, seg_27886
mul     es:word_2232E
mov     bx, [bp+si+var_16C]
mov     dx, bx
mov     cx, bx
shl     bx, 1
shl     bx, 1
add     bx, cx
shl     bx, 1
add     bx, cx
add     bx, [bp+si+var_16E]
add     bx, ax
shl     bx, 1
mov     es, seg_27892
assume es:dseg
mov     ax, [bp+si+var_16A]
mov     es:[bx+1AEEh], ax
push    dx
push    [bp+si+var_16E]
call    sub_1AE6E
add     sp, 4
inc     [bp+var_138]

loc_15868:
mov     si, [bp+var_138]
mov     ax, si
shl     si, 1
add     si, ax
shl     si, 1
cmp     [bp+si+var_16A], 0FFFFh
jnz     short loc_15824
mov     ax, 0F8h        ; "8"
mov     es, seg_27886
assume es:seg008
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
mov     word ptr es:[bx+1B24h], 6
mov     ax, 2
mov     [bp+var_134], ax
push    ax
mov     ax, 5
mov     [bp+var_130], ax
push    ax
call    sub_17A68
add     sp, 4

loc_158AC:
mov     es, seg_27886
assume es:seg008
cmp     es:word_2232E, 26h ; '&'
jnz     short loc_15921
mov     es, seg_2788A
cmp     es:byte_22308, 0
jnz     short loc_15921
mov     ax, 0F8h        ; "8"
mov     es, seg_27886
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
cmp     word ptr es:[bx+1BB4h], 6
jnz     short loc_15921
cmp     word ptr es:[bx+1BB8h], 6
jnz     short loc_15921
mov     es, seg_2788A
assume es:seg008
mov     es:byte_22308, 1
mov     ax, 6
push    ax
call    sub_20FAB
add     sp, 2
mov     [bp+var_130], 1
mov     [bp+var_134], 8
mov     ax, 0F8h        ; "8"
mov     es, seg_27886
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
mov     word ptr es:[bx+1BA0h], 9

loc_15921:
mov     es, seg_27886
assume es:seg008
cmp     es:word_2232E, 29h ; ')'
jz      short loc_15930
jmp     loc_15A66

loc_15930:
mov     es, seg_2788A
cmp     es:byte_2230A, 0
jz      short loc_1593F
jmp     loc_15A66

loc_1593F:
mov     ax, 0F8h        ; "8"
mov     es, seg_27886
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
cmp     word ptr es:[bx+1B16h], 6
jz      short loc_1595C
jmp     loc_15A66

loc_1595C:
mov     es, seg_2788A
assume es:seg008
mov     es:byte_2230A, 1
mov     ax, 6
push    ax
call    sub_20FAB
add     sp, 2
mov     ax, 0F8h        ; "8"
mov     es, seg_27886
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
mov     word ptr es:[bx+1B50h], 2Dh ; '-'
mov     ax, 4
push    ax
mov     cx, 5
push    cx
call    sub_1AE6E
add     sp, 4
mov     ax, 0F8h        ; "8"
mov     es, seg_27886
assume es:seg008
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
mov     word ptr es:[bx+1B64h], 8
mov     ax, 5
push    ax
mov     cx, 4
push    cx
call    sub_1AE6E
add     sp, 4
mov     ax, 0F8h        ; "8"
mov     es, seg_27886
assume es:seg008
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
mov     word ptr es:[bx+1B66h], 8
mov     ax, 5
push    ax
push    ax
call    sub_1AE6E
add     sp, 4
mov     ax, 0F8h        ; "8"
mov     es, seg_27886
assume es:seg008
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
mov     word ptr es:[bx+1B68h], 8
mov     ax, 5
push    ax
mov     ax, 6
push    ax
call    sub_1AE6E
add     sp, 4
mov     ax, 0F8h        ; "8"
mov     es, seg_27886
assume es:seg008
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
mov     ax, 6
mov     es:[bx+1B7Ah], ax
push    ax
mov     ax, 4
push    ax
call    sub_1AE6E
add     sp, 4
mov     ax, 0F8h        ; "8"
mov     es, seg_27886
assume es:seg008
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
mov     ax, 6
mov     [bp+var_130], ax
mov     [bp+var_134], ax
mov     es:[bx+1B7Eh], ax
push    ax
push    ax
call    sub_1AE6E
add     sp, 4

loc_15A66:
mov     es, seg_27886
assume es:seg008
cmp     es:word_2232E, 30h ; '0'
jnz     short loc_15ADC
mov     es, seg_2788A
cmp     es:byte_2230F, 0
jnz     short loc_15ADC
mov     ax, 0F8h        ; "8"
mov     es, seg_27886
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
cmp     word ptr es:[bx+1AEEh], 6
jnz     short loc_15ADC
mov     es, seg_2788A
assume es:seg008
mov     es:byte_2230F, 1
mov     ax, 6
push    ax
call    sub_20FAB
add     sp, 2
mov     ax, 0F8h        ; "8"
mov     es, seg_27886
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
mov     word ptr es:[bx+1B96h], 6
mov     ax, 7
mov     [bp+var_130], ax
mov     [bp+var_134], ax
push    ax
push    ax
call    sub_17A68
add     sp, 4

loc_15ADC:
mov     es, seg_27886
assume es:seg008
cmp     es:word_2232E, 2Ch ; ','
jnz     short loc_15B43
mov     es, seg_2788A
cmp     es:byte_2230C, 0
jnz     short loc_15B43
mov     ax, 0F8h        ; "8"
mov     es, seg_27886
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
cmp     word ptr es:[bx+1BA6h], 6
jnz     short loc_15B43
cmp     word ptr es:[bx+1BAAh], 6
jnz     short loc_15B43
mov     es, seg_2788A
assume es:seg008
mov     es:byte_2230C, 1
mov     es, seg_27892
assume es:dseg
mov     word ptr es:[bx+1B92h], 6
mov     ax, 7
mov     [bp+var_134], ax
push    ax
mov     ax, 5
mov     [bp+var_130], ax
push    ax
call    sub_17A68
add     sp, 4

loc_15B43:
mov     es, seg_27886
assume es:seg008
cmp     es:word_2232E, 2Dh ; '-'
jnz     short loc_15BAA
mov     es, seg_2788A
cmp     es:byte_2230D, 0
jnz     short loc_15BAA
mov     ax, 0F8h        ; "8"
mov     es, seg_27886
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
cmp     word ptr es:[bx+1BA6h], 6
jnz     short loc_15BAA
cmp     word ptr es:[bx+1BD2h], 6
jnz     short loc_15BAA
mov     es, seg_2788A
assume es:seg008
mov     es:byte_2230D, 1
mov     es, seg_27892
assume es:dseg
mov     word ptr es:[bx+1BBAh], 6
mov     ax, 9
mov     [bp+var_134], ax
push    ax
mov     ax, 3
mov     [bp+var_130], ax
push    ax
call    sub_17A68
add     sp, 4

loc_15BAA:
mov     es, seg_27886
assume es:seg008
cmp     es:word_2232E, 2Dh ; '-'
jnz     short loc_15C0F
mov     es, seg_2788A
cmp     es:byte_2230E, 0
jnz     short loc_15C0F
mov     ax, 0F8h        ; "8"
mov     es, seg_27886
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
cmp     word ptr es:[bx+1BACh], 6
jnz     short loc_15C0F
cmp     word ptr es:[bx+1BD8h], 6
jnz     short loc_15C0F
mov     es, seg_2788A
assume es:seg008
mov     es:byte_2230E, 1
mov     ax, 9
mov     [bp+var_134], ax
push    ax
mov     ax, 6
mov     [bp+var_130], ax
mov     es, seg_27892
assume es:dseg
mov     es:[bx+1BC0h], ax
push    ax
call    sub_17A68
add     sp, 4

loc_15C0F:
mov     es, seg_27886
assume es:seg008
cmp     es:word_2232E, 31h ; '1'
jnz     short loc_15C76
mov     es, seg_2788A
cmp     es:byte_22310, 0
jnz     short loc_15C76
mov     ax, 0F8h        ; "8"
mov     es, seg_27886
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
cmp     word ptr es:[bx+1BBCh], 6
jnz     short loc_15C76
cmp     word ptr es:[bx+1BC0h], 6
jnz     short loc_15C76
mov     es, seg_2788A
assume es:seg008
mov     es:byte_22310, 1
mov     es, seg_27892
assume es:dseg
mov     word ptr es:[bx+1BA8h], 6
mov     ax, 8
mov     [bp+var_134], ax
push    ax
mov     ax, 5
mov     [bp+var_130], ax
push    ax
call    sub_17A68
add     sp, 4

loc_15C76:
mov     es, seg_27886
assume es:seg008
cmp     es:word_2232E, 31h ; '1'
jnz     short loc_15CDB
mov     es, seg_2788A
cmp     es:byte_22311, 0
jnz     short loc_15CDB
mov     ax, 0F8h        ; "8"
mov     es, seg_27886
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
cmp     word ptr es:[bx+1B90h], 6
jnz     short loc_15CDB
cmp     word ptr es:[bx+1B94h], 6
jnz     short loc_15CDB
mov     es, seg_2788A
assume es:seg008
mov     es:byte_22311, 1
mov     ax, 6
mov     [bp+var_134], ax
mov     es, seg_27892
assume es:dseg
mov     es:[bx+1B7Ch], ax
push    ax
mov     ax, 5
mov     [bp+var_130], ax
push    ax
call    sub_17A68
add     sp, 4

loc_15CDB:
mov     es, seg_27886
assume es:seg008
cmp     es:word_2232E, 31h ; '1'
jz      short loc_15CEA
jmp     loc_15E17

loc_15CEA:
mov     es, seg_2788A
cmp     es:byte_22313, 0
jz      short loc_15CF9
jmp     loc_15E17

loc_15CF9:
mov     ax, 0F8h        ; "8"
mov     es, seg_27886
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
cmp     word ptr es:[bx+1B0Eh], 6
jz      short loc_15D16
jmp     loc_15E17

loc_15D16:
cmp     word ptr es:[bx+1B22h], 6
jz      short loc_15D21
jmp     loc_15E17

loc_15D21:
cmp     word ptr es:[bx+1B26h], 6
jz      short loc_15D2C
jmp     loc_15E17

loc_15D2C:
cmp     word ptr es:[bx+1B3Ah], 6
jz      short loc_15D37
jmp     loc_15E17

loc_15D37:
cmp     word ptr es:[bx+1B0Ch], 6
jnz     short loc_15D42
jmp     loc_15E17

loc_15D42:
cmp     word ptr es:[bx+1B10h], 6
jnz     short loc_15D4D
jmp     loc_15E17

loc_15D4D:
cmp     word ptr es:[bx+1B38h], 6
jnz     short loc_15D58
jmp     loc_15E17

loc_15D58:
cmp     word ptr es:[bx+1B3Ch], 6
jnz     short loc_15D63
jmp     loc_15E17

loc_15D63:
mov     es, seg_2788A
assume es:seg008
mov     es:byte_22313, 1
mov     ax, 792h
push    ax
mov     cx, 160h
push    cx
mov     dx, 16h
push    dx
sub     bx, bx
push    bx
call    sub_2016C
add     sp, 8
mov     ax, 9Ch
push    ax
mov     es, seg_2788C
push    es:word_22298
push    es:word_22296
mov     ax, 32h ; '2'
push    ax
mov     ax, 1
push    ax
call    sub_194BA
add     sp, 0Ah
call    sub_20CDA
sub     ax, ax
push    ax
mov     cx, 160h
push    cx
mov     cx, 16h
push    cx
mov     cx, 792h
push    cx
call    sub_200C6
add     sp, 8
mov     [bp+var_6E], 0
jmp     short loc_15DCD
align 2

loc_15DCA:
inc     [bp+var_6E]

loc_15DCD:
cmp     [bp+var_6E], 0C8h
jnb     short loc_15DEA
mov     bx, [bp+var_6E]
mov     ax, bx
shl     bx, 1
add     bx, ax
shl     bx, 1
add     bx, ax
shl     bx, 1
cmp     word ptr [bx+63Ch], 5Bh ; '['
jnz     short loc_15DCA

loc_15DEA:
mov     bx, [bp+var_6E]
mov     ax, bx
shl     bx, 1
add     bx, ax
shl     bx, 1
add     bx, ax
shl     bx, 1
mov     word ptr [bx+63Eh], 320h
mov     word ptr [bx+640h], 1F4h
mov     word ptr [bx+642h], 64h ; 'd'
mov     ax, 1Eh
push    ax
call    sub_19288
add     sp, 2

loc_15E17:
mov     es, seg_27886
cmp     es:word_2232E, 31h ; '1'
jz      short loc_15E26
jmp     loc_15F40

loc_15E26:
mov     ax, 0F8h
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
cmp     word ptr es:[bx+1B24h], 6
jz      short loc_15E3F
jmp     loc_15F40

loc_15E3F:
mov     es, seg_2788A
assume es:seg008
cmp     es:byte_22313, 1
jz      short loc_15E4E
jmp     loc_15F40

loc_15E4E:
cmp     es:byte_22314, 0
jz      short loc_15E59
jmp     loc_15F40

loc_15E59:
mov     es:byte_22314, 1
mov     ax, 6
mov     [bp+var_134], ax
mov     es, seg_27892
assume es:dseg
mov     es:[bx+1B7Ch], ax
push    ax
mov     ax, 5
mov     [bp+var_130], ax
push    ax
call    sub_17A68
add     sp, 4
mov     [bp+var_138], 0
jmp     short loc_15EEB

loc_15E88:
mov     ax, offset byte_2230C
mov     es, seg_27886
assume es:seg008
mul     es:word_2232E
mov     bx, [bp+si+var_1D2]
mov     dx, bx
mov     cx, bx
shl     bx, 1
shl     bx, 1
add     bx, cx
shl     bx, 1
add     bx, cx
add     bx, [bp+si+var_1D4]
add     bx, ax
shl     bx, 1
mov     es, seg_27892
assume es:dseg
mov     ax, [bp+si+var_1D0]
mov     es:[bx+1AEEh], ax
push    dx
push    [bp+si+var_1D4]
call    sub_1AE6E
add     sp, 4
cmp     [bp+var_138], 3
jbe     short loc_15EE7
mov     ax, 6
push    ax
call    sub_20FAB
add     sp, 2
mov     ax, 19h
push    ax
call    sub_19288
add     sp, 2

loc_15EE7:
inc     [bp+var_138]

loc_15EEB:
mov     si, [bp+var_138]
mov     ax, si
shl     si, 1
add     si, ax
shl     si, 1
cmp     [bp+si+var_1D0], 0FFFFh
jnz     short loc_15E88
mov     ax, 32h ; '2'
push    ax
call    sub_19288
add     sp, 2
call    sub_174F6
mov     ax, 0F8h        ; "8"
mov     es, seg_27886
assume es:seg008
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
mov     word ptr es:[bx+1B0Eh], 6
mov     ax, 1
mov     [bp+var_134], ax
push    ax
mov     ax, 5
mov     [bp+var_130], ax
push    ax
call    sub_1AE6E
add     sp, 4

loc_15F40:
mov     es, seg_27886
assume es:seg008
cmp     es:word_2232E, 19h
jz      short loc_15F4F
jmp     loc_1607C

loc_15F4F:
mov     es, seg_2788A
cmp     es:byte_222FA, 0
jz      short loc_15F5E
jmp     loc_1607C

loc_15F5E:
cmp     es:byte_222F9, 1
jz      short loc_15F69
jmp     loc_1607C

loc_15F69:
mov     ax, 0F8h        ; "8"
mov     es, seg_27886
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
cmp     word ptr es:[bx+1B66h], 6
jz      short loc_15F86
jmp     loc_1607C

loc_15F86:
mov     es, seg_2788A
assume es:seg008
mov     es:byte_222FA, 1
mov     ax, 32h ; '2'
push    ax
call    sub_19288
add     sp, 2
mov     [bp+var_138], 0
jmp     short loc_15FDC

loc_15FA4:
mov     ax, 6
push    ax
call    sub_20FAB
add     sp, 2
mov     si, [bp+var_138]
mov     ax, si
shl     si, 1
add     si, ax
shl     si, 1
push    [bp+si+var_12C]
push    [bp+si+var_12E]
call    sub_1AE6E
add     sp, 4
mov     ax, 19h
push    ax
call    sub_19288
add     sp, 2

loc_15FD8:
inc     [bp+var_138]

loc_15FDC:
mov     si, [bp+var_138]
mov     ax, si
shl     si, 1
add     si, ax
shl     si, 1
cmp     [bp+si+var_12A], 0FFFFh
jz      short loc_1603A
mov     ax, offset byte_2230C
mov     es, seg_27886
mul     es:word_2232E
mov     bx, [bp+si+var_12C]
mov     dx, bx
mov     cx, bx
shl     bx, 1
shl     bx, 1
add     bx, cx
shl     bx, 1
add     bx, cx
add     bx, [bp+si+var_12E]
add     bx, ax
shl     bx, 1
mov     es, seg_27892
assume es:dseg
mov     ax, [bp+si+var_12A]
mov     es:[bx+1AEEh], ax
cmp     ax, 6
jz      short loc_1602A
jmp     loc_15FA4

loc_1602A:
push    dx
push    [bp+si+var_12E]
call    sub_17A68
add     sp, 4
jmp     short loc_15FD8
align 2

loc_1603A:
mov     ax, 32h ; '2'
push    ax
call    sub_19288
add     sp, 2
call    sub_174F6
mov     ax, 0F8h        ; "8"
mov     es, seg_27886
assume es:seg008
mul     es:word_2232E
mov     bx, ax
mov     es, seg_27892
assume es:dseg
mov     word ptr es:[bx+1B50h], 6
mov     ax, 4
mov     [bp+var_134], ax
push    ax
mov     ax, 5
mov     [bp+var_130], ax
push    ax
call    sub_1AE6E
add     sp, 4

loc_1607C:
pop     si
mov     sp, bp
pop     bp
retf
sub_14762 endp

align 2


; Attributes: bp-based frame

sub_16082 proc far

var_1A= word ptr -1Ah
var_E= word ptr -0Eh
var_C= word ptr -0Ch
var_A= word ptr -0Ah
var_4= word ptr -4
var_2= word ptr -2
arg_0= dword ptr  6
arg_4= byte ptr  0Ah

push    bp
mov     bp, sp
sub     sp, 1Ah
mov     [bp+var_4], 0
jmp     short loc_16093
align 2

loc_16090:
inc     [bp+var_4]

loc_16093:
cmp     [bp+var_4], 0C8h
jnb     short loc_160B5
les     bx, [bp+arg_0]
assume es:nothing
mov     ax, es:[bx]
mov     bx, [bp+var_4]
mov     cx, bx
shl     bx, 1
add     bx, cx
shl     bx, 1
add     bx, cx
shl     bx, 1
cmp     [bx+63Ch], ax
jnz     short loc_16090

loc_160B5:
cmp     [bp+var_4], 0C8h
jnz     short loc_160CE
mov     ax, 1071h
push    ds
push    ax              ; char *
call    _printf
add     sp, 4
call    sub_1C48C

loc_160CE:
mov     bx, [bp+var_4]
mov     ax, bx
shl     bx, 1
add     bx, ax
shl     bx, 1
add     bx, ax
shl     bx, 1
mov     ax, [bx+63Eh]
mov     [bp+var_1A], ax
mov     es, seg_2788E
assume es:seg008
mov     ax, es:word_2232C
cmp     [bx+642h], ax
jnb     short loc_160FC
sub     ax, [bx+642h]
mov     [bp+var_A], ax
jmp     short loc_16101
align 2

loc_160FC:
mov     [bp+var_A], 0

loc_16101:
mov     es, seg_2788A
cmp     es:byte_222B6, 1
jnz     short loc_16142
les     bx, [bp+arg_0]
assume es:nothing
cmp     word ptr es:[bx], 55h ; 'U'
jz      short loc_16122
cmp     word ptr es:[bx], 57h ; 'W'
jz      short loc_16122
cmp     word ptr es:[bx], 5Fh ; '_'
jnz     short loc_16142

loc_16122:
mov     es, seg_2788E
assume es:seg008
mov     ax, es:word_2232C
shl     ax, 1
mov     bx, [bp+var_4]
mov     cx, bx
shl     bx, 1
add     bx, cx
shl     bx, 1
add     bx, cx
shl     bx, 1
sub     ax, [bx+642h]
mov     [bp+var_A], ax

loc_16142:
mov     es, seg_2788A
cmp     es:byte_222BD, 1
jnz     short loc_16177
les     bx, [bp+arg_0]
assume es:nothing
cmp     word ptr es:[bx], 7Ah ; 'z'
jnz     short loc_16177
mov     es, seg_2788E
assume es:seg008
mov     ax, es:word_2232C
shl     ax, 1
mov     bx, [bp+var_4]
mov     cx, bx
shl     bx, 1
add     bx, cx
shl     bx, 1
add     bx, cx
shl     bx, 1
sub     ax, [bx+642h]
mov     [bp+var_A], ax

loc_16177:
cmp     [bp+var_A], 0
jnz     short loc_1619A
mov     ax, 109Ah
push    ds
push    ax
call    sub_19D80
add     sp, 4
mov     ax, 0Ah
push    ax
call    sub_19288
add     sp, 2
mov     sp, bp
pop     bp
retf

loc_1619A:
mov     es, seg_27890
mov     ax, es:word_222A6
mov     bx, [bp+var_4]
mov     cx, bx
shl     bx, 1
add     bx, cx
shl     bx, 1
add     bx, cx
shl     bx, 1
cmp     [bx+640h], ax
jbe     short loc_161C2
sub     ax, [bx+640h]
neg     ax
mov     [bp+var_2], ax
jmp     short loc_161C7

loc_161C2:
mov     [bp+var_2], 0

loc_161C7:
mov     es, seg_27894
push    es:word_22294
mov     es, seg_27888
push    es:word_22292
call    sub_1AE6E
add     sp, 4
les     bx, [bp+arg_0]
assume es:nothing
push    word ptr es:[bx]
call    sub_19626
add     sp, 2
cmp     [bp+arg_4], 1
jnz     short loc_16200
mov     es, seg_27888
assume es:seg008
inc     es:word_22292
jmp     short loc_16233

loc_16200:
cmp     [bp+arg_4], 2
jnz     short loc_16212
mov     es, seg_27888
dec     es:word_22292
jmp     short loc_16233
align 2

loc_16212:
cmp     [bp+arg_4], 3
jnz     short loc_16224
mov     es, seg_27894
inc     es:word_22294
jmp     short loc_16233
align 2

loc_16224:
cmp     [bp+arg_4], 4
jnz     short loc_16233
mov     es, seg_27894
dec     es:word_22294

loc_16233:
les     bx, [bp+arg_0]
assume es:nothing
push    word ptr es:[bx]
mov     es, seg_27894
assume es:seg008
push    es:word_22294
mov     es, seg_27888
push    es:word_22292
call    sub_1AD78
add     sp, 6
mov     ax, 0Ah
push    ax
call    sub_1F9E2
add     sp, 2
mov     ax, 9
push    ax
call    sub_20FAB
add     sp, 2
mov     es, seg_27888
mov     ax, es:word_22292
shl     ax, 1
shl     ax, 1
add     ax, 12h
mov     [bp+var_C], ax
mov     cl, 5
mov     es, seg_27894
mov     ax, es:word_22294
shl     ax, cl
add     ax, 18h
mov     [bp+var_E], ax
mov     es, seg_278A2
mov     ax, es:word_2229A
mov     dx, es:word_2229C
add     ax, 87Ah
push    dx
push    ax
mov     ax, 4Ch ; 'L'
push    ax
call    sub_1F737
add     sp, 6
mov     al, 11h
push    ax
mov     ax, 4Ch ; 'L'
push    ax
mov     ax, 20h ; ' '
push    ax
mov     ax, 2
push    ax
mov     ax, 50h ; 'P'
mul     [bp+var_E]
add     ax, [bp+var_C]
push    ax
call    sub_20256
add     sp, 0Ah
mov     ax, 5
push    ax
call    sub_1F9E2
add     sp, 2
mov     ax, [bp+var_1A]
cmp     [bp+var_A], ax
jnb     short loc_162E5
jmp     loc_1638C

loc_162E5:
mov     al, 0DDh
push    ax
mov     ax, 10h
push    ax
mov     ax, 3
push    ax
mov     ax, 5CC7h
push    ax
call    sub_1FCD9
add     sp, 8
mov     al, 0FFh
push    ax
mov     ax, 3
push    ax
sub     ax, ax
mov     [bp+var_1A], ax
push    ax
mov     ax, 128h
mov     [bp+var_E], ax
push    ax
mov     ax, 47h ; 'G'
mov     [bp+var_C], ax
push    ax
call    sub_1B8D6
add     sp, 0Ah
les     bx, [bp+arg_0]
assume es:nothing
mov     word ptr es:[bx], 6
call    sub_1A1E4
mov     es, seg_2788A
assume es:seg008
cmp     es:byte_222C1, 1
jnz     short loc_16350
mov     bx, [bp+var_4]
mov     ax, bx
shl     bx, 1
add     bx, ax
shl     bx, 1
add     bx, ax
shl     bx, 1
mov     ax, [bx+644h]
shl     ax, 1
jmp     short loc_16363
align 2

loc_16350:
mov     bx, [bp+var_4]
mov     ax, bx
shl     bx, 1
add     bx, ax
shl     bx, 1
add     bx, ax
shl     bx, 1
mov     ax, [bx+644h]

loc_16363:
mov     es, seg_27896
add     es:word_22332, ax
mov     al, 4
push    ax
call    sub_1B96C
add     sp, 2
mov     ax, 14h
push    ax
call    sub_1F9E2
add     sp, 2
push    cs
call    near ptr sub_14762
mov     sp, bp
pop     bp
retf
align 2

loc_1638C:
mov     al, 0DDh
push    ax
mov     ax, 10h
push    ax
mov     ax, 4
push    ax
mov     ax, 5CC5h
push    ax
call    sub_1FCD9
add     sp, 8
mov     al, 0FFh
push    ax
mov     ax, 4
push    ax
mov     ax, [bp+var_A]
sub     [bp+var_1A], ax
push    [bp+var_1A]
mov     ax, 128h
push    ax
mov     ax, 45h ; 'E'
push    ax
call    sub_1B8D6
add     sp, 0Ah
les     bx, [bp+arg_0]
assume es:nothing
push    word ptr es:[bx]
mov     es, seg_27894
assume es:seg008
push    es:word_22294
mov     es, seg_27888
push    es:word_22292
call    sub_1AD78
add     sp, 6
mov     es, seg_27888
mov     ax, es:word_22292
shl     ax, 1
shl     ax, 1
add     ax, 12h
mov     [bp+var_C], ax
mov     cl, 5
mov     es, seg_27894
mov     ax, es:word_22294
shl     ax, cl
add     ax, 18h
mov     [bp+var_E], ax
mov     es, seg_278A2
mov     ax, es:word_2229A
mov     dx, es:word_2229C
add     ah, 7Dh ; '}'
push    dx
push    ax
mov     ax, 4Ch ; 'L'
push    ax
call    sub_1F737
add     sp, 6
sub     al, al
push    ax
mov     ax, 4Ch ; 'L'
push    ax
mov     cx, 20h ; ' '
push    cx
mov     dx, 2
push    dx
mov     ax, 50h ; 'P'
mul     [bp+var_E]
add     ax, [bp+var_C]
push    ax
call    sub_20256
add     sp, 0Ah
mov     ax, 0Ah
push    ax
call    sub_1F9E2
add     sp, 2
mov     ax, 0Ah
push    ax
call    sub_20FAB
add     sp, 2
mov     es, seg_27888
mov     ax, es:word_22292
shl     ax, 1
shl     ax, 1
add     ax, 12h
mov     [bp+var_C], ax
mov     cl, 5
mov     es, seg_27894
mov     ax, es:word_22294
shl     ax, cl
add     ax, 18h
mov     [bp+var_E], ax
mov     es, seg_278A2
mov     ax, es:word_2229A
mov     dx, es:word_2229C
add     ax, 87Ah
push    dx
push    ax
mov     ax, 4Ch ; 'L'
push    ax
call    sub_1F737
add     sp, 6
mov     al, 11h
push    ax
mov     ax, 4Ch ; 'L'
push    ax
mov     ax, 20h ; ' '
push    ax
mov     ax, 2
push    ax
mov     ax, 50h ; 'P'
mul     [bp+var_E]
add     ax, [bp+var_C]
push    ax
call    sub_20256
add     sp, 0Ah
mov     ax, 5
push    ax
call    sub_1F9E2
add     sp, 2
mov     ax, [bp+var_2]
mov     es, seg_2789E
cmp     es:word_22328, ax
ja      short loc_16522
mov     es:word_22328, 0
mov     al, 1
push    ax
call    sub_1B96C
add     sp, 2
les     bx, [bp+arg_0]
assume es:nothing
push    word ptr es:[bx]
mov     es, seg_27894
assume es:seg008
push    es:word_22294
mov     es, seg_27888
push    es:word_22292
call    sub_1AD78
add     sp, 6
mov     ax, 50h ; 'P'
push    ax
call    sub_1F9E2
add     sp, 2
call    sub_197AC
mov     sp, bp
pop     bp
retf

loc_16522:
sub     es:word_22328, ax
mov     al, 1
push    ax
call    sub_1B96C
add     sp, 2
jmp     loc_16233
sub_16082 endp

align 2



sub_16536 proc far
push    di
mov     es, seg_2789E
mov     es:word_22328, 3E8h
mov     ax, offset byte_222F4
mov     es, seg_2788E
mov     es:word_2232C, ax
mov     es, seg_27890
mov     es:word_222A6, ax
sub     ax, ax
mov     es, seg_27896
mov     es:word_22332, ax
mov     es, seg_2789A
mov     es:word_222AC, ax
mov     es, seg_2789C
mov     es:word_22330, ax
mov     es, seg_27898
mov     es:word_2232A, ax
mov     es, seg_278A6
mov     es:word_22290, ax
mov     ax, (offset word_22290+1)
mov     es, seg_278A0
mov     es:word_22326, ax
mov     es, seg_27886
mov     es:word_2232E, ax
mov     es, seg_27888
mov     es:word_22292, 5
mov     es, seg_27894
mov     es:word_22294, 0Ah
sub     ax, ax
mov     es, seg_2788A
mov     cx, 64h ; 'd'
push    es
mov     di, 1Eh
rep stosb
pop     es
assume es:nothing
mov     al, 5
mov     es:21h, al
mov     es:22h, al
pop     di
retf
sub_16536 endp




sub_165C4 proc far
push    di
mov     es, seg_2789E
assume es:seg008
mov     es:word_22328, 1F40h
mov     es, seg_2788E
mov     es:word_2232C, 186h
mov     es, seg_27890
mov     es:word_222A6, 1CCh
mov     es, seg_27896
mov     es:word_22332, 7D0h
mov     es, seg_2789A
mov     es:word_222AC, 8
mov     es, seg_27898
mov     es:word_2232A, 3
mov     es, seg_278A6
mov     es:word_22290, 0Ch
mov     es, seg_278A0
mov     es:word_22326, 32h ; '2'
mov     es, seg_27886
mov     es:word_2232E, 29h ; ')'
mov     ax, (offset word_22294+1)
mov     es, seg_2789C
mov     es:word_22330, ax
mov     es, seg_27888
mov     es:word_22292, ax
mov     es, seg_27894
mov     es:word_22294, 1
sub     ax, ax
mov     es, seg_2788A
mov     cx, 64h ; 'd'
push    es
mov     di, 1Eh
rep stosb
pop     es
assume es:nothing
mov     al, 3
mov     es:21h, al
mov     es:22h, al
mov     al, 1
mov     es:23h, al
mov     es:24h, al
mov     es:25h, al
mov     es:26h, al
mov     es:28h, al
sub     al, al
mov     es:1Fh, al
mov     es:2Ah, al
mov     es:2Bh, al
mov     es:2Ch, al
mov     es:2Dh, al
mov     es:2Eh, al
pop     di
retf
sub_165C4 endp



; Attributes: noreturn bp-based frame

; int __cdecl main(int argc, const char **argv, const char **envp)
_main proc far

var_8= word ptr -8
var_3= byte ptr -3
argc= word ptr  6
argv= dword ptr  8
envp= dword ptr  0Ch

push    bp
mov     bp, sp
sub     sp, 0Ah
push    di
push    si
mov     di, [bp+argc]
mov     [bp+var_3], 1
call    sub_1C42A
or      di, di
jnz     short loc_166AD
jmp     loc_167C2

loc_166AD:
mov     ax, word ptr [bp+argv]
mov     dx, word ptr [bp+argv+2]
mov     si, ax
mov     [bp+var_8], dx

loc_166B8:
mov     ax, 10BFh
push    ds
push    ax              ; char *
mov     es, [bp+var_8]
push    word ptr es:[si+2]
push    word ptr es:[si] ; char *
call    _stricmp
add     sp, 8
or      ax, ax
jnz     short loc_166F6
mov     ax, 10C5h
push    ds
push    ax              ; char *
call    _printf
add     sp, 4
mov     al, 1
push    ax
sub     al, al
push    ax
sub     ax, ax
push    ax
mov     ax, 14h
push    ax
call    sub_207E0
jmp     loc_167B3
align 2

loc_166F6:
mov     ax, 10F8h
push    ds
push    ax              ; char *
mov     es, [bp+var_8]
push    word ptr es:[si+2]
push    word ptr es:[si] ; char *
call    _stricmp
add     sp, 8
or      ax, ax
jnz     short loc_16718
mov     [bp+var_3], 2
jmp     loc_167B6

loc_16718:
mov     ax, 10FFh
push    ds
push    ax              ; char *
mov     es, [bp+var_8]
push    word ptr es:[si+2]
push    word ptr es:[si] ; char *
call    _stricmp
add     sp, 8
or      ax, ax
jnz     short loc_1673A
mov     [bp+var_3], 0
jmp     short loc_167B6
align 2

loc_1673A:
mov     ax, 1105h
push    ds
push    ax              ; char *
mov     es, [bp+var_8]
push    word ptr es:[si+2]
push    word ptr es:[si] ; char *
call    _stricmp
add     sp, 8
or      ax, ax
jnz     short loc_1675C
push    cs
call    near ptr sub_165C4
jmp     short loc_167B6
align 2

loc_1675C:
mov     ax, 110Dh
push    ds
push    ax              ; char *
mov     es, [bp+var_8]
push    word ptr es:[si+2]
push    word ptr es:[si] ; char *
call    _stricmp
add     sp, 8
or      ax, ax
jnz     short loc_16784
mov     es, seg_27896
assume es:seg008
mov     es:word_22332, 26ACh
jmp     short loc_167B6

loc_16784:
mov     ax, 111Ch
push    ds
push    ax              ; char *
mov     es, [bp+var_8]
assume es:nothing
push    word ptr es:[si+2]
push    word ptr es:[si] ; char *
call    _stricmp
add     sp, 8
or      ax, ax
jz      short loc_167B6
mov     ax, 1122h
push    ds
push    ax              ; char *
mov     es, [bp+var_8]
push    word ptr es:[si+2]
push    word ptr es:[si] ; char *
call    _stricmp

loc_167B3:
add     sp, 8

loc_167B6:
add     si, 4
mov     ax, [bp+var_8]
dec     di
jz      short loc_167C2
jmp     loc_166B8

loc_167C2:
mov     al, [bp+var_3]
push    ax
call    sub_20DA0
add     sp, 2
mov     ax, 32h ; '2'
push    ax
call    sub_1F9E2
add     sp, 2
call    sub_1F62D
mov     es, seg_2788C
assume es:seg008
push    es:word_22298
push    es:word_22296   ; void *
mov     ax, 1129h
push    ds
push    ax              ; char *
call    sub_1C0F4
add     sp, 8
cmp     word_22584, 0FFFFh
jz      short loc_1682B
mov     si, 244h

loc_16804:
mov     es, seg_278A4
mov     ax, es:word_2229E
mov     dx, es:word_222A0
add     ax, [si]
push    dx
push    ax              ; void *
push    word ptr [si-2]
push    word ptr [si-4] ; char *
call    sub_1C0F4
add     sp, 8
add     si, 6
cmp     word ptr [si], 0FFFFh
jnz     short loc_16804

loc_1682B:
cmp     word_22590, 0FFFFh
jz      short loc_1685C
mov     si, 250h

loc_16835:
mov     es, seg_278A2
mov     ax, es:word_2229A
mov     dx, es:word_2229C
add     ax, [si]
push    dx
push    ax              ; void *
push    word ptr [si-2]
push    word ptr [si-4] ; char *
call    sub_1C0F4
add     sp, 8
add     si, 6
cmp     word ptr [si], 0FFFFh
jnz     short loc_16835

loc_1685C:
mov     ax, 1130h
push    ds
push    ax              ; char *
call    sub_19A42
add     sp, 4
sub     al, al
push    ax
mov     ax, 7E90h
push    ax
mov     ax, 7D00h
push    ax
call    sub_1A986
add     sp, 6
call    sub_1ABE6
call    sub_1BB2E
mov     ax, 908h
push    ds
push    ax
call    sub_1FB8A
add     sp, 4
mov     ax, 0Ch
push    ax
call    sub_20FAB
add     sp, 2
call    sub_1A68E
call    sub_1C48C
_main endp

pop     si
pop     di
mov     sp, bp
pop     bp
retf
align 2
seg000 ends


; Segment type: Pure code
seg001 segment byte public 'CODE' use16
assume cs:seg001
assume es:nothing, ss:nothing, ds:dseg, fs:nothing, gs:nothing


; Attributes: bp-based frame

sub_168B0 proc far

var_1C= word ptr -1Ch
var_1A= word ptr -1Ah
var_18= byte ptr -18h
var_17= byte ptr -17h
var_16= byte ptr -16h
var_15= byte ptr -15h
var_14= byte ptr -14h
var_13= byte ptr -13h
var_12= byte ptr -12h
var_11= byte ptr -11h
var_10= byte ptr -10h
var_F= byte ptr -0Fh
var_E= byte ptr -0Eh
var_D= byte ptr -0Dh
var_C= byte ptr -0Ch
var_B= byte ptr -0Bh
var_A= byte ptr -0Ah
var_9= byte ptr -9
var_8= byte ptr -8
var_6= word ptr -6
var_4= word ptr -4
var_2= word ptr -2

push    bp
mov     bp, sp
sub     sp, 1Ch
push    di
push    si
mov     al, 3
mov     [bp+var_18], al
mov     [bp+var_17], al
mov     [bp+var_16], al
mov     al, 4
mov     [bp+var_14], al
mov     [bp+var_13], al
mov     [bp+var_12], al
mov     [bp+var_11], al
mov     [bp+var_10], al
mov     [bp+var_F], al
mov     [bp+var_E], al
mov     [bp+var_D], al
mov     al, 1
mov     [bp+var_C], al
mov     [bp+var_B], al
mov     [bp+var_A], al
mov     [bp+var_9], al
mov     al, 5
mov     [bp+var_15], al
mov     [bp+var_8], al
mov     ax, 32h ; '2'
push    ax
push    cs
call    near ptr sub_19288
add     sp, 2
mov     ax, 792h
push    ax
mov     cx, 160h
push    cx
mov     dx, 16h
push    dx
sub     bx, bx
push    bx
call    sub_2016C
add     sp, 8
mov     ax, 82h
push    ax
mov     es, seg_278A8
assume es:seg008
push    es:word_22298
push    es:word_22296
mov     ax, 32h ; '2'
push    ax
mov     ax, 5
push    ax
push    cs
call    near ptr sub_194BA
add     sp, 0Ah
call    sub_20CDA
sub     ax, ax
push    ax
mov     cx, 160h
push    cx
mov     cx, 16h
push    cx
mov     cx, 792h
push    cx
call    sub_200C6
add     sp, 8
mov     al, 88h
push    ax
mov     ax, 0D1FCh
push    ax
mov     ax, 0D05Ch
push    ax
push    cs
call    near ptr sub_1A986
add     sp, 6
push    cs
call    near ptr sub_1ABE6
mov     di, 5
mov     [bp+var_4], di
mov     ax, 0F8h        ; "8"
mov     es, seg_278AA
mul     es:word_2232E
mov     bx, ax
mov     es, seg_278AC
assume es:dseg
mov     word ptr es:[bx+1B66h], 6
sub     si, si

loc_16989:
push    [bp+var_4]
push    di
mov     al, [bp+si+var_18]
push    ax
mov     [bp+var_1A], ax
push    cs
call    near ptr sub_1A276
add     sp, 6
cmp     byte ptr [bp+var_1A], 1
jnz     short loc_169A2
inc     di

loc_169A2:
cmp     [bp+si+var_18], 2
jnz     short loc_169A9
dec     di

loc_169A9:
cmp     [bp+si+var_18], 3
jnz     short loc_169B2
inc     [bp+var_4]

loc_169B2:
cmp     [bp+si+var_18], 4
jnz     short loc_169BB
dec     [bp+var_4]

loc_169BB:
inc     si
cmp     [bp+si+var_18], 5
jnz     short loc_16989
inc     si
mov     di, 8
push    di
mov     ax, 5
mov     [bp+var_2], ax
push    ax
push    cs
call    near ptr sub_1AE6E
add     sp, 4
mov     [bp+var_6], 85h
sub     al, al
push    ax
lea     ax, [bp+var_6]
push    ss
push    ax
call    sub_16082
add     sp, 6
mov     es, seg_278AA
assume es:seg008
cmp     es:word_2232E, 20h ; ' '
jz      short loc_169F9
jmp     loc_16ADA

loc_169F9:
mov     es, seg_278AE
cmp     es:word_22292, 5
jz      short loc_16A08
jmp     loc_16ADA

loc_16A08:
mov     es, seg_278B0
cmp     es:word_22294, 9
jz      short loc_16A17
jmp     loc_16ADA

loc_16A17:
mov     ax, 792h
push    ax
mov     cx, 160h
push    cx
mov     dx, 16h
push    dx
sub     bx, bx
push    bx
call    sub_2016C
add     sp, 8
mov     ax, 83h
push    ax
mov     es, seg_278A8
push    es:word_22298
push    es:word_22296
mov     ax, 32h ; '2'
push    ax
mov     ax, 5
push    ax
push    cs
call    near ptr sub_194BA
add     sp, 0Ah
call    sub_20CDA
sub     ax, ax
push    ax
mov     ax, 160h
push    ax
mov     ax, 16h
push    ax
mov     ax, 792h
push    ax
call    sub_200C6
add     sp, 8
cmp     [bp+si+var_18], 5
jz      short loc_16AAA

loc_16A71:
push    di
push    [bp+var_2]
mov     al, [bp+si+var_18]
push    ax
mov     [bp+var_1C], ax
push    cs
call    near ptr sub_1A276
add     sp, 6
cmp     byte ptr [bp+var_1C], 1
jnz     short loc_16A8C
inc     [bp+var_2]

loc_16A8C:
cmp     [bp+si+var_18], 2
jnz     short loc_16A95
dec     [bp+var_2]

loc_16A95:
cmp     [bp+si+var_18], 3
jnz     short loc_16A9C
inc     di

loc_16A9C:
cmp     [bp+si+var_18], 4
jnz     short loc_16AA3
dec     di

loc_16AA3:
inc     si
cmp     [bp+si+var_18], 5
jnz     short loc_16A71

loc_16AAA:
sub     ax, ax
push    ax
mov     ax, 9
push    ax
push    cs
call    near ptr sub_1AE6E
add     sp, 4
sub     al, al
push    ax
mov     ax, 7E90h
push    ax
mov     ax, 7D00h
push    ax
push    cs
call    near ptr sub_1A986
add     sp, 6
push    cs
call    near ptr sub_1ABE6
mov     ax, 0Ah
push    ax
call    sub_1F9E2
add     sp, 2

loc_16ADA:
pop     si
pop     di
mov     sp, bp
pop     bp
retf
sub_168B0 endp



; Attributes: bp-based frame

sub_16AE0 proc far

var_2E= word ptr -2Eh
var_2C= word ptr -2Ch
var_2A= word ptr -2Ah
var_28= word ptr -28h
var_26= word ptr -26h
var_24= word ptr -24h
var_22= word ptr -22h
var_20= word ptr -20h
var_1E= word ptr -1Eh
var_1C= word ptr -1Ch
var_1A= word ptr -1Ah
var_18= word ptr -18h
var_16= word ptr -16h
var_14= word ptr -14h
var_12= word ptr -12h
var_10= word ptr -10h
var_E= word ptr -0Eh
var_C= word ptr -0Ch
var_A= word ptr -0Ah
var_8= word ptr -8
var_6= word ptr -6
var_4= byte ptr -4
var_3= byte ptr -3
var_2= byte ptr -2
var_1= byte ptr -1

push    bp
mov     bp, sp
sub     sp, 2Eh
push    si
mov     [bp+var_20], 7
mov     [bp+var_1C], 9
mov     [bp+var_1A], 3
mov     [bp+var_16], 5
mov     ax, 8
mov     [bp+var_18], ax
mov     [bp+var_14], ax
mov     al, 2
mov     [bp+var_4], al
mov     [bp+var_3], al
mov     [bp+var_2], 3
mov     [bp+var_1], 5
mov     ax, 4
mov     [bp+var_26], ax
mov     [bp+var_22], ax
mov     [bp+var_1E], ax
mov     [bp+var_A], ax
mov     ax, 6
mov     [bp+var_24], ax
mov     [bp+var_E], ax
mov     [bp+var_12], 0

loc_16B31:
mov     ax, offset byte_2230C
mov     es, seg_278AA
mul     es:word_2232E
mov     bx, ax
mov     ax, [bp+var_E]
mov     cx, ax
shl     ax, 1
shl     ax, 1
add     ax, cx
shl     ax, 1
add     ax, cx
add     bx, ax
add     bx, [bp+var_A]
shl     bx, 1
mov     es, seg_278AC
assume es:dseg
mov     word ptr es:[bx+1AEEh], 6
push    [bp+var_E]
push    [bp+var_A]
mov     si, ax
push    cs
call    near ptr sub_1AE6E
add     sp, 4
mov     ax, offset byte_2230C
mov     es, seg_278AA
assume es:seg008
mul     es:word_2232E
add     si, ax
add     si, [bp+var_A]
shl     si, 1
mov     es, seg_278AC
assume es:dseg
mov     word ptr es:[si+1AEEh], 5Bh ; '['
push    [bp+var_E]
push    [bp+var_A]
push    cs
call    near ptr sub_1AE6E
add     sp, 4
inc     [bp+var_12]
cmp     [bp+var_12], 32h ; '2'
jb      short loc_16B31
mov     ax, 1Eh
push    ax
call    sub_1F9E2
add     sp, 2
mov     ax, 792h
push    ax
mov     cx, 160h
push    cx
mov     dx, 16h
push    dx
sub     bx, bx
push    bx
call    sub_2016C
add     sp, 8
mov     ax, 6Eh ; 'n'
push    ax
mov     es, seg_278A8
assume es:seg008
push    es:word_22298
push    es:word_22296
mov     ax, 32h ; '2'
push    ax
mov     ax, 5
push    ax
push    cs
call    near ptr sub_194BA
add     sp, 0Ah
call    sub_20CDA
sub     ax, ax
push    ax
mov     ax, 160h
push    ax
mov     ax, 16h
push    ax
mov     ax, 792h
push    ax
call    sub_200C6
add     sp, 8
mov     [bp+var_12], 1

loc_16C08:
mov     si, [bp+var_12]
shl     si, 1
shl     si, 1
mov     ax, [bp+si+var_26]
mov     [bp+var_A], ax
mov     ax, [bp+si+var_24]
mov     [bp+var_E], ax
mov     [bp+var_2A], 0

loc_16C20:
mov     ax, offset byte_2230C
mov     es, seg_278AA
mul     es:word_2232E
mov     bx, ax
mov     ax, [bp+var_E]
mov     cx, ax
shl     ax, 1
shl     ax, 1
add     ax, cx
shl     ax, 1
add     ax, cx
add     bx, ax
add     bx, [bp+var_A]
shl     bx, 1
mov     es, seg_278AC
assume es:dseg
mov     word ptr es:[bx+1AEEh], 6
push    [bp+var_E]
push    [bp+var_A]
mov     si, ax
push    cs
call    near ptr sub_1AE6E
add     sp, 4
mov     ax, offset byte_2230C
mov     es, seg_278AA
assume es:seg008
mul     es:word_2232E
add     si, ax
add     si, [bp+var_A]
shl     si, 1
mov     es, seg_278AC
assume es:dseg
mov     word ptr es:[si+1AEEh], 5Dh ; ']'
push    [bp+var_E]
push    [bp+var_A]
push    cs
call    near ptr sub_1AE6E
add     sp, 4
inc     [bp+var_2A]
cmp     [bp+var_2A], 0Fh
jb      short loc_16C20
mov     ax, 0Ah
push    ax
call    sub_1F9E2
add     sp, 2
inc     [bp+var_12]
cmp     [bp+var_12], 5
jnb     short loc_16CAA
jmp     loc_16C08

loc_16CAA:
mov     ax, 792h
push    ax
mov     cx, 160h
push    cx
mov     dx, 16h
push    dx
sub     bx, bx
push    bx
call    sub_2016C
add     sp, 8
mov     ax, 6Fh ; 'o'
push    ax
mov     es, seg_278A8
assume es:seg008
push    es:word_22298
push    es:word_22296
mov     ax, 78h ; 'x'
push    ax
mov     cx, 2
push    cx
push    cs
call    near ptr sub_194BA
add     sp, 0Ah
mov     ax, 32h ; '2'
push    ax
call    sub_1F9E2
add     sp, 2
sub     ax, ax
push    ax
mov     cx, 160h
push    cx
mov     cx, 16h
push    cx
mov     cx, 792h
push    cx
call    sub_200C6
add     sp, 8
mov     ax, 7
push    ax
call    sub_20FAB
add     sp, 2
mov     es, seg_278AE
mov     ax, es:word_22292
shl     ax, 1
shl     ax, 1
add     ax, 12h
mov     [bp+var_C], ax
mov     cl, 5
mov     es, seg_278B0
mov     ax, es:word_22294
shl     ax, cl
add     ax, 18h
mov     [bp+var_10], ax
mov     es, seg_278B2
mov     ax, es:word_2229A
mov     dx, es:word_2229C
add     ax, 87Ah
push    dx
push    ax
mov     ax, 4Ch ; 'L'
mov     [bp+var_28], ax
push    ax
call    sub_1F737
add     sp, 6
mov     al, 11h
push    ax
mov     ax, 4Ch ; 'L'
push    ax
mov     ax, 20h ; ' '
mov     [bp+var_8], ax
push    ax
mov     ax, 2
mov     [bp+var_6], ax
push    ax
mov     ax, 50h ; 'P'
mul     [bp+var_10]
add     ax, [bp+var_C]
push    ax
call    sub_20256
add     sp, 0Ah
mov     ax, 28h ; '('
push    ax
call    sub_1F9E2
add     sp, 2
mov     ax, 908h
mov     cx, seg dseg
push    cx
push    ax
call    sub_1FA51
add     sp, 4
sub     al, al
push    ax
mov     ax, 190h
push    ax
mov     ax, 28h ; '('
push    ax
sub     ax, ax
mov     [bp+var_2C], ax
push    ax
call    sub_1FCD9
add     sp, 8
mov     ax, 113Ch
push    ds
push    ax
mov     al, 0FFh
push    ax
mov     cx, 0A0h
push    cx
mov     cx, 12h
mov     [bp+var_C], cx
push    cx
call    sub_20801
add     sp, 0Ah
mov     ax, 1167h
push    ds
push    ax
mov     al, 0FFh
push    ax
mov     ax, 0BEh
mov     [bp+var_10], ax
push    ax
mov     ax, 12h
push    ax
call    sub_20801
add     sp, 0Ah
mov     ax, 3Ch ; '<'
push    ax
call    sub_1F9E2
add     sp, 2
mov     ax, 928h
mov     cx, seg dseg
push    cx
push    ax
call    sub_1FB8A
add     sp, 4
mov     ax, 78h ; 'x'
push    ax
call    sub_1F9E2
add     sp, 2
mov     ax, 928h
mov     cx, seg dseg
push    cx
push    ax
call    sub_1FA51
add     sp, 4
mov     ax, 3Ch ; '<'
push    ax
call    sub_1F9E2
add     sp, 2
mov     es, seg_278B4
push    es:word_222A0
push    es:word_2229E   ; void *
mov     ax, 1192h
push    ds
push    ax              ; char *
push    cs
call    near ptr sub_1C0F4
add     sp, 8
mov     es, seg_278B4
mov     ax, es:word_2229E
mov     dx, es:word_222A0
add     ax, 61A8h
push    dx
push    ax              ; void *
mov     ax, 119Dh
push    ds
push    ax              ; char *
push    cs
call    near ptr sub_1C0F4
add     sp, 8
push    cs
call    near ptr sub_1BB6C
mov     [bp+var_12], 0
jmp     short loc_16E9D
align 2

loc_16E70:
mov     ax, es:[bx+244h]
mov     es, seg_278B4
add     ax, es:word_2229E
mov     dx, es:word_222A0
push    dx
push    ax              ; void *
mov     es, seg_278B6
assume es:dseg
push    word ptr es:[bx+242h]
push    word ptr es:[bx+240h] ; char *
push    cs
call    near ptr sub_1C0F4
add     sp, 8
inc     [bp+var_12]

loc_16E9D:
mov     es, seg_278B6
mov     bx, [bp+var_12]
mov     ax, bx
shl     bx, 1
add     bx, ax
shl     bx, 1
cmp     word ptr es:[bx+244h], 0FFFFh
jnz     short loc_16E70
push    cs
call    near ptr sub_1BB2E
mov     [bp+var_12], 0

loc_16EBD:
mov     si, [bp+var_12]
shl     si, 1
shl     si, 1
mov     ax, [bp+si+var_24]
mov     [bp+var_E], ax
mov     es, seg_278AA
assume es:seg008
mov     cx, ax
mov     dx, ax
shl     cx, 1
shl     cx, 1
add     cx, ax
shl     cx, 1
add     cx, ax
mov     bx, [bp+si+var_26]
mov     [bp+var_A], bx
add     bx, cx
mov     ax, 7Ch ; '|'
mov     cx, dx
mul     es:word_2232E
add     bx, ax
shl     bx, 1
mov     es, seg_278AC
assume es:dseg
mov     word ptr es:[bx+1AEEh], 6
push    cx
push    [bp+var_A]
push    cs
call    near ptr sub_1AE6E
add     sp, 4
inc     [bp+var_12]
cmp     [bp+var_12], 5
jb      short loc_16EBD
sub     al, al
mov     es, seg_278B8
assume es:seg008
mov     es:byte_222B1, al
mov     es:byte_222B2, al
push    cs
call    near ptr sub_19B9C
push    cs
call    near ptr sub_19C8E
mov     es, seg_278BA
mov     es:word_22328, 190h
mov     ax, offset word_2229A
mov     es, seg_278BC
mov     es:word_2232C, ax
mov     es, seg_278BE
mov     es:word_222A6, ax
mov     es, seg_278AA
mov     es:word_2232E, 2
sub     al, al
push    ax
push    cs
call    near ptr sub_1B96C
add     sp, 2
sub     al, al
push    ax
mov     ax, 160h
push    ax
mov     cx, 16h
push    cx
mov     dx, 792h
push    dx
call    sub_1FCD9
add     sp, 8
mov     ax, 28h ; '('
push    ax
call    sub_1F9E2
add     sp, 2
mov     ax, 908h
mov     cx, seg dseg
push    cx
push    ax
call    sub_1FB8A
add     sp, 4
mov     ax, 1Eh
push    ax
call    sub_1F9E2
add     sp, 2
mov     ax, 70h ; 'p'
push    ax
mov     es, seg_278A8
push    es:word_22298
push    es:word_22296
mov     ax, 78h ; 'x'
push    ax
mov     cx, 2
push    cx
push    cs
call    near ptr sub_194BA
add     sp, 0Ah
call    sub_20CDA
mov     ax, 71h ; 'q'
push    ax
mov     es, seg_278A8
push    es:word_22298
push    es:word_22296
mov     ax, 78h ; 'x'
push    ax
mov     cx, 2
push    cx
push    cs
call    near ptr sub_195D8
add     sp, 0Ah
call    sub_20CDA
mov     ax, 72h ; 'r'
push    ax
mov     es, seg_278A8
push    es:word_22298
push    es:word_22296
mov     ax, 78h ; 'x'
push    ax
mov     cx, 2
push    cx
push    cs
call    near ptr sub_195D8
add     sp, 0Ah
call    sub_20CDA
mov     es, seg_278AA
mov     es:word_2232E, 2
push    cs
call    near ptr sub_1B62A
mov     es, seg_278AE
mov     es:word_22292, 2
mov     es, seg_278B0
mov     es:word_22294, 7
push    cs
call    near ptr sub_1A1E4
mov     ax, 1
push    ax
call    sub_20FAB
add     sp, 2
mov     ax, 78h ; 'x'
push    ax
push    cs
call    near ptr sub_19288
add     sp, 2
mov     ax, 792h
push    ax
mov     cx, 160h
push    cx
mov     dx, 16h
push    dx
sub     bx, bx
push    bx
call    sub_2016C
add     sp, 8
mov     ax, 73h ; 's'
push    ax
mov     es, seg_278A8
push    es:word_22298
push    es:word_22296
mov     ax, 78h ; 'x'
push    ax
mov     ax, 7
push    ax
push    cs
call    near ptr sub_194BA
add     sp, 0Ah
call    sub_20CDA
sub     ax, ax
push    ax
mov     cx, 160h
push    cx
mov     cx, 16h
push    cx
mov     cx, 792h
push    cx
call    sub_200C6
add     sp, 8
mov     al, 88h
push    ax
mov     ax, 2846h
push    ax
mov     ax, 26CFh
push    ax
push    cs
call    near ptr sub_1A986
add     sp, 6
push    cs
call    near ptr sub_1ABE6
mov     [bp+var_A], 2
mov     ax, 0F8h        ; "8"
mov     es, seg_278AA
mul     es:word_2232E
mov     bx, ax
mov     ax, offset unk_22346
mov     es, seg_278AC
assume es:dseg
mov     es:[bx+1B74h], ax
mov     [bp+var_E], ax
mov     es:[bx+1B76h], ax
mov     [bp+var_12], 0
jmp     short loc_17122
align 2

loc_170E4:
push    [bp+var_E]
push    [bp+var_A]
mov     al, [bp+si+var_4]
push    ax
mov     [bp+var_2E], ax
push    cs
call    near ptr sub_1A276
add     sp, 6
cmp     byte ptr [bp+var_2E], 1
jnz     short loc_17101
inc     [bp+var_A]

loc_17101:
mov     si, [bp+var_12]
cmp     [bp+si+var_4], 2
jnz     short loc_1710D
dec     [bp+var_A]

loc_1710D:
cmp     [bp+si+var_4], 3
jnz     short loc_17116
inc     [bp+var_E]

loc_17116:
cmp     [bp+si+var_4], 4
jnz     short loc_1711F
dec     [bp+var_E]

loc_1711F:
inc     [bp+var_12]

loc_17122:
mov     si, [bp+var_12]
cmp     [bp+si+var_4], 5
jnz     short loc_170E4
mov     ax, offset byte_2230C
mov     es, seg_278AA
assume es:seg008
mul     es:word_2232E
mov     bx, ax
mov     ax, [bp+var_E]
mov     cx, ax
shl     ax, 1
shl     ax, 1
add     ax, cx
shl     ax, 1
add     ax, cx
add     bx, ax
add     bx, [bp+var_A]
shl     bx, 1
mov     es, seg_278AC
assume es:dseg
mov     word ptr es:[bx+1AEEh], 15h
sub     al, al
push    ax
mov     ax, 7E90h
push    ax
mov     ax, 7D00h
push    ax
push    cs
call    near ptr sub_1A986
add     sp, 6
push    cs
call    near ptr sub_1ABE6
mov     ax, 0Ah
push    ax
call    sub_1F9E2
add     sp, 2
pop     si
mov     sp, bp
pop     bp
retf
sub_16AE0 endp

align 2


; Attributes: bp-based frame

sub_17182 proc far

var_24= word ptr -24h
var_22= word ptr -22h
var_20= word ptr -20h
var_1E= word ptr -1Eh
var_1C= word ptr -1Ch
var_1A= word ptr -1Ah
var_18= word ptr -18h
var_16= word ptr -16h
var_14= word ptr -14h
var_12= word ptr -12h
var_10= word ptr -10h
var_E= word ptr -0Eh
var_C= word ptr -0Ch
var_8= word ptr -8
var_6= word ptr -6
var_4= word ptr -4
var_2= word ptr -2

push    bp
mov     bp, sp
sub     sp, 24h
push    di
push    si
mov     [bp+var_18], 8
mov     [bp+var_16], 4
mov     ax, 7
mov     [bp+var_14], ax
mov     [bp+var_10], ax
mov     [bp+var_C], ax
mov     ax, 6
mov     [bp+var_1C], ax
mov     [bp+var_12], ax
mov     es, seg_278AC
mov     es:word_260E4, ax
mov     ax, 5
mov     [bp+var_22], ax
mov     [bp+var_20], ax
mov     [bp+var_1E], ax
mov     [bp+var_1A], ax
mov     [bp+var_E], ax
mov     [bp+var_2], ax
mov     [bp+var_4], ax
mov     si, 32h ; '2'

loc_171CC:
mov     ax, 0F8h        ; "8"
mov     es, seg_278AA
assume es:seg008
mul     es:word_2232E
mov     bx, ax
mov     es, seg_278AC
assume es:dseg
mov     word ptr es:[bx+1B66h], 6
mov     ax, 5
push    ax
push    ax
push    cs
call    near ptr sub_1AE6E
add     sp, 4
mov     ax, 0F8h        ; "8"
mov     es, seg_278AA
assume es:seg008
mul     es:word_2232E
mov     bx, ax
mov     es, seg_278AC
assume es:dseg
mov     word ptr es:[bx+1B66h], 5Bh ; '['
mov     ax, 5
push    ax
push    ax
push    cs
call    near ptr sub_1AE6E
add     sp, 4
dec     si
jnz     short loc_171CC
mov     ax, 1Eh
push    ax
call    sub_1F9E2
add     sp, 2
mov     ax, 792h
push    ax
mov     cx, 160h
push    cx
mov     dx, 16h
push    dx
sub     bx, bx
push    bx
call    sub_2016C
add     sp, 8
mov     ax, 96h
push    ax
mov     es, seg_278A8
assume es:seg008
push    es:word_22298
push    es:word_22296
mov     ax, 32h ; '2'
push    ax
mov     cx, 4
push    cx
push    cs
call    near ptr sub_194BA
add     sp, 0Ah
call    sub_20CDA
sub     ax, ax
push    ax
mov     cx, 160h
push    cx
mov     dx, 16h
push    dx
mov     bx, 792h
push    bx
call    sub_200C6
add     sp, 8
mov     ax, 97h
push    ax
mov     es, seg_278A8
push    es:word_22298
push    es:word_22296
mov     ax, 32h ; '2'
push    ax
mov     ax, 5
push    ax
push    cs
call    near ptr sub_194BA
add     sp, 0Ah
call    sub_20CDA
sub     ax, ax
push    ax
mov     ax, 160h
push    ax
mov     ax, 16h
push    ax
mov     ax, 792h
push    ax
call    sub_200C6
add     sp, 8
lea     si, [bp+var_1C]

loc_172B9:
mov     cx, [si-2]
mov     di, [si]
mov     ax, di
mov     dx, di
shl     ax, 1
shl     ax, 1
add     ax, dx
shl     ax, 1
add     ax, dx
mov     [bp+var_24], ax
mov     [bp+var_6], 0Fh
mov     [bp+var_8], si
mov     [bp+var_4], di
mov     [bp+var_2], cx
mov     si, cx

loc_172DF:
mov     ax, offset byte_2230C
mov     es, seg_278AA
mul     es:word_2232E
mov     bx, ax
add     bx, [bp+var_24]
add     bx, si
shl     bx, 1
mov     es, seg_278AC
assume es:dseg
mov     word ptr es:[bx+1AEEh], 6
push    di
push    si
push    cs
call    near ptr sub_1AE6E
add     sp, 4
mov     ax, offset byte_2230C
mov     es, seg_278AA
assume es:seg008
mul     es:word_2232E
mov     bx, ax
add     bx, [bp+var_24]
add     bx, si
shl     bx, 1
mov     es, seg_278AC
assume es:dseg
mov     word ptr es:[bx+1AEEh], 5Dh ; ']'
push    di
push    si
push    cs
call    near ptr sub_1AE6E
add     sp, 4
dec     [bp+var_6]
jnz     short loc_172DF
mov     si, [bp+var_8]
mov     ax, 0Ah
push    ax
call    sub_1F9E2
add     sp, 2
add     si, 4
lea     ax, [bp+var_C]
cmp     si, ax
jnb     short loc_17352
jmp     loc_172B9

loc_17352:
mov     ax, 792h
push    ax
mov     cx, 160h
push    cx
mov     dx, 16h
push    dx
sub     bx, bx
push    bx
call    sub_2016C
add     sp, 8
mov     ax, 98h
push    ax
mov     es, seg_278A8
assume es:seg008
push    es:word_22298
push    es:word_22296
mov     ax, 78h ; 'x'
push    ax
mov     cx, 2
push    cx
push    cs
call    near ptr sub_194BA
add     sp, 0Ah
mov     ax, 32h ; '2'
push    ax
call    sub_1F9E2
add     sp, 2
sub     ax, ax
push    ax
mov     cx, 160h
push    cx
mov     dx, 16h
push    dx
mov     bx, 792h
push    bx
call    sub_200C6
add     sp, 8
mov     ax, 7
push    ax
call    sub_20FAB
add     sp, 2
mov     es, seg_278B2
mov     ax, es:word_2229A
mov     dx, es:word_2229C
add     ax, 87Ah
push    dx
push    ax
mov     ax, 4Ch ; 'L'
push    ax
call    sub_1F737
add     sp, 6
mov     al, 11h
push    ax
mov     ax, 4Ch ; 'L'
push    ax
mov     ax, 20h ; ' '
push    ax
mov     ax, 2
push    ax
mov     ax, 4DA6h
push    ax
call    sub_20256
add     sp, 0Ah
mov     ax, 3Ch ; '<'
push    ax
call    sub_1F9E2
add     sp, 2
mov     ax, 0F8h        ; "8"
mov     es, seg_278AA
mul     es:word_2232E
mov     bx, ax
mov     es, seg_278AC
assume es:dseg
mov     word ptr es:[bx+1B92h], 6
mov     ax, 7
push    ax
mov     ax, 5
push    ax
push    cs
call    near ptr sub_1AE6E
add     sp, 4
mov     ax, 792h
push    ax
mov     cx, 160h
push    cx
mov     dx, 16h
push    dx
sub     bx, bx
push    bx
call    sub_2016C
add     sp, 8
mov     ax, 99h
push    ax
mov     es, seg_278A8
assume es:seg008
push    es:word_22298
push    es:word_22296
mov     ax, 78h ; 'x'
push    ax
mov     ax, 6
push    ax
push    cs
call    near ptr sub_194BA
add     sp, 0Ah
call    sub_20CDA
sub     ax, ax
push    ax
mov     ax, 160h
push    ax
mov     ax, 16h
push    ax
mov     ax, 792h
push    ax
call    sub_200C6
add     sp, 8
mov     ax, 1Eh
push    ax
call    sub_1F9E2
add     sp, 2
lea     si, [bp+var_20]

loc_17489:
mov     ax, offset byte_2230C
mov     es, seg_278AA
mul     es:word_2232E
mov     bx, ax
add     bx, [si-2]
mov     ax, [si]
mov     cx, ax
shl     ax, 1
shl     ax, 1
add     ax, cx
shl     ax, 1
add     ax, cx
add     bx, ax
shl     bx, 1
mov     es, seg_278AC
assume es:dseg
mov     word ptr es:[bx+1AEEh], 6
push    word ptr [si]
push    word ptr [si-2]
push    cs
call    near ptr sub_1AE6E
add     sp, 4
add     si, 4
lea     ax, [bp+var_C]
cmp     si, ax
jb      short loc_17489
sub     al, al
push    ax
mov     ax, 7E90h
push    ax
mov     ax, 7D00h
push    ax
push    cs
call    near ptr sub_1A986
add     sp, 6
push    cs
call    near ptr sub_1ABE6
mov     ax, 0Ah
push    ax
call    sub_1F9E2
add     sp, 2
pop     si
pop     di
mov     sp, bp
pop     bp
retf
sub_17182 endp

align 2


; Attributes: bp-based frame

sub_174F6 proc far

var_15A= byte ptr -15Ah
var_2E= word ptr -2Eh
var_2C= byte ptr -2Ch
var_18= word ptr -18h
var_16= word ptr -16h
var_14= word ptr -14h
var_12= word ptr -12h
var_10= word ptr -10h
var_E= word ptr -0Eh
var_C= word ptr -0Ch
var_A= word ptr -0Ah
var_8= word ptr -8
var_6= word ptr -6
var_4= word ptr -4
var_2= word ptr -2

push    bp
mov     bp, sp
sub     sp, 15Ah
push    di
push    si
mov     [bp+var_18], offset unk_234E9
mov     [bp+var_16], ds
mov     [bp+var_14], offset unk_234F0
mov     [bp+var_12], ds
mov     [bp+var_10], offset unk_234F5
mov     [bp+var_E], ds
mov     [bp+var_C], offset unk_234FA
mov     [bp+var_A], ds
mov     [bp+var_8], offset unk_234FF
mov     [bp+var_6], ds
mov     [bp+var_4], offset unk_23504
mov     [bp+var_2], ds
mov     ax, 792h
push    ax
mov     ax, 160h
push    ax
mov     ax, 16h
push    ax
sub     ax, ax
mov     [bp+var_2E], ax
push    ax
call    sub_2016C
add     sp, 8
mov     es, seg_278AA
assume es:seg008
cmp     es:word_2232E, 0Ah
jnz     short loc_1759D
mov     es, seg_278BA
mov     ax, es:word_22328
sub     ax, 190h
mov     cx, 32h ; '2'
cwd
idiv    cx
mov     es, seg_278C0
mov     cx, es:word_2232A
mov     es, seg_278BE
add     cx, es:word_222A6
shl     cx, 1
mov     es, seg_278BC
mov     dx, es:word_2232C
add     dx, 5535h
mov     bx, dx
shl     dx, 1
add     dx, bx
add     cx, dx
add     cx, ax
mov     es, seg_278C2
add     cx, es:word_222AC
mov     [bp+var_2E], cx

loc_1759D:
mov     es, seg_278AA
cmp     es:word_2232E, 14h
jnz     short loc_175E8
mov     es, seg_278BA
mov     ax, es:word_22328
sub     ax, 320h
mov     cx, 64h ; 'd'
cwd
idiv    cx
mov     es, seg_278BC
mov     cx, es:word_2232C
mov     es, seg_278C0
add     cx, es:word_2232A
sub     cx, 54h ; 'T'
shl     cx, 1
add     cx, ax
mov     es, seg_278C2
add     cx, es:word_222AC
mov     es, seg_278BE
add     cx, es:word_222A6
mov     [bp+var_2E], cx

loc_175E8:
mov     es, seg_278AA
cmp     es:word_2232E, 28h ; '('
jnz     short loc_1763D
mov     es, seg_278BA
mov     ax, es:word_22328
sub     ax, 640h
mov     cx, 0C8h
cwd
idiv    cx
mov     es, seg_278BE
mov     cx, ax
mov     ax, es:word_222A6
sub     ax, 0C6h
cwd
sub     ax, dx
sar     ax, 1
add     cx, ax
mov     es, seg_278C0
mov     ax, es:word_2232A
sub     ax, 2Eh ; '.'
shl     ax, 1
add     cx, ax
mov     es, seg_278BC
add     cx, es:word_2232C
mov     es, seg_278C2
add     cx, es:word_222AC
mov     [bp+var_2E], cx

loc_1763D:
mov     es, seg_278AA
cmp     es:word_2232E, 31h ; '1'
jnz     short loc_176A8
mov     es, seg_278BE
mov     ax, es:word_222A6
sub     ax, 12Ch
cwd
xor     ax, dx
sub     ax, dx
mov     cx, 2
sar     ax, cl
xor     ax, dx
sub     ax, dx
mov     es, seg_278BC
mov     cx, ax
mov     ax, es:word_2232C
sub     ax, 0F0h
cwd
sub     ax, dx
sar     ax, 1
mov     es, seg_278BA
mov     dx, ax
mov     ax, es:word_22328
sub     ax, 0BB8h
mov     bx, 190h
mov     si, dx
cwd
idiv    bx
add     si, ax
add     cx, si
mov     es, seg_278C0
mov     ax, es:word_2232A
add     ax, 1Eh
shl     ax, 1
add     cx, ax
mov     es, seg_278C2
add     cx, es:word_222AC
mov     [bp+var_2E], cx

loc_176A8:
mov     es, seg_278AA
cmp     es:word_2232E, 19h
jnz     short loc_17713
mov     es, seg_278BE
mov     ax, es:word_222A6
sub     ax, 1CCh
cwd
xor     ax, dx
sub     ax, dx
mov     cx, 2
sar     ax, cl
xor     ax, dx
sub     ax, dx
mov     es, seg_278BA
mov     cx, ax
mov     ax, es:word_22328
sub     ax, 0BB8h
mov     bx, 190h
cwd
idiv    bx
mov     es, seg_278BC
mov     dx, ax
mov     ax, es:word_2232C
sub     ax, 15Eh
mov     bx, dx
cwd
sub     ax, dx
sar     ax, 1
add     bx, ax
add     cx, bx
mov     es, seg_278C0
mov     ax, es:word_2232A
add     ax, 1Eh
shl     ax, 1
add     cx, ax
mov     es, seg_278C2
add     cx, es:word_222AC
mov     [bp+var_2E], cx

loc_17713:
cmp     [bp+var_2E], 50h ; 'P'
jb      short loc_17722
mov     es, seg_278B8
inc     es:byte_222B0

loc_17722:
mov     ax, 11C9h
push    ds
push    ax
mov     ax, 78h ; 'x'
push    ax
mov     ax, 7
push    ax
push    cs
call    near ptr sub_193EC
add     sp, 8
call    sub_20CDA
lea     ax, [bp+var_15A]
mov     di, ax
mov     si, 11D6h
push    ss
pop     es
assume es:nothing
mov     cx, 2Ch ; ','
rep movsw
movsb
push    [bp+var_2E]
lea     cx, [bp+var_2C]
push    ss
push    cx
push    cs
call    near ptr sub_1B7D4
add     sp, 6
lea     di, [bp+var_2C]
lea     si, [bp+var_15A]
push    ss
pop     es
push    ds
mov     cx, 0FFFFh
xor     ax, ax
repne scasb
not     cx
sub     di, cx
mov     bx, cx
xchg    di, si
push    ds
push    es
pop     ds
pop     es
mov     cx, 0FFFFh
repne scasb
dec     di
mov     cx, bx
shr     cx, 1
rep movsw
adc     cx, cx
rep movsb
pop     ds
mov     di, 122Fh
lea     si, [bp+var_15A]
push    ds
pop     es
assume es:dseg
push    ds
mov     cx, 0FFFFh
xor     ax, ax
repne scasb
not     cx
sub     di, cx
mov     bx, cx
xchg    di, si
push    ds
push    es
pop     ds
pop     es
assume es:nothing
mov     cx, 0FFFFh
repne scasb
dec     di
mov     cx, bx
shr     cx, 1
rep movsw
adc     cx, cx
rep movsb
pop     ds
mov     es, seg_278AA
assume es:seg008
cmp     es:word_2232E, 19h
jz      short loc_177C6
jmp     loc_178D0

loc_177C6:
cmp     [bp+var_2E], 50h ; 'P'
jnb     short loc_177D2
mov     di, 1239h
jmp     loc_179F9

loc_177D2:
cmp     [bp+var_2E], 64h ; 'd'
jnb     short loc_17850
mov     di, 1259h
lea     si, [bp+var_15A]
push    ds
pop     es
assume es:dseg
push    ds
mov     cx, 0FFFFh
xor     ax, ax
repne scasb
not     cx
sub     di, cx
mov     bx, cx
xchg    di, si
push    ds
push    es
pop     ds
pop     es
assume es:nothing
mov     cx, 0FFFFh
repne scasb
dec     di
mov     cx, bx
shr     cx, 1
rep movsw
adc     cx, cx
rep movsb
pop     ds
mov     es, seg_278B8
assume es:seg008
mov     al, es:byte_222B0
sub     ah, ah
mov     si, ax
shl     si, 1
shl     si, 1
mov     ax, [bp+si+var_18]
mov     dx, [bp+si+var_16]
mov     di, ax
lea     si, [bp+var_15A]
mov     es, dx
assume es:nothing
push    ds
mov     cx, 0FFFFh
xor     ax, ax
repne scasb
not     cx
sub     di, cx
mov     bx, cx
xchg    di, si
push    ds
push    es
pop     ds
pop     es
mov     cx, 0FFFFh
repne scasb
dec     di
mov     cx, bx
shr     cx, 1
rep movsw
adc     cx, cx
rep movsb
pop     ds
mov     di, 128Dh
jmp     loc_179F9
align 2

loc_17850:
cmp     [bp+var_2E], 64h ; 'd'
jnb     short loc_17859
jmp     loc_17A24

loc_17859:
mov     di, 12CBh
lea     si, [bp+var_15A]
push    ds
pop     es
assume es:dseg
push    ds
mov     cx, 0FFFFh
xor     ax, ax
repne scasb
not     cx
sub     di, cx
mov     bx, cx
xchg    di, si
push    ds
push    es
pop     ds
pop     es
assume es:nothing
mov     cx, 0FFFFh
repne scasb
dec     di
mov     cx, bx
shr     cx, 1
rep movsw
adc     cx, cx
rep movsb
pop     ds
mov     es, seg_278B8
assume es:seg008
mov     al, es:byte_222B0
sub     ah, ah
mov     si, ax
shl     si, 1
shl     si, 1
mov     ax, [bp+si+var_18]
mov     dx, [bp+si+var_16]
mov     di, ax
lea     si, [bp+var_15A]
mov     es, dx
assume es:nothing
push    ds
mov     cx, 0FFFFh
xor     ax, ax
repne scasb
not     cx
sub     di, cx
mov     bx, cx
xchg    di, si
push    ds
push    es
pop     ds
pop     es
mov     cx, 0FFFFh
repne scasb
dec     di
mov     cx, bx
shr     cx, 1
rep movsw
adc     cx, cx
rep movsb
pop     ds
mov     di, 12FFh
jmp     loc_179F9

loc_178D0:
cmp     [bp+var_2E], 32h ; '2'
jnb     short loc_178DC
mov     di, 133Dh
jmp     loc_179F9

loc_178DC:
cmp     [bp+var_2E], 3Ch ; '<'
jnb     short loc_178E8
mov     di, 1386h
jmp     loc_179F9

loc_178E8:
cmp     [bp+var_2E], 46h ; 'F'
jnb     short loc_178F4
mov     di, 13C3h
jmp     loc_179F9

loc_178F4:
cmp     [bp+var_2E], 50h ; 'P'
jnb     short loc_17900
mov     di, 1408h
jmp     loc_179F9

loc_17900:
cmp     [bp+var_2E], 64h ; 'd'
jnb     short loc_1797C
mov     di, 144Bh
lea     si, [bp+var_15A]
push    ds
pop     es
assume es:dseg
push    ds
mov     cx, 0FFFFh
xor     ax, ax
repne scasb
not     cx
sub     di, cx
mov     bx, cx
xchg    di, si
push    ds
push    es
pop     ds
pop     es
assume es:nothing
mov     cx, 0FFFFh
repne scasb
dec     di
mov     cx, bx
shr     cx, 1
rep movsw
adc     cx, cx
rep movsb
pop     ds
mov     es, seg_278B8
assume es:seg008
mov     al, es:byte_222B0
sub     ah, ah
mov     si, ax
shl     si, 1
shl     si, 1
mov     ax, [bp+si+var_18]
mov     dx, [bp+si+var_16]
mov     di, ax
lea     si, [bp+var_15A]
mov     es, dx
assume es:nothing
push    ds
mov     cx, 0FFFFh
xor     ax, ax
repne scasb
not     cx
sub     di, cx
mov     bx, cx
xchg    di, si
push    ds
push    es
pop     ds
pop     es
mov     cx, 0FFFFh
repne scasb
dec     di
mov     cx, bx
shr     cx, 1
rep movsw
adc     cx, cx
rep movsb
pop     ds
mov     di, 147Fh
jmp     short loc_179F9

loc_1797C:
cmp     [bp+var_2E], 64h ; 'd'
jnb     short loc_17985
jmp     loc_17A24

loc_17985:
mov     di, 14BDh
lea     si, [bp+var_15A]
push    ds
pop     es
assume es:dseg
push    ds
mov     cx, 0FFFFh
xor     ax, ax
repne scasb
not     cx
sub     di, cx
mov     bx, cx
xchg    di, si
push    ds
push    es
pop     ds
pop     es
assume es:nothing
mov     cx, 0FFFFh
repne scasb
dec     di
mov     cx, bx
shr     cx, 1
rep movsw
adc     cx, cx
rep movsb
pop     ds
mov     es, seg_278B8
assume es:seg008
mov     al, es:byte_222B0
sub     ah, ah
mov     si, ax
shl     si, 1
shl     si, 1
mov     ax, [bp+si+var_18]
mov     dx, [bp+si+var_16]
mov     di, ax
lea     si, [bp+var_15A]
mov     es, dx
assume es:nothing
push    ds
mov     cx, 0FFFFh
xor     ax, ax
repne scasb
not     cx
sub     di, cx
mov     bx, cx
xchg    di, si
push    ds
push    es
pop     ds
pop     es
mov     cx, 0FFFFh
repne scasb
dec     di
mov     cx, bx
shr     cx, 1
rep movsw
adc     cx, cx
rep movsb
pop     ds
mov     di, 14F1h

loc_179F9:
lea     si, [bp+var_15A]
push    ds
pop     es
assume es:dseg
push    ds
mov     cx, 0FFFFh
xor     ax, ax
repne scasb
not     cx
sub     di, cx
mov     bx, cx
xchg    di, si
push    ds
push    es
pop     ds
pop     es
assume es:nothing
mov     cx, 0FFFFh
repne scasb
dec     di
mov     cx, bx
shr     cx, 1
rep movsw
adc     cx, cx
rep movsb
pop     ds

loc_17A24:
lea     ax, [bp+var_15A]
push    ss
push    ax
mov     ax, 78h ; 'x'
push    ax
mov     ax, 7
push    ax
push    cs
call    near ptr sub_1958C
add     sp, 8
call    sub_20CDA
sub     ax, ax
push    ax
mov     ax, 160h
push    ax
mov     ax, 16h
push    ax
mov     ax, 792h
push    ax
call    sub_200C6
add     sp, 8
mov     ax, 0Ah
push    ax
call    sub_1F9E2
add     sp, 2
pop     si
pop     di
mov     sp, bp
pop     bp
retf
sub_174F6 endp

align 2


; Attributes: bp-based frame

sub_17A68 proc far

var_4= word ptr -4
arg_0= word ptr  6
arg_2= word ptr  8

push    bp
mov     bp, sp
sub     sp, 4
push    di
push    si
mov     si, 48h ; 'H'

loc_17A73:
mov     es, seg_278B2
assume es:seg008
push    es:word_2229C
push    es:word_2229A
push    si
call    sub_1F737
add     sp, 6
add     si, 0A00h
cmp     si, 5A48h
jb      short loc_17A73
mov     di, [bp+arg_2]
mov     es, seg_278B4
mov     ax, es:word_2229E
mov     dx, es:word_222A0
add     ax, 7066h
push    dx
push    ax
mov     ax, 4Ch ; 'L'
push    ax
call    sub_1F737
add     sp, 6
mov     al, 11h
push    ax
mov     ax, 4Ch ; 'L'
push    ax
mov     ax, 120h
push    ax
mov     ax, 2
push    ax
mov     ax, 48h ; 'H'
push    ax
call    sub_20385
add     sp, 0Ah
mov     ax, 0Bh
push    ax
call    sub_20FAB
add     sp, 2
mov     si, 48h ; 'H'
mov     ax, di
mov     cx, 280h
mul     cx
add     ax, [bp+arg_0]
shl     ax, 1
shl     ax, 1
add     ax, 792h
mov     [bp+var_4], ax

loc_17AF3:
push    si
mov     ax, 20h ; ' '
push    ax
mov     ax, 2
push    ax
push    [bp+var_4]
call    sub_1FE82
add     sp, 8
push    cs
call    near ptr sub_192A4
add     si, 0A00h
cmp     si, 5A48h
jb      short loc_17AF3
mov     ax, 14h
push    ax
push    cs
call    near ptr sub_19288
add     sp, 2
pop     si
pop     di
mov     sp, bp
pop     bp
retf
sub_17A68 endp



; Attributes: bp-based frame

sub_17B26 proc far

var_4= word ptr -4
arg_0= word ptr  6
arg_2= word ptr  8

push    bp
mov     bp, sp
sub     sp, 4
push    di
push    si
mov     si, 48h ; 'H'

loc_17B31:
mov     es, seg_278B2
push    es:word_2229C
push    es:word_2229A
push    si
call    sub_1F737
add     sp, 6
add     si, 0A00h
cmp     si, 5A48h
jb      short loc_17B31
mov     es, seg_278B4
mov     ax, es:word_2229E
mov     dx, es:word_222A0
add     ax, 7066h
push    dx
push    ax
mov     ax, 4Ch ; 'L'
push    ax
call    sub_1F737
add     sp, 6
mov     al, 11h
push    ax
mov     ax, 4Ch ; 'L'
push    ax
mov     ax, 120h
push    ax
mov     ax, 2
push    ax
mov     ax, 48h ; 'H'
push    ax
call    sub_20385
add     sp, 0Ah
mov     ax, 0Bh
push    ax
call    sub_20FAB
add     sp, 2
mov     di, 100h
mov     si, 5048h
mov     ax, 280h
mul     [bp+arg_2]
add     ax, [bp+arg_0]
shl     ax, 1
shl     ax, 1
add     ax, 792h
mov     [bp+var_4], ax

loc_17BB0:
push    si
mov     ax, 20h ; ' '
push    ax
mov     cx, 2
push    cx
push    [bp+var_4]
call    sub_1FE82
add     sp, 8
push    cs
call    near ptr sub_192A4
sub     si, 0A00h
sub     di, 20h ; ' '
cmp     di, 120h
jb      short loc_17BB0
mov     ax, 14h
push    ax
push    cs
call    near ptr sub_19288
add     sp, 2
pop     si
pop     di
mov     sp, bp
pop     bp
retf
sub_17B26 endp



; Attributes: bp-based frame

sub_17BE6 proc far

var_A= word ptr -0Ah
var_8= word ptr -8
var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  6
arg_2= word ptr  8

push    bp
mov     bp, sp
sub     sp, 0Ah
push    di
push    si
mov     si, 48h ; 'H'
mov     [bp+var_2], si

loc_17BF4:
mov     es, seg_278B2
push    es:word_2229C
push    es:word_2229A
push    si
call    sub_1F737
add     sp, 6
add     si, 0A00h
cmp     si, 5A48h
jb      short loc_17BF4
mov     [bp+var_2], 0
mov     dx, [bp+arg_2]
cmp     dx, 1
jnz     short loc_17C34
mov     es, seg_278B4
mov     ax, es:word_2229E
mov     dx, es:word_222A0
add     ax, 5D7Ch
jmp     short loc_17C61

loc_17C34:
cmp     dx, 2
jnz     short loc_17C4C
mov     es, seg_278B4
mov     ax, es:word_2229E
mov     dx, es:word_222A0
add     ax, 641Bh
jmp     short loc_17C61
align 2

loc_17C4C:
cmp     dx, 3
jnz     short loc_17C6F
mov     es, seg_278B4
mov     ax, es:word_2229E
mov     dx, es:word_222A0
add     ax, 6AA2h

loc_17C61:
push    dx
push    ax
mov     ax, 4Ch ; 'L'
push    ax
call    sub_1F737
add     sp, 6

loc_17C6F:
mov     al, 11h
push    ax
mov     ax, 4Ch ; 'L'
push    ax
mov     ax, 120h
push    ax
mov     ax, 2
push    ax
mov     ax, 48h ; 'H'
push    ax
call    sub_20385
add     sp, 0Ah
mov     ax, 0Bh
push    ax
call    sub_20FAB
add     sp, 2
cmp     [bp+arg_0], 1
jnz     short loc_17CB2
mov     es, seg_278AE
mov     bx, es:word_22292
inc     bx

loc_17CA6:
mov     es, seg_278B0
mov     di, es:word_22294
jmp     short loc_17D01
align 2

loc_17CB2:
mov     bx, [bp+arg_0]
cmp     bx, 2
jnz     short loc_17CC6
mov     es, seg_278AE
mov     bx, es:word_22292
dec     bx
jmp     short loc_17CA6

loc_17CC6:
cmp     bx, 3
jnz     short loc_17CE0
mov     es, seg_278AE
mov     bx, es:word_22292
mov     es, seg_278B0
mov     di, es:word_22294
inc     di
jmp     short loc_17D01

loc_17CE0:
cmp     bx, 4
jz      short loc_17CEE
mov     bx, [bp+var_8]
mov     di, [bp+var_4]
jmp     short loc_17D01
align 2

loc_17CEE:
mov     es, seg_278AE
mov     bx, es:word_22292
mov     es, seg_278B0
mov     di, es:word_22294
dec     di

loc_17D01:
mov     ax, 48h ; 'H'
mov     [bp+var_2], ax
mov     ax, di
mov     cx, 280h
mul     cx
add     ax, bx
shl     ax, 1
shl     ax, 1
add     ax, 792h
mov     [bp+var_A], ax
mov     si, [bp+var_2]

loc_17D1D:
push    si
mov     ax, 20h ; ' '
push    ax
mov     ax, 2
push    ax
push    [bp+var_A]
call    sub_1FE82
add     sp, 8
push    cs
call    near ptr sub_192A4
add     si, 0A00h
cmp     si, 5A48h
jb      short loc_17D1D
mov     ax, 8
push    ax
push    cs
call    near ptr sub_19288
add     sp, 2
pop     si
pop     di
mov     sp, bp
pop     bp
retf
sub_17BE6 endp



; Attributes: bp-based frame

sub_17D50 proc far

var_182= byte ptr -182h
var_56= byte ptr -56h
var_42= byte ptr -42h
var_40= word ptr -40h
var_3E= byte ptr -3Eh
var_3C= word ptr -3Ch
var_3A= word ptr -3Ah
var_38= byte ptr -38h
var_24= word ptr -24h
var_22= word ptr -22h
var_20= dword ptr -20h
var_1C= dword ptr -1Ch
var_18= dword ptr -18h
var_14= dword ptr -14h
var_10= dword ptr -10h
var_C= dword ptr -0Ch
var_8= dword ptr -8
var_4= dword ptr -4

push    bp
mov     bp, sp
sub     sp, 182h
push    di
push    si
mov     ax, 152Fh
mov     [bp+var_24], ax
mov     [bp+var_22], ds
mov     word ptr [bp+var_20], offset unk_2387F
mov     word ptr [bp+var_20+2], ds
mov     word ptr [bp+var_1C], offset unk_2388D
mov     word ptr [bp+var_1C+2], ds
mov     word ptr [bp+var_18], offset unk_2389B
mov     word ptr [bp+var_18+2], ds
mov     word ptr [bp+var_14], offset unk_238AF
mov     word ptr [bp+var_14+2], ds
mov     word ptr [bp+var_10], offset unk_238BD
mov     word ptr [bp+var_10+2], ds
mov     word ptr [bp+var_C], offset unk_238CB
mov     word ptr [bp+var_C+2], ds
mov     word ptr [bp+var_8], offset unk_238D9
mov     word ptr [bp+var_8+2], ds
mov     word ptr [bp+var_4], offset unk_238EF
mov     word ptr [bp+var_4+2], ds
lea     dx, [bp+var_182]
mov     di, dx
mov     si, 15C3h
push    ss
pop     es
assume es:nothing
mov     cx, 0Eh
rep movsw
mov     [bp+var_3E], 0FFh
mov     es, seg_278B8
assume es:seg008
cmp     es:byte_222B7, 1
jnz     short loc_17DFB
sub     cl, cl
mov     [bp+var_3E], cl
mov     [bp+var_56], cl
mov     bx, ds
mov     di, ss
push    ds
push    di
mov     di, ax
mov     si, dx
mov     es, bx
assume es:dseg
pop     ds
mov     cx, 0FFFFh
xor     ax, ax
repne scasb
not     cx
sub     di, cx
mov     bx, cx
xchg    di, si
push    ds
push    es
pop     ds
pop     es
assume es:nothing
mov     cx, 0FFFFh
repne scasb
dec     di
mov     cx, bx
shr     cx, 1
rep movsw
adc     cx, cx
rep movsb
pop     ds

loc_17DFB:
mov     es, seg_278B8
assume es:seg008
cmp     es:byte_222B8, 1
jnz     short loc_17E41
inc     [bp+var_3E]
mov     al, [bp+var_3E]
sub     ah, ah
mov     si, ax
mov     [bp+si+var_56], 1
lea     si, [bp+var_182]
push    ds
les     di, [bp+var_20]
assume es:nothing
mov     cx, 0FFFFh
xor     ax, ax
repne scasb
not     cx
sub     di, cx
mov     bx, cx
xchg    di, si
push    ds
push    es
pop     ds
pop     es
mov     cx, 0FFFFh
repne scasb
dec     di
mov     cx, bx
shr     cx, 1
rep movsw
adc     cx, cx
rep movsb
pop     ds

loc_17E41:
mov     es, seg_278B8
assume es:seg008
cmp     es:byte_222B9, 1
jnz     short loc_17E87
inc     [bp+var_3E]
mov     al, [bp+var_3E]
sub     ah, ah
mov     si, ax
mov     [bp+si+var_56], 2
lea     si, [bp+var_182]
push    ds
les     di, [bp+var_1C]
assume es:nothing
mov     cx, 0FFFFh
xor     ax, ax
repne scasb
not     cx
sub     di, cx
mov     bx, cx
xchg    di, si
push    ds
push    es
pop     ds
pop     es
mov     cx, 0FFFFh
repne scasb
dec     di
mov     cx, bx
shr     cx, 1
rep movsw
adc     cx, cx
rep movsb
pop     ds

loc_17E87:
mov     es, seg_278B8
assume es:seg008
cmp     es:byte_222BA, 1
jnz     short loc_17ECD
inc     [bp+var_3E]
mov     al, [bp+var_3E]
sub     ah, ah
mov     si, ax
mov     [bp+si+var_56], 3
lea     si, [bp+var_182]
push    ds
les     di, [bp+var_18]
assume es:nothing
mov     cx, 0FFFFh
xor     ax, ax
repne scasb
not     cx
sub     di, cx
mov     bx, cx
xchg    di, si
push    ds
push    es
pop     ds
pop     es
mov     cx, 0FFFFh
repne scasb
dec     di
mov     cx, bx
shr     cx, 1
rep movsw
adc     cx, cx
rep movsb
pop     ds

loc_17ECD:
mov     es, seg_278B8
assume es:seg008
cmp     es:byte_222BB, 1
jnz     short loc_17F13
inc     [bp+var_3E]
mov     al, [bp+var_3E]
sub     ah, ah
mov     si, ax
mov     [bp+si+var_56], 4
lea     si, [bp+var_182]
push    ds
les     di, [bp+var_14]
assume es:nothing
mov     cx, 0FFFFh
xor     ax, ax
repne scasb
not     cx
sub     di, cx
mov     bx, cx
xchg    di, si
push    ds
push    es
pop     ds
pop     es
mov     cx, 0FFFFh
repne scasb
dec     di
mov     cx, bx
shr     cx, 1
rep movsw
adc     cx, cx
rep movsb
pop     ds

loc_17F13:
mov     es, seg_278B8
assume es:seg008
cmp     es:byte_222BC, 1
jnz     short loc_17F59
inc     [bp+var_3E]
mov     al, [bp+var_3E]
sub     ah, ah
mov     si, ax
mov     [bp+si+var_56], 5
lea     si, [bp+var_182]
push    ds
les     di, [bp+var_10]
assume es:nothing
mov     cx, 0FFFFh
xor     ax, ax
repne scasb
not     cx
sub     di, cx
mov     bx, cx
xchg    di, si
push    ds
push    es
pop     ds
pop     es
mov     cx, 0FFFFh
repne scasb
dec     di
mov     cx, bx
shr     cx, 1
rep movsw
adc     cx, cx
rep movsb
pop     ds

loc_17F59:
mov     es, seg_278B8
assume es:seg008
cmp     es:byte_222BF, 1
jnz     short loc_17F9F
inc     [bp+var_3E]
mov     al, [bp+var_3E]
sub     ah, ah
mov     si, ax
mov     [bp+si+var_56], 6
lea     si, [bp+var_182]
push    ds
les     di, [bp+var_C]
assume es:nothing
mov     cx, 0FFFFh
xor     ax, ax
repne scasb
not     cx
sub     di, cx
mov     bx, cx
xchg    di, si
push    ds
push    es
pop     ds
pop     es
mov     cx, 0FFFFh
repne scasb
dec     di
mov     cx, bx
shr     cx, 1
rep movsw
adc     cx, cx
rep movsb
pop     ds

loc_17F9F:
mov     es, seg_278B8
assume es:seg008
cmp     es:byte_222C0, 1
jnz     short loc_17FE5
inc     [bp+var_3E]
mov     al, [bp+var_3E]
sub     ah, ah
mov     si, ax
mov     [bp+si+var_56], 7
lea     si, [bp+var_182]
push    ds
les     di, [bp+var_8]
assume es:nothing
mov     cx, 0FFFFh
xor     ax, ax
repne scasb
not     cx
sub     di, cx
mov     bx, cx
xchg    di, si
push    ds
push    es
pop     ds
pop     es
mov     cx, 0FFFFh
repne scasb
dec     di
mov     cx, bx
shr     cx, 1
rep movsw
adc     cx, cx
rep movsb
pop     ds

loc_17FE5:
inc     [bp+var_3E]
mov     al, [bp+var_3E]
sub     ah, ah
mov     si, ax
mov     [bp+si+var_56], 8
lea     si, [bp+var_182]
push    ds
les     di, [bp+var_4]
mov     cx, 0FFFFh
xor     ax, ax
repne scasb
not     cx
sub     di, cx
mov     bx, cx
xchg    di, si
push    ds
push    es
pop     ds
pop     es
mov     cx, 0FFFFh
repne scasb
dec     di
mov     cx, bx
shr     cx, 1
rep movsw
adc     cx, cx
rep movsb
pop     ds
lea     ax, [bp+var_182]
push    ss
push    ax
mov     ax, 32h ; '2'
push    ax
mov     ax, 0Bh
push    ax
push    cs
call    near ptr sub_1958C
add     sp, 8
mov     ax, 52h ; 'R'
mov     [bp+var_3C], ax
push    ax
mov     ax, 17h
mov     [bp+var_3A], ax
push    ax
mov     al, [bp+var_3E]
push    ax
push    cs
call    near ptr sub_19E78
add     sp, 6
mov     [bp+var_42], al
sub     ah, ah
mov     si, ax
cmp     [bp+si+var_56], 8
jz      short loc_1805E
cmp     al, 0FFh
jnz     short loc_1807C

loc_1805E:
sub     ax, ax
push    ax
mov     ax, 160h
push    ax
mov     ax, 16h
push    ax
mov     ax, 792h
push    ax
call    sub_200C6
add     sp, 8
pop     si
pop     di
mov     sp, bp
pop     bp
retf
align 2

loc_1807C:
mov     al, [bp+var_42]
sub     ah, ah
mov     si, ax
cmp     [bp+si+var_56], ah
jz      short loc_1808B
jmp     loc_18176

loc_1808B:
sub     ax, ax
push    ax
mov     ax, 160h
push    ax
mov     ax, 16h
push    ax
mov     ax, 792h
push    ax
call    sub_200C6
add     sp, 8
mov     ax, 6
push    ax
call    sub_20FAB
add     sp, 2
mov     es, seg_278BC
assume es:seg008
mov     ax, es:word_2232C
shl     ax, 1
mov     es, seg_278BE
add     ax, es:word_222A6
mov     cx, ax
shl     ax, 1
shl     ax, 1
add     ax, cx
mov     [bp+var_40], ax
push    ax
lea     ax, [bp+var_38]
push    ss
push    ax
push    cs
call    near ptr sub_1B7D4
add     sp, 6
lea     ax, [bp+var_182]
mov     di, ax
mov     si, 15DFh
push    ss
pop     es
assume es:nothing
movsw
movsw
movsw
movsw
movsb
mov     bx, ax
mov     si, ss
push    si
push    ds
push    si
lea     di, [bp+var_38]
mov     si, bx
pop     ds
mov     cx, 0FFFFh
xor     ax, ax
repne scasb
not     cx
sub     di, cx
push    cx
xchg    di, si
push    ds
push    es
pop     ds
pop     es
mov     cx, 0FFFFh
repne scasb
dec     di
pop     cx
shr     cx, 1
rep movsw
adc     cx, cx
rep movsb
pop     ds
pop     si
mov     di, ss
push    di
push    si
push    ds
push    di
mov     di, 15E8h
mov     si, bx
push    ds
pop     es
assume es:dseg
pop     ds
mov     cx, 0FFFFh
repne scasb
not     cx
sub     di, cx
push    cx
xchg    di, si
push    ds
push    es
pop     ds
pop     es
assume es:nothing
mov     cx, 0FFFFh
repne scasb
dec     di
pop     cx
shr     cx, 1
rep movsw
adc     cx, cx
rep movsb
pop     ds
pop     si
pop     di
push    ss
push    bx
push    cs
call    near ptr sub_19D80
add     sp, 4
mov     ax, [bp+var_40]
mov     es, seg_278BA
assume es:seg008
add     es:word_22328, ax
mov     al, 1
push    ax
push    cs
call    near ptr sub_1B96C
add     sp, 2
mov     es, seg_278B8
mov     es:byte_222B7, 0
jmp     loc_18A3A
align 2

loc_18176:
mov     al, [bp+var_42]
sub     ah, ah
mov     si, ax
cmp     [bp+si+var_56], 1
jz      short loc_18186
jmp     loc_1833C

loc_18186:
sub     ax, ax
push    ax
mov     cx, 160h
push    cx
mov     cx, 16h
push    cx
mov     cx, 792h
push    cx
call    sub_200C6
add     sp, 8
mov     ax, 6
push    ax
call    sub_20FAB
add     sp, 2
mov     ax, 15FBh
push    ds
push    ax
push    cs
call    near ptr sub_19D80
add     sp, 4
mov     es, seg_278B0
mov     ax, es:word_22294
mov     cx, ax
dec     ax
mov     [bp+var_3C], ax
mov     bx, ax
mov     dx, ax
shl     bx, 1
shl     bx, 1
add     bx, dx
shl     bx, 1
add     bx, dx
mov     es, seg_278AE
mov     dx, es:word_22292
mov     [bp+var_3A], dx
add     bx, dx
mov     si, ax
mov     ax, offset byte_2230C
mov     es, seg_278AA
mul     es:word_2232E
add     bx, ax
shl     bx, 1
mov     es, seg_278AC
assume es:dseg
cmp     word ptr es:[bx+1AEEh], 8
jnz     short loc_18213
or      cx, cx
jz      short loc_18213
mov     word ptr es:[bx+1AEEh], 6
push    si
push    [bp+var_3A]
push    cs
call    near ptr sub_1AE6E
add     sp, 4

loc_18213:
mov     es, seg_278B0
assume es:seg008
mov     ax, es:word_22294
mov     cx, ax
inc     ax
mov     [bp+var_3C], ax
mov     bx, ax
mov     dx, ax
shl     bx, 1
shl     bx, 1
add     bx, dx
shl     bx, 1
add     bx, dx
mov     es, seg_278AE
mov     dx, es:word_22292
mov     [bp+var_3A], dx
add     bx, dx
mov     si, ax
mov     ax, offset byte_2230C
mov     es, seg_278AA
mul     es:word_2232E
add     bx, ax
shl     bx, 1
mov     es, seg_278AC
assume es:dseg
cmp     word ptr es:[bx+1AEEh], 8
jnz     short loc_18272
cmp     cx, 0Ah
jz      short loc_18272
mov     word ptr es:[bx+1AEEh], 6
push    si
push    [bp+var_3A]
push    cs
call    near ptr sub_1AE6E
add     sp, 4

loc_18272:
mov     es, seg_278B0
assume es:seg008
mov     ax, es:word_22294
mov     [bp+var_3C], ax
mov     bx, ax
mov     cx, ax
shl     bx, 1
shl     bx, 1
add     bx, cx
shl     bx, 1
add     bx, cx
mov     es, seg_278AE
mov     cx, es:word_22292
mov     dx, cx
dec     cx
mov     [bp+var_3A], cx
add     bx, cx
mov     si, ax
mov     ax, offset byte_2230C
mov     es, seg_278AA
mov     di, dx
mul     es:word_2232E
add     bx, ax
shl     bx, 1
mov     es, seg_278AC
assume es:dseg
cmp     word ptr es:[bx+1AEEh], 8
jnz     short loc_182D0
or      di, di
jz      short loc_182D0
mov     word ptr es:[bx+1AEEh], 6
push    si
push    cx
push    cs
call    near ptr sub_1AE6E
add     sp, 4

loc_182D0:
mov     es, seg_278B0
assume es:seg008
mov     ax, es:word_22294
mov     [bp+var_3C], ax
mov     bx, ax
mov     cx, ax
shl     bx, 1
shl     bx, 1
add     bx, cx
shl     bx, 1
add     bx, cx
mov     es, seg_278AE
mov     cx, es:word_22292
mov     dx, cx
inc     cx
mov     [bp+var_3A], cx
add     bx, cx
mov     si, ax
mov     ax, offset byte_2230C
mov     es, seg_278AA
mov     di, dx
mul     es:word_2232E
add     bx, ax
shl     bx, 1
mov     es, seg_278AC
assume es:dseg
cmp     word ptr es:[bx+1AEEh], 8
jnz     short loc_1832F
cmp     di, 0Ah
jz      short loc_1832F
mov     word ptr es:[bx+1AEEh], 6
push    si
push    cx
push    cs
call    near ptr sub_1AE6E
add     sp, 4

loc_1832F:
mov     es, seg_278B8
assume es:seg008
mov     es:byte_222B8, 0
jmp     loc_18A3A

loc_1833C:
mov     al, [bp+var_42]
sub     ah, ah
mov     si, ax
cmp     [bp+si+var_56], 2
jz      short loc_1834C
jmp     loc_186A6

loc_1834C:
sub     ax, ax
push    ax
mov     cx, 160h
push    cx
mov     cx, 16h
push    cx
mov     cx, 792h
push    cx
call    sub_200C6
add     sp, 8
mov     ax, 6
push    ax
call    sub_20FAB
add     sp, 2
mov     ax, 161Eh
push    ds
push    ax
push    cs
call    near ptr sub_19D80
add     sp, 4
mov     ax, 1Eh
push    ax
push    cs
call    near ptr sub_19288
add     sp, 2
mov     es, seg_278AE
mov     ax, es:word_22292
mov     [bp+var_3A], ax
mov     es, seg_278B0
mov     cx, es:word_22294
mov     dx, cx
dec     cx
mov     [bp+var_3C], cx
or      dx, dx
jnz     short loc_183A7
jmp     loc_18449

loc_183A7:
mov     bx, cx
shl     bx, 1
shl     bx, 1
add     bx, cx
shl     bx, 1
add     bx, cx
add     bx, ax
mov     ax, offset byte_2230C
mov     es, seg_278AA
mul     es:word_2232E
add     bx, ax
shl     bx, 1
mov     es, seg_278AC
assume es:dseg
mov     bx, es:[bx+1AEEh]
mov     ax, bx
shl     bx, 1
add     bx, ax
shl     bx, 1
mov     es, seg_278C4
cmp     byte ptr es:[bx+282h], 8
jz      short loc_183EA
cmp     byte ptr es:[bx+282h], 0Ah
jnz     short loc_18449

loc_183EA:
mov     ax, offset byte_2230C
mov     es, seg_278AA
assume es:seg008
mul     es:word_2232E
mov     bx, ax
mov     ax, cx
shl     ax, 1
shl     ax, 1
add     ax, cx
shl     ax, 1
add     ax, cx
add     bx, ax
add     bx, [bp+var_3A]
shl     bx, 1
mov     es, seg_278AC
assume es:dseg
cmp     word ptr es:[bx+1AEEh], 5Bh ; '['
jz      short loc_18449
cmp     word ptr es:[bx+1AEEh], 91h
jz      short loc_18449
cmp     word ptr es:[bx+1AEEh], 7Ah ; 'z'
jz      short loc_18449
cmp     word ptr es:[bx+1AEEh], 68h ; 'h'
jz      short loc_18449
mov     word ptr es:[bx+1AEEh], 6
push    [bp+var_3C]
push    [bp+var_3A]
push    cs
call    near ptr sub_1AE6E
add     sp, 4
call    sub_14762

loc_18449:
mov     es, seg_278AE
assume es:seg008
mov     ax, es:word_22292
mov     [bp+var_3A], ax
mov     es, seg_278B0
mov     cx, es:word_22294
mov     dx, cx
inc     cx
mov     [bp+var_3C], cx
cmp     dx, 0Ah
jnz     short loc_1846B
jmp     loc_1850D

loc_1846B:
mov     bx, cx
shl     bx, 1
shl     bx, 1
add     bx, cx
shl     bx, 1
add     bx, cx
add     bx, ax
mov     ax, offset byte_2230C
mov     es, seg_278AA
mul     es:word_2232E
add     bx, ax
shl     bx, 1
mov     es, seg_278AC
assume es:dseg
mov     bx, es:[bx+1AEEh]
mov     ax, bx
shl     bx, 1
add     bx, ax
shl     bx, 1
mov     es, seg_278C4
cmp     byte ptr es:[bx+282h], 8
jz      short loc_184AE
cmp     byte ptr es:[bx+282h], 0Ah
jnz     short loc_1850D

loc_184AE:
mov     ax, offset byte_2230C
mov     es, seg_278AA
assume es:seg008
mul     es:word_2232E
mov     bx, ax
mov     ax, cx
shl     ax, 1
shl     ax, 1
add     ax, cx
shl     ax, 1
add     ax, cx
add     bx, ax
add     bx, [bp+var_3A]
shl     bx, 1
mov     es, seg_278AC
assume es:dseg
cmp     word ptr es:[bx+1AEEh], 5Bh ; '['
jz      short loc_1850D
cmp     word ptr es:[bx+1AEEh], 91h
jz      short loc_1850D
cmp     word ptr es:[bx+1AEEh], 7Ah ; 'z'
jz      short loc_1850D
cmp     word ptr es:[bx+1AEEh], 68h ; 'h'
jz      short loc_1850D
mov     word ptr es:[bx+1AEEh], 6
push    [bp+var_3C]
push    [bp+var_3A]
push    cs
call    near ptr sub_1AE6E
add     sp, 4
call    sub_14762

loc_1850D:
mov     es, seg_278AE
assume es:seg008
mov     ax, es:word_22292
mov     cx, ax
dec     ax
mov     [bp+var_3A], ax
mov     es, seg_278B0
mov     dx, es:word_22294
mov     [bp+var_3C], dx
or      cx, cx
jnz     short loc_1852E
jmp     loc_185D2

loc_1852E:
mov     bx, dx
mov     cx, dx
shl     bx, 1
shl     bx, 1
add     bx, cx
shl     bx, 1
add     bx, cx
add     bx, ax
mov     ax, offset byte_2230C
mov     es, seg_278AA
mul     es:word_2232E
add     bx, ax
shl     bx, 1
mov     es, seg_278AC
assume es:dseg
mov     bx, es:[bx+1AEEh]
mov     ax, bx
shl     bx, 1
add     bx, ax
shl     bx, 1
mov     es, seg_278C4
cmp     byte ptr es:[bx+282h], 8
jz      short loc_18573
cmp     byte ptr es:[bx+282h], 0Ah
jnz     short loc_185D2

loc_18573:
mov     ax, offset byte_2230C
mov     es, seg_278AA
assume es:seg008
mul     es:word_2232E
mov     bx, ax
mov     ax, cx
shl     ax, 1
shl     ax, 1
add     ax, cx
shl     ax, 1
add     ax, cx
add     bx, ax
add     bx, [bp+var_3A]
shl     bx, 1
mov     es, seg_278AC
assume es:dseg
cmp     word ptr es:[bx+1AEEh], 5Bh ; '['
jz      short loc_185D2
cmp     word ptr es:[bx+1AEEh], 91h
jz      short loc_185D2
cmp     word ptr es:[bx+1AEEh], 7Ah ; 'z'
jz      short loc_185D2
cmp     word ptr es:[bx+1AEEh], 68h ; 'h'
jz      short loc_185D2
mov     word ptr es:[bx+1AEEh], 6
push    [bp+var_3C]
push    [bp+var_3A]
push    cs
call    near ptr sub_1AE6E
add     sp, 4
call    sub_14762

loc_185D2:
mov     es, seg_278AE
assume es:seg008
mov     ax, es:word_22292
mov     cx, ax
inc     ax
mov     [bp+var_3A], ax
mov     es, seg_278B0
mov     dx, es:word_22294
mov     [bp+var_3C], dx
cmp     cx, 0Ah
jnz     short loc_185F4
jmp     loc_18698

loc_185F4:
mov     bx, dx
mov     cx, dx
shl     bx, 1
shl     bx, 1
add     bx, cx
shl     bx, 1
add     bx, cx
add     bx, ax
mov     ax, offset byte_2230C
mov     es, seg_278AA
mul     es:word_2232E
add     bx, ax
shl     bx, 1
mov     es, seg_278AC
assume es:dseg
mov     bx, es:[bx+1AEEh]
mov     ax, bx
shl     bx, 1
add     bx, ax
shl     bx, 1
mov     es, seg_278C4
cmp     byte ptr es:[bx+282h], 8
jz      short loc_18639
cmp     byte ptr es:[bx+282h], 0Ah
jnz     short loc_18698

loc_18639:
mov     ax, offset byte_2230C
mov     es, seg_278AA
assume es:seg008
mul     es:word_2232E
mov     bx, ax
mov     ax, cx
shl     ax, 1
shl     ax, 1
add     ax, cx
shl     ax, 1
add     ax, cx
add     bx, ax
add     bx, [bp+var_3A]
shl     bx, 1
mov     es, seg_278AC
assume es:dseg
cmp     word ptr es:[bx+1AEEh], 5Bh ; '['
jz      short loc_18698
cmp     word ptr es:[bx+1AEEh], 91h
jz      short loc_18698
cmp     word ptr es:[bx+1AEEh], 7Ah ; 'z'
jz      short loc_18698
cmp     word ptr es:[bx+1AEEh], 68h ; 'h'
jz      short loc_18698
mov     word ptr es:[bx+1AEEh], 6
push    [bp+var_3C]
push    [bp+var_3A]
push    cs
call    near ptr sub_1AE6E
add     sp, 4
call    sub_14762

loc_18698:
mov     es, seg_278B8
assume es:seg008
mov     es:byte_222B9, 0
jmp     loc_18A3A
align 2

loc_186A6:
mov     al, [bp+var_42]
sub     ah, ah
mov     si, ax
cmp     [bp+si+var_56], 3
jz      short loc_186B6
jmp     loc_18770

loc_186B6:
sub     ax, ax
push    ax
mov     ax, 160h
push    ax
mov     ax, 16h
push    ax
mov     ax, 792h
push    ax
call    sub_200C6
add     sp, 8
mov     ax, 6
push    ax
call    sub_20FAB
add     sp, 2
mov     ax, 1633h
push    ds
push    ax
push    cs
call    near ptr sub_19D80
add     sp, 4
mov     ax, offset byte_2230C
mov     es, seg_278AA
mul     es:word_2232E
mov     bx, ax
mov     es, seg_278B0
mov     ax, es:word_22294
mov     dx, ax
mov     cx, ax
shl     ax, 1
shl     ax, 1
add     ax, cx
shl     ax, 1
add     ax, cx
sub     bx, ax
mov     es, seg_278AE
sub     bx, es:word_22292
shl     bx, 1
mov     es, seg_278AC
assume es:dseg
cmp     word ptr es:[bx+1BDEh], 6
jnz     short loc_18758
mov     ax, offset word_2229A
mov     es, seg_278AE
assume es:seg008
sub     ax, es:word_22292
mov     es:word_22292, ax
sub     dx, 0Ah
neg     dx
mov     es, seg_278B0
mov     es:word_22294, dx
mov     es, seg_278BA
sub     es:word_22328, 320h
mov     al, 1
push    ax
push    cs
call    near ptr sub_1B96C
add     sp, 2
jmp     short loc_18764
align 2

loc_18758:
mov     ax, 1642h
push    ds
push    ax
push    cs
call    near ptr sub_19D80
add     sp, 4

loc_18764:
push    cs
call    near ptr sub_1B62A
push    cs
call    near ptr sub_1A1E4
jmp     loc_18A3A
align 2

loc_18770:
mov     al, [bp+var_42]
sub     ah, ah
mov     si, ax
cmp     [bp+si+var_56], 4
jz      short loc_18780
jmp     loc_1882E

loc_18780:
mov     ax, offset byte_2230C
mov     es, seg_278AA
mul     es:word_2232E
mov     es, seg_278B0
mov     bx, es:word_22294
mov     cx, bx
shl     bx, 1
shl     bx, 1
add     bx, cx
shl     bx, 1
add     bx, cx
add     bx, ax
mov     es, seg_278AE
add     bx, es:word_22292
shl     bx, 1
mov     es, seg_278AC
assume es:dseg
cmp     word ptr es:[bx+1BE6h], 6
jz      short loc_187D6
mov     ax, 1663h

loc_187BD:
push    ds
push    ax
mov     ax, 32h ; '2'
push    ax
mov     ax, 0Bh
push    ax
push    cs
call    near ptr sub_1958C
add     sp, 8
call    sub_20CDA
jmp     loc_1805E

loc_187D6:
mov     es, seg_278AA
assume es:seg008
inc     es:word_2232E
sub     ax, ax
push    ax
mov     ax, 160h
push    ax
mov     ax, 16h
push    ax
mov     ax, 792h
push    ax
call    sub_200C6
add     sp, 8
mov     ax, 6
push    ax
call    sub_20FAB
add     sp, 2
mov     ax, 168Ah
push    ds
push    ax
push    cs
call    near ptr sub_19D80
add     sp, 4
mov     al, 5
push    ax
push    cs
call    near ptr sub_1B96C
add     sp, 2
push    cs
call    near ptr sub_1B62A
push    cs
call    near ptr sub_1A1E4
mov     es, seg_278B8
mov     es:byte_222BB, 0
jmp     loc_18A3A
align 2

loc_1882E:
mov     al, [bp+var_42]
sub     ah, ah
mov     si, ax
cmp     [bp+si+var_56], 5
jz      short loc_1883E
jmp     loc_188D6

loc_1883E:
mov     ax, offset byte_2230C
mov     es, seg_278AA
mul     es:word_2232E
mov     es, seg_278B0
mov     bx, es:word_22294
mov     cx, bx
shl     bx, 1
shl     bx, 1
add     bx, cx
shl     bx, 1
add     bx, cx
add     bx, ax
mov     es, seg_278AE
add     bx, es:word_22292
shl     bx, 1
mov     es, seg_278AC
assume es:dseg
cmp     word ptr es:[bx+19F6h], 6
jz      short loc_1887E
mov     ax, 169Dh
jmp     loc_187BD

loc_1887E:
mov     es, seg_278AA
assume es:seg008
dec     es:word_2232E
sub     ax, ax
push    ax
mov     ax, 160h
push    ax
mov     ax, 16h
push    ax
mov     ax, 792h
push    ax
call    sub_200C6
add     sp, 8
mov     ax, 6
push    ax
call    sub_20FAB
add     sp, 2
mov     ax, 16C4h
push    ds
push    ax
push    cs
call    near ptr sub_19D80
add     sp, 4
mov     al, 5
push    ax
push    cs
call    near ptr sub_1B96C
add     sp, 2
push    cs
call    near ptr sub_1B62A
push    cs
call    near ptr sub_1A1E4
mov     es, seg_278B8
mov     es:byte_222BC, 0
jmp     loc_18A3A
align 2

loc_188D6:
mov     al, [bp+var_42]
sub     ah, ah
mov     si, ax
cmp     [bp+si+var_56], 7
jz      short loc_188E6
jmp     loc_1898A

loc_188E6:
sub     ax, ax
push    ax
mov     cx, 160h
push    cx
mov     cx, 16h
push    cx
mov     cx, 792h
push    cx
call    sub_200C6
add     sp, 8
mov     ax, 6
push    ax
call    sub_20FAB
add     sp, 2
mov     ax, 16D7h
push    ds
push    ax
push    cs
call    near ptr sub_19D80
add     sp, 4
mov     [bp+var_3A], 0
jmp     short loc_1896F

loc_1891C:
inc     [bp+var_3C]

loc_1891F:
cmp     [bp+var_3C], 0Bh
jnb     short loc_1896C
mov     ax, offset byte_2230C
mov     es, seg_278AA
mul     es:word_2232E
mov     bx, ax
mov     ax, [bp+var_3C]
mov     cx, ax
shl     ax, 1
shl     ax, 1
add     ax, cx
shl     ax, 1
add     ax, cx
add     bx, ax
add     bx, [bp+var_3A]
shl     bx, 1
mov     es, seg_278AC
assume es:dseg
cmp     word ptr es:[bx+1AEEh], 8
jnz     short loc_1891C
mov     word ptr es:[bx+1AEEh], 6
push    [bp+var_3C]
push    [bp+var_3A]
push    cs
call    near ptr sub_1AE6E
add     sp, 4
jmp     short loc_1891C
align 2

loc_1896C:
inc     [bp+var_3A]

loc_1896F:
cmp     [bp+var_3A], 0Bh
jnb     short loc_1897C
mov     [bp+var_3C], 0
jmp     short loc_1891F

loc_1897C:
mov     es, seg_278B8
assume es:seg008
mov     es:byte_222C0, 0
jmp     loc_18A3A
align 2

loc_1898A:
mov     al, [bp+var_42]
sub     ah, ah
mov     si, ax
cmp     [bp+si+var_56], 6
jz      short loc_1899A
jmp     loc_18A3F

loc_1899A:
sub     ax, ax
push    ax
mov     cx, 160h
push    cx
mov     cx, 16h
push    cx
mov     cx, 792h
push    cx
call    sub_200C6
add     sp, 8
mov     ax, 6
push    ax
call    sub_20FAB
add     sp, 2
mov     ax, 16F2h
push    ds
push    ax
push    cs
call    near ptr sub_19D80
add     sp, 4
mov     [bp+var_3A], 0
jmp     short loc_18A23

loc_189D0:
inc     [bp+var_3C]

loc_189D3:
cmp     [bp+var_3C], 0Bh
jnb     short loc_18A20
mov     ax, offset byte_2230C
mov     es, seg_278AA
mul     es:word_2232E
mov     bx, ax
mov     ax, [bp+var_3C]
mov     cx, ax
shl     ax, 1
shl     ax, 1
add     ax, cx
shl     ax, 1
add     ax, cx
add     bx, ax
add     bx, [bp+var_3A]
shl     bx, 1
mov     es, seg_278AC
assume es:dseg
cmp     word ptr es:[bx+1AEEh], 1
jnz     short loc_189D0
mov     word ptr es:[bx+1AEEh], 6
push    [bp+var_3C]
push    [bp+var_3A]
push    cs
call    near ptr sub_1AE6E
add     sp, 4
jmp     short loc_189D0
align 2

loc_18A20:
inc     [bp+var_3A]

loc_18A23:
cmp     [bp+var_3A], 0Bh
jnb     short loc_18A30
mov     [bp+var_3C], 0
jmp     short loc_189D3

loc_18A30:
mov     es, seg_278B8
assume es:seg008
mov     es:byte_222BF, 0

loc_18A3A:
call    sub_12F8C

loc_18A3F:
pop     si
pop     di
mov     sp, bp
pop     bp
retf
sub_17D50 endp

align 2


; Attributes: bp-based frame

sub_18A46 proc far

var_1A8= byte ptr -1A8h
var_7C= word ptr -7Ch
var_7A= word ptr -7Ah
var_78= word ptr -78h
var_76= word ptr -76h
var_74= word ptr -74h
var_72= word ptr -72h
var_70= word ptr -70h
var_6E= word ptr -6Eh
var_6C= word ptr -6Ch
var_6A= word ptr -6Ah
var_68= word ptr -68h
var_66= word ptr -66h
var_64= word ptr -64h
var_62= word ptr -62h
var_60= word ptr -60h
var_5E= word ptr -5Eh
var_5C= word ptr -5Ch
var_5A= word ptr -5Ah
var_58= word ptr -58h
var_56= word ptr -56h
var_54= word ptr -54h
var_52= word ptr -52h
var_50= word ptr -50h
var_4E= word ptr -4Eh
var_4C= word ptr -4Ch
var_4A= word ptr -4Ah
var_48= word ptr -48h
var_46= word ptr -46h
var_44= word ptr -44h
var_42= word ptr -42h
var_40= word ptr -40h
var_3E= word ptr -3Eh
var_3C= word ptr -3Ch
var_3A= word ptr -3Ah
var_38= word ptr -38h
var_36= word ptr -36h
var_34= word ptr -34h
var_32= word ptr -32h
var_30= word ptr -30h
var_2E= word ptr -2Eh
var_2C= word ptr -2Ch
var_2A= word ptr -2Ah
var_28= word ptr -28h
var_26= word ptr -26h
var_24= word ptr -24h
var_22= word ptr -22h
var_20= word ptr -20h
var_1E= word ptr -1Eh
var_1C= word ptr -1Ch
var_1A= word ptr -1Ah
var_18= byte ptr -18h
var_4= word ptr -4
var_2= word ptr -2

push    bp
mov     bp, sp
sub     sp, 1A8h
push    di
push    si
mov     [bp+var_7C], 29h ; ')'
mov     [bp+var_7A], 51h ; 'Q'
mov     [bp+var_78], 2Ah ; '*'
mov     [bp+var_76], 52h ; 'R'
mov     [bp+var_72], 0Ch
mov     [bp+var_6E], 0Eh
mov     [bp+var_6A], 10h
mov     [bp+var_66], 12h
mov     [bp+var_64], 2Bh ; '+'
mov     [bp+var_62], 53h ; 'S'
mov     [bp+var_60], 2Dh ; '-'
mov     [bp+var_5E], 54h ; 'T'
mov     [bp+var_5C], 2Eh ; '.'
mov     [bp+var_5A], 57h ; 'W'
mov     [bp+var_58], 2Fh ; '/'
mov     [bp+var_56], 5Ch ; '\'
mov     [bp+var_54], 30h ; '0'
mov     [bp+var_52], 58h ; 'X'
mov     [bp+var_50], 1Eh
mov     ax, 16h
mov     [bp+var_74], ax
mov     [bp+var_4E], ax
mov     [bp+var_4C], 31h ; '1'
mov     [bp+var_4A], 59h ; 'Y'
mov     [bp+var_46], 56h ; 'V'
mov     [bp+var_44], 33h ; '3'
mov     [bp+var_42], 5Ah ; 'Z'
mov     [bp+var_40], 20h ; ' '
mov     ax, 18h
mov     [bp+var_70], ax
mov     [bp+var_3E], ax
mov     [bp+var_3C], 34h ; '4'
mov     [bp+var_3A], 5Bh ; '['
mov     [bp+var_38], 22h ; '"'
mov     ax, 1Ah
mov     [bp+var_6C], ax
mov     [bp+var_36], ax
mov     [bp+var_32], 5Eh ; '^'
mov     [bp+var_30], 36h ; '6'
mov     [bp+var_2E], 5Fh ; '_'
mov     [bp+var_2C], 24h ; '$'
mov     ax, 1Ch
mov     [bp+var_68], ax
mov     [bp+var_2A], ax
mov     [bp+var_28], 37h ; '7'
mov     [bp+var_26], 60h ; '`'
mov     [bp+var_24], 26h ; '&'
mov     [bp+var_22], 1Fh
mov     [bp+var_20], 38h ; '8'
mov     [bp+var_1E], 61h ; 'a'
mov     ax, 0FFFFh
mov     [bp+var_1C], ax
mov     [bp+var_1A], ax
mov     ax, 35h ; '5'
mov     [bp+var_34], ax
push    ax
mov     es, seg_278A8
push    es:word_22298
push    es:word_22296
mov     ax, 32h ; '2'
mov     [bp+var_48], ax
push    ax
mov     ax, 0Ah
push    ax
push    cs
call    near ptr sub_195D8
add     sp, 0Ah
call    sub_20CDA
mov     [bp+var_4], 0
lea     ax, [bp+var_7C]
mov     [bp+var_2], ax

loc_18B71:
mov     es, seg_278B8
mov     bx, [bp+var_2]
mov     bx, [bx]
cmp     byte ptr es:[bx+1Eh], 1
jz      short loc_18B85
jmp     loc_18C12

loc_18B85:
mov     ax, [bp+var_4]
inc     ax
push    ax
lea     ax, [bp+var_18]
push    ss
push    ax
push    cs
call    near ptr sub_1B7D4
add     sp, 6
lea     ax, [bp+var_1A8]
mov     di, ax
mov     si, 1705h
push    ss
pop     es
assume es:nothing
mov     cx, 6
rep movsw
movsb
mov     cx, ss
mov     bx, ax
mov     si, cx
push    si
push    ds
push    si
lea     di, [bp+var_18]
mov     si, bx
pop     ds
mov     cx, 0FFFFh
xor     ax, ax
repne scasb
not     cx
sub     di, cx
push    cx
xchg    di, si
push    ds
push    es
pop     ds
pop     es
mov     cx, 0FFFFh
repne scasb
dec     di
pop     cx
shr     cx, 1
rep movsw
adc     cx, cx
rep movsb
pop     ds
pop     si
push    ss
push    bx
mov     ax, 46h ; 'F'
push    ax
mov     ax, 1
push    ax
push    cs
call    near ptr sub_1958C
add     sp, 8
mov     bx, [bp+var_2]
push    word ptr [bx+2]
mov     es, seg_278A8
assume es:seg008
push    es:word_22298
push    es:word_22296
mov     ax, 5Ah ; 'Z'
push    ax
mov     ax, 8
push    ax
push    cs
call    near ptr sub_195D8
add     sp, 0Ah
call    sub_20CDA

loc_18C12:
inc     [bp+var_4]
add     [bp+var_2], 4
mov     bx, [bp+var_2]
cmp     word ptr [bx], 0FFFFh
jz      short loc_18C24
jmp     loc_18B71

loc_18C24:
pop     si
pop     di
mov     sp, bp
pop     bp
retf
sub_18A46 endp



; Attributes: bp-based frame

sub_18C2A proc far

var_30= word ptr -30h
var_2E= word ptr -2Eh
var_2C= word ptr -2Ch
var_2A= word ptr -2Ah
var_28= word ptr -28h
var_26= word ptr -26h
var_24= word ptr -24h
var_22= word ptr -22h
var_20= word ptr -20h
var_1E= word ptr -1Eh
var_1C= word ptr -1Ch
var_1A= word ptr -1Ah
var_18= word ptr -18h
var_16= word ptr -16h
var_14= word ptr -14h
var_12= word ptr -12h
var_10= word ptr -10h
var_E= word ptr -0Eh
var_C= word ptr -0Ch
var_A= word ptr -0Ah
var_8= word ptr -8
var_6= word ptr -6
var_4= word ptr -4
var_2= word ptr -2

push    bp
mov     bp, sp
sub     sp, 30h
push    si
mov     al, 0DDh
push    ax
mov     ax, 160h
push    ax
mov     ax, 16h
push    ax
mov     ax, 792h
push    ax
call    sub_1FCD9
add     sp, 8
mov     ax, 34h ; '4'
push    ax
mov     es, seg_278A8
push    es:word_22298
push    es:word_22296
mov     al, 0CCh
push    ax
mov     ax, 20h ; ' '
mov     [bp+var_26], ax
push    ax
mov     ax, 13h
mov     [bp+var_22], ax
push    ax
call    sub_20835
add     sp, 0Ch
sub     ax, ax
mov     [bp+var_6], ax
mov     [bp+var_1C], ax
mov     [bp+var_1A], ax
mov     [bp+var_18], ax
mov     [bp+var_16], ax
mov     [bp+var_14], ax
mov     [bp+var_12], ax
mov     [bp+var_10], ax
mov     [bp+var_E], ax
mov     [bp+var_C], ax
mov     [bp+var_24], ax
jmp     loc_18F87
align 2

loc_18C9A:
inc     [bp+var_4]

loc_18C9D:
cmp     [bp+var_4], 96h
jnb     short loc_18CC1
mov     ax, [bp+var_20]
mov     es, seg_278C6
assume es:dseg
mov     bx, [bp+var_4]
mov     cx, bx
shl     bx, 1
add     bx, cx
shl     bx, 1
add     bx, cx
shl     bx, 1
cmp     es:[bx+63Ch], ax
jnz     short loc_18C9A

loc_18CC1:
cmp     [bp+var_4], 96h
jnz     short loc_18CD9
mov     ax, 1712h
push    ds
push    ax              ; char *
call    _printf
add     sp, 4
push    cs
call    near ptr sub_1C48C

loc_18CD9:
mov     [bp+var_28], 0
jmp     short loc_18CE3

loc_18CE0:
inc     [bp+var_28]

loc_18CE3:
cmp     [bp+var_28], 9
jnb     short loc_18CF6
mov     ax, [bp+var_20]
mov     si, [bp+var_28]
shl     si, 1
cmp     [bp+si+var_1C], ax
jnz     short loc_18CE0

loc_18CF6:
cmp     [bp+var_28], 9
jz      short loc_18CFF
jmp     loc_18F84

loc_18CFF:
cmp     [bp+var_6], 7
jb      short loc_18D08
jmp     loc_18F84

loc_18D08:
mov     [bp+var_2E], 0
mov     es, seg_278C4
mov     bx, [bp+var_20]
mov     si, [bp+var_6]
shl     si, 1
mov     [bp+si+var_1C], bx
mov     ax, bx
shl     bx, 1
add     bx, ax
shl     bx, 1
mov     ax, es:[bx+286h]
mov     es, seg_278B2
assume es:seg008
add     ax, es:word_2229A
mov     dx, es:word_2229C
push    dx
push    ax
mov     ax, 4Ch ; 'L'
mov     [bp+var_2A], ax
push    ax
mov     si, bx
call    sub_1F737
add     sp, 6
mov     [bp+var_22], 14h
mov     ax, [bp+var_6]
inc     ax
inc     ax
mov     cx, 28h ; '('
mul     cx
mov     [bp+var_26], ax
mov     [bp+var_8], 2
mov     [bp+var_A], 20h ; ' '
mov     es, seg_278C4
assume es:dseg
cmp     byte ptr es:[si+282h], 0Ah
jnz     short loc_18D8C
mov     cl, 88h
push    cx
mov     cx, 4Ch ; 'L'
push    cx
mov     cx, 20h ; ' '
push    cx
mov     cx, 2
push    cx
mov     cx, 50h ; 'P'
mul     cx
add     ax, 14h
jmp     short loc_18DA8
align 2

loc_18D8C:
mov     al, 11h
push    ax
mov     ax, 50h ; 'P'
mul     [bp+var_2E]
add     ax, [bp+var_2A]
push    ax
push    [bp+var_A]
push    [bp+var_8]
mov     ax, 50h ; 'P'
mul     [bp+var_26]
add     ax, [bp+var_22]

loc_18DA8:
push    ax
call    sub_20256
add     sp, 0Ah
mov     es, seg_278C6
mov     bx, [bp+var_4]
mov     ax, bx
shl     bx, 1
add     bx, ax
shl     bx, 1
add     bx, ax
shl     bx, 1
push    word ptr es:[bx+648h]
push    word ptr es:[bx+646h]
mov     al, 0FFh
push    ax
mov     ax, [bp+var_6]
inc     ax
inc     ax
mov     cx, 28h ; '('
mul     cx
push    ax
mov     ax, 1Ah
push    ax
mov     si, bx
call    sub_20801
add     sp, 0Ah
mov     ax, 173Bh
push    ds
push    ax
mov     al, 0FFh
push    ax
mov     ax, 28h ; '('
mul     [bp+var_6]
add     ax, 62h ; 'b'
mov     [bp+var_26], ax
push    ax
mov     cx, 1Ah
push    cx
call    sub_20801
add     sp, 0Ah
mov     ax, 173Eh
push    ds
push    ax
mov     al, 0FFh
push    ax
push    [bp+var_26]
mov     cx, 26h ; '&'
push    cx
call    sub_20801
add     sp, 0Ah
mov     ax, 1741h
push    ds
push    ax
mov     al, 0FFh
push    ax
push    [bp+var_26]
mov     cx, 32h ; '2'
push    cx
call    sub_20801
add     sp, 0Ah
mov     al, 0FFh
push    ax
mov     cx, 3
push    cx
mov     es, seg_278C6
push    word ptr es:[si+63Eh]
push    [bp+var_26]
mov     dx, 1Eh
push    dx
push    cs
call    near ptr sub_1B8D6
add     sp, 0Ah
mov     al, 0FFh
push    ax
mov     cx, 3
push    cx
mov     es, seg_278C6
push    word ptr es:[si+640h]
push    [bp+var_26]
mov     dx, 2Ah ; '*'
push    dx
push    cs
call    near ptr sub_1B8D6
add     sp, 0Ah
mov     al, 0FFh
push    ax
mov     ax, 3
push    ax
mov     es, seg_278C6
push    word ptr es:[si+642h]
push    [bp+var_26]
mov     ax, 36h ; '6'
mov     [bp+var_22], ax
push    ax
push    cs
call    near ptr sub_1B8D6
add     sp, 0Ah
mov     es, seg_278C6
mov     ax, es:[si+63Eh]
mov     [bp+var_30], ax
mov     es, seg_278BC
assume es:seg008
mov     ax, es:word_2232C
mov     es, seg_278C6
assume es:dseg
cmp     es:[si+642h], ax
jnb     short loc_18EC0
sub     ax, es:[si+642h]
mov     [bp+var_1E], ax
jmp     short loc_18EC5
align 2

loc_18EC0:
mov     [bp+var_1E], 0

loc_18EC5:
mov     es, seg_278BE
assume es:seg008
mov     ax, es:word_222A6
mov     es, seg_278C6
assume es:dseg
mov     bx, [bp+var_4]
mov     cx, bx
shl     bx, 1
add     bx, cx
shl     bx, 1
add     bx, cx
shl     bx, 1
cmp     es:[bx+640h], ax
jbe     short loc_18EF4
sub     ax, es:[bx+640h]
neg     ax
mov     [bp+var_2], ax
jmp     short loc_18EF9
align 2

loc_18EF4:
mov     [bp+var_2], 0

loc_18EF9:
mov     [bp+var_22], 28h ; '('
mov     ax, [bp+var_6]
inc     ax
inc     ax
mov     cx, 28h ; '('
mul     cx
mov     [bp+var_26], ax
cmp     [bp+var_1E], 0
jnz     short loc_18F22
mov     dx, 1744h
push    ds
push    dx
mov     dl, 77h ; 'w'
push    dx
push    ax
push    cx
call    sub_20801
jmp     short loc_18F7E

loc_18F22:
mov     ax, 1759h
push    ds
push    ax
mov     al, 77h ; 'w'
push    ax
push    [bp+var_26]
push    [bp+var_22]
call    sub_20801
add     sp, 0Ah
add     [bp+var_22], 0Ch
mov     ax, [bp+var_30]
sub     dx, dx
div     [bp+var_1E]
or      dx, dx
jnz     short loc_18F52
mov     ax, [bp+var_30]
div     [bp+var_1E]
dec     ax
jmp     short loc_18F5A
align 2

loc_18F52:
mov     ax, [bp+var_30]
sub     dx, dx
div     [bp+var_1E]

loc_18F5A:
mul     [bp+var_2]
mov     [bp+var_2C], ax
cmp     ax, 2706h
jbe     short loc_18F6A
mov     [bp+var_2C], 2706h

loc_18F6A:
mov     al, 77h ; 'w'
push    ax
mov     ax, 4
push    ax
push    [bp+var_2C]
push    [bp+var_26]
push    [bp+var_22]
push    cs
call    near ptr sub_1B8D6

loc_18F7E:
add     sp, 0Ah
inc     [bp+var_6]

loc_18F84:
inc     [bp+var_24]

loc_18F87:
cmp     [bp+var_24], 79h ; 'y'
jnb     short loc_18FD0
mov     ax, offset byte_2230C
mov     es, seg_278AA
assume es:seg008
mul     es:word_2232E
mov     bx, ax
add     bx, [bp+var_24]
shl     bx, 1
mov     es, seg_278AC
assume es:dseg
mov     bx, es:[bx+1AEEh]
mov     [bp+var_20], bx
mov     ax, bx
shl     bx, 1
add     bx, ax
shl     bx, 1
mov     es, seg_278C4
cmp     byte ptr es:[bx+282h], 8
jz      short loc_18FC8
cmp     byte ptr es:[bx+282h], 0Ah
jnz     short loc_18F84

loc_18FC8:
mov     [bp+var_4], 0
jmp     loc_18C9D

loc_18FD0:
call    sub_20CDA
pop     si
mov     sp, bp
pop     bp
retf
sub_18C2A endp



; Attributes: bp-based frame

sub_18FDA proc far

var_C= dword ptr -0Ch
var_6= dword ptr -6
var_1= byte ptr -1

push    bp
mov     bp, sp
sub     sp, 12h
push    di
push    si
mov     [bp+var_1], 0
mov     bx, offset word_22292
mov     es, seg_278AE
assume es:seg008
mov     word ptr [bp+var_6], bx
mov     word ptr [bp+var_6+2], es
cmp     word ptr es:[bx], 0
jz      short loc_19042
mov     ax, offset byte_2230C
mov     es, seg_278AA
mul     es:word_2232E
mov     bx, offset word_22294
mov     es, seg_278B0
mov     word ptr [bp+var_C], bx
mov     word ptr [bp+var_C+2], es
mov     bx, es:[bx]
mov     cx, bx
shl     bx, 1
shl     bx, 1
add     bx, cx
shl     bx, 1
add     bx, cx
add     bx, ax
les     si, [bp+var_6]
assume es:nothing
add     bx, es:[si]
shl     bx, 1
mov     es, seg_278AC
assume es:dseg
mov     ax, es:[bx+1AECh]
cmp     ax, 0Bh
jz      short loc_1903E
cmp     ax, 0Ch
jnz     short loc_19042

loc_1903E:
mov     [bp+var_1], 1

loc_19042:
les     bx, [bp+var_6]
assume es:nothing
cmp     word ptr es:[bx], 0Ah
jnb     short loc_19094
mov     ax, offset byte_2230C
mov     es, seg_278AA
assume es:seg008
mul     es:word_2232E
mov     bx, offset word_22294
mov     es, seg_278B0
mov     word ptr [bp+var_C], bx
mov     word ptr [bp+var_C+2], es
mov     bx, es:[bx]
mov     cx, bx
shl     bx, 1
shl     bx, 1
add     bx, cx
shl     bx, 1
add     bx, cx
add     bx, ax
les     si, [bp+var_6]
assume es:nothing
add     bx, es:[si]
shl     bx, 1
mov     es, seg_278AC
assume es:dseg
mov     ax, es:[bx+1AF0h]
cmp     ax, 0Bh
jz      short loc_19090
cmp     ax, 0Ch
jnz     short loc_19094

loc_19090:
mov     [bp+var_1], 1

loc_19094:
mov     bx, offset word_22294
mov     es, seg_278B0
assume es:seg008
mov     word ptr [bp+var_C], bx
mov     word ptr [bp+var_C+2], es
cmp     word ptr es:[bx], 0
jz      short loc_190E6
mov     ax, offset byte_2230C
mov     es, seg_278AA
mul     es:word_2232E
mov     es, word ptr [bp+var_C+2]
assume es:nothing
mov     bx, es:[bx]
mov     cx, bx
shl     bx, 1
shl     bx, 1
add     bx, cx
shl     bx, 1
add     bx, cx
add     bx, ax
les     si, [bp+var_6]
add     bx, es:[si]
shl     bx, 1
mov     es, seg_278AC
assume es:dseg
mov     ax, es:[bx+1AD8h]
cmp     ax, 0Bh
jz      short loc_190E2
cmp     ax, 0Ch
jnz     short loc_190E6

loc_190E2:
mov     [bp+var_1], 1

loc_190E6:
les     bx, [bp+var_C]
assume es:nothing
cmp     word ptr es:[bx], 0Ah
jnb     short loc_1912E
mov     ax, offset byte_2230C
mov     es, seg_278AA
assume es:seg008
mul     es:word_2232E
mov     es, word ptr [bp+var_C+2]
assume es:nothing
mov     bx, es:[bx]
mov     cx, bx
shl     bx, 1
shl     bx, 1
add     bx, cx
shl     bx, 1
add     bx, cx
add     bx, ax
les     si, [bp+var_6]
add     bx, es:[si]
shl     bx, 1
mov     es, seg_278AC
assume es:dseg
mov     ax, es:[bx+1B04h]
cmp     ax, 0Bh
jz      short loc_1912A
cmp     ax, 0Ch
jnz     short loc_1912E

loc_1912A:
mov     [bp+var_1], 1

loc_1912E:
cmp     [bp+var_1], 0
jnz     short loc_1916A
mov     ax, 1766h
push    ds
push    ax
mov     ax, 32h ; '2'
push    ax
mov     ax, 0Bh
push    ax
push    cs
call    near ptr sub_1958C
add     sp, 8
call    sub_20CDA
sub     ax, ax
push    ax
mov     ax, 160h
push    ax
mov     ax, 16h
push    ax
mov     ax, 792h
push    ax
call    sub_200C6
add     sp, 8
pop     si
pop     di
mov     sp, bp
pop     bp
retf

loc_1916A:
push    cs
call    near ptr sub_1B62A
mov     ax, 1785h
push    ds
push    ax
push    cs
call    near ptr sub_19D80
add     sp, 4
les     bx, [bp+var_C]
assume es:nothing
mov     si, es:[bx]
mov     ax, si
shl     si, 1
shl     si, 1
add     si, ax
shl     si, 1
add     si, ax
les     bx, [bp+var_6]
add     si, es:[bx]
cmp     [bp+var_1], 1Ch
jnz     short loc_1919B
jmp     loc_1924B

loc_1919B:
cmp     [bp+var_1], 34h ; '4'
jnz     short loc_191A4
jmp     loc_1924B

loc_191A4:
call    sub_20CDA
mov     [bp+var_1], al
cmp     al, 43h ; 'C'
jz      short loc_191B4
cmp     al, 3Ah ; ':'
jnz     short loc_191F2

loc_191B4:
mov     es, seg_278AA
assume es:seg008
mov     ax, es:word_2232E
mov     es, seg_278C8
cmp     es:word_22326, ax
jbe     short loc_191F2
mov     es, seg_278AA
inc     es:word_2232E
cmp     es:word_2232E, 2Ch ; ','
jnz     short loc_191DD
inc     es:word_2232E

loc_191DD:
mov     ax, 0F8h
mul     es:word_2232E
mov     bx, ax
mov     es, seg_278AC
assume es:dseg
mov     si, es:[bx+1AEAh]
jmp     short loc_19234

loc_191F2:
mov     ax, seg seg008
mov     es, ax
assume es:seg008
cmp     [bp+var_1], 4Bh ; 'K'
jz      short loc_19203
cmp     [bp+var_1], 3Dh ; '='
jnz     short loc_19242

loc_19203:
cmp     es:word_2232E, 1
jbe     short loc_19242
dec     es:word_2232E
cmp     es:word_2232E, 2Ch ; ','
jnz     short loc_1921D
dec     es:word_2232E

loc_1921D:
mov     ax, 0F8h        ; "8"
mov     es, seg_278AA
mul     es:word_2232E
mov     bx, ax
mov     es, seg_278AC
assume es:dseg
mov     si, es:[bx+1AECh]

loc_19234:
mov     al, 5
push    ax
push    cs
call    near ptr sub_1B96C
add     sp, 2
push    cs
call    near ptr sub_1B62A

loc_19242:
cmp     [bp+var_1], 1Ch
jz      short loc_1924B
jmp     loc_1919B

loc_1924B:
mov     ax, 17BEh
push    ds
push    ax
push    cs
call    near ptr sub_19D80
add     sp, 4
mov     ax, si
mov     cx, 0Bh
mov     bx, si
sub     dx, dx
div     cx
mov     si, ax
mov     dx, si
shl     ax, 1
shl     ax, 1
add     ax, dx
shl     ax, 1
add     ax, dx
sub     bx, ax
les     di, [bp+var_6]
assume es:nothing
mov     es:[di], bx
les     bx, [bp+var_C]
mov     es:[bx], si
push    cs
call    near ptr sub_1A1E4
pop     si
pop     di
mov     sp, bp
pop     bp
retf
sub_18FDA endp



; Attributes: bp-based frame

sub_19288 proc far

arg_0= word ptr  6

push    bp
mov     bp, sp
sub     sp, 2
push    si
mov     bx, [bp+arg_0]
or      bx, bx
jz      short loc_1929F
mov     si, bx

loc_19298:
push    cs
call    near ptr sub_192A4
dec     si
jnz     short loc_19298

loc_1929F:
pop     si
mov     sp, bp
pop     bp
retf
sub_19288 endp



; Attributes: bp-based frame

sub_192A4 proc far

var_6= word ptr -6
var_4= word ptr -4
var_2= word ptr -2

push    bp
mov     bp, sp
sub     sp, 8
push    di
push    si
mov     [bp+var_4], 2
mov     [bp+var_2], 20h ; ' '
mov     [bp+var_6], 5

loc_192BB:
inc     word_23B2A
cmp     word_23B2A, 79h ; 'y'
jb      short loc_192DD
mov     word_23B2A, 0
cmp     byte_23B28, 1
jnz     short loc_192D8
sub     al, al
jmp     short loc_192DA
align 2

loc_192D8:
mov     al, 1

loc_192DA:
mov     byte_23B28, al

loc_192DD:
mov     ax, offset byte_2230C
mov     es, seg_278AA
assume es:seg008
mul     es:word_2232E
mov     bx, ax
add     bx, word_23B2A
shl     bx, 1
mov     es, seg_278AC
assume es:dseg
mov     si, es:[bx+1AEEh]
mov     bx, si
shl     bx, 1
add     bx, si
shl     bx, 1
mov     es, seg_278C4
cmp     byte ptr es:[bx+282h], 8
jz      short loc_19326
mov     bx, si
shl     bx, 1
add     bx, si
shl     bx, 1
mov     al, es:[bx+282h]
cmp     al, 0Ah
jz      short loc_19326
cmp     al, 7
jz      short loc_19326
jmp     loc_193D8

loc_19326:
sub     di, di
mov     dx, 80Ah
mov     [bp+var_2], dx
mov     [bp+var_4], si
mov     si, dx
mov     cx, [bp+var_4]
mov     ax, seg dseg
mov     ds, ax

loc_1933B:
cmp     [si], cx
jz      short loc_19348
inc     di
inc     si
inc     si
cmp     si, 936h
jb      short loc_1933B

loc_19348:
mov     ax, seg dseg
mov     ds, ax
cmp     di, 96h
jnz     short loc_19364
mov     ax, 17BFh
push    ds
push    ax              ; char *
call    _printf
add     sp, 4
push    cs
call    near ptr sub_1C48C

loc_19364:
mov     ax, word_23B2A
mov     cx, 0Bh
sub     dx, dx
div     cx
mov     bx, ax
mov     dx, bx
shl     ax, 1
shl     ax, 1
add     ax, dx
shl     ax, 1
add     ax, dx
mov     si, word_23B2A
sub     si, ax
shl     si, 1
shl     si, 1
add     si, 12h
mov     cl, 5
shl     bx, cl
add     bx, 18h
mov     [bp+var_2], bx
cmp     byte_23B28, 1
jnz     short loc_193AC
mov     ax, di
and     al, 0F0h
mov     cx, 27h ; '''
mul     cx
add     ax, di
shl     ax, 1
shl     ax, 1
push    ax
jmp     short loc_193BF

loc_193AC:
inc     di
mov     ax, di
mov     cx, di
and     al, 0F0h
mov     bx, 27h ; '''
mul     bx
add     cx, ax
shl     cx, 1
shl     cx, 1
push    cx

loc_193BF:
mov     ax, 20h ; ' '
push    ax
mov     ax, 2
push    ax
mov     ax, 50h ; 'P'
mul     [bp+var_2]
add     ax, si
push    ax
call    sub_1FE82
add     sp, 8

loc_193D8:
dec     [bp+var_6]
jz      short loc_193E0
jmp     loc_192BB

loc_193E0:
call    sub_1F9C9
pop     si
pop     di
mov     sp, bp
pop     bp
retf
sub_192A4 endp

align 2


; Attributes: bp-based frame

sub_193EC proc far

var_4= word ptr -4
arg_0= word ptr  6
arg_2= word ptr  8
arg_4= word ptr  0Ah
arg_6= word ptr  0Ch

push    bp
mov     bp, sp
sub     sp, 10h
push    di
push    si
mov     di, [bp+arg_2]
mov     es, seg_278B4
assume es:seg008
mov     ax, es:word_2229E
mov     dx, es:word_222A0
add     ax, 5965h
push    dx
push    ax
mov     ax, 6E00h
push    ax
call    sub_1F6D8
add     sp, 6
mov     ax, 6E00h
push    ax
mov     ax, 20h ; ' '
push    ax
mov     ax, 14h
push    ax
mov     ax, di
mov     cx, 50h ; 'P'
mul     cx
add     ax, 14h
push    ax
call    sub_200C6
add     sp, 8
lea     ax, [di+10h]
mov     [bp+var_4], ax
mov     ax, 14h
mul     [bp+arg_0]
shr     ax, 1
shr     ax, 1
inc     ax
jz      short loc_1948C
mov     ax, 50h ; 'P'
mul     [bp+var_4]
mov     si, ax
add     si, 14h
mov     ax, 14h
mul     [bp+arg_0]
shr     ax, 1
shr     ax, 1
inc     ax
mov     di, ax

loc_1945F:
mov     ax, 7300h
push    ax
mov     ax, 10h
push    ax
mov     ax, 14h
push    ax
push    si
call    sub_200C6
add     sp, 8
mov     es, seg_278B8
cmp     es:byte_222AF, 0
jnz     short loc_19485
call    sub_1F9C9

loc_19485:
add     si, 140h
dec     di
jnz     short loc_1945F

loc_1948C:
push    [bp+arg_6]
push    [bp+arg_4]
mov     al, 0FFh
push    ax
mov     ax, [bp+arg_2]
add     ax, 0Ch
push    ax
mov     ax, 16h
push    ax
call    sub_20801
add     sp, 0Ah
mov     ax, 5
push    ax
call    sub_1F9E2
add     sp, 2
pop     si
pop     di
mov     sp, bp
pop     bp
retf
sub_193EC endp



; Attributes: bp-based frame

sub_194BA proc far

var_4= word ptr -4
arg_0= word ptr  6
arg_2= word ptr  8
arg_4= word ptr  0Ah
arg_6= word ptr  0Ch
arg_8= word ptr  0Eh

push    bp
mov     bp, sp
sub     sp, 10h
push    di
push    si
mov     di, [bp+arg_2]
mov     es, seg_278B4
mov     ax, es:word_2229E
mov     dx, es:word_222A0
add     ax, 5965h
push    dx
push    ax
mov     ax, 6E00h
push    ax
call    sub_1F6D8
add     sp, 6
mov     ax, 6E00h
push    ax
mov     ax, 20h ; ' '
push    ax
mov     ax, 14h
push    ax
mov     ax, di
mov     cx, 50h ; 'P'
mul     cx
add     ax, 14h
push    ax
call    sub_200C6
add     sp, 8
lea     ax, [di+10h]
mov     [bp+var_4], ax
mov     ax, 14h
mul     [bp+arg_0]
shr     ax, 1
shr     ax, 1
inc     ax
jz      short loc_1955A
mov     ax, 50h ; 'P'
mul     [bp+var_4]
mov     si, ax
add     si, 14h
mov     ax, 14h
mul     [bp+arg_0]
shr     ax, 1
shr     ax, 1
inc     ax
mov     di, ax

loc_1952D:
mov     ax, 7300h
push    ax
mov     ax, 10h
push    ax
mov     ax, 14h
push    ax
push    si
call    sub_200C6
add     sp, 8
mov     es, seg_278B8
cmp     es:byte_222AF, 0
jnz     short loc_19553
call    sub_1F9C9

loc_19553:
add     si, 140h
dec     di
jnz     short loc_1952D

loc_1955A:
push    [bp+arg_8]
push    [bp+arg_6]
push    [bp+arg_4]
mov     al, 0FFh
push    ax
mov     ax, [bp+arg_2]
add     ax, 0Ch
push    ax
mov     ax, 16h
push    ax
call    sub_20835
add     sp, 0Ch
mov     ax, 5
push    ax
call    sub_1F9E2
add     sp, 2
pop     si
pop     di
mov     sp, bp
pop     bp
retf
sub_194BA endp

align 2


; Attributes: bp-based frame

sub_1958C proc far

arg_0= word ptr  6
arg_2= word ptr  8
arg_4= word ptr  0Ah
arg_6= word ptr  0Ch

push    bp
mov     bp, sp
push    si
mov     si, [bp+arg_2]
call    sub_1F9C9
mov     al, 0DDh
push    ax
mov     ax, 14h
mul     [bp+arg_0]
push    ax
mov     ax, 12h
push    ax
mov     ax, si
mov     cx, 50h ; 'P'
mul     cx
add     ax, 3D6h
push    ax
call    sub_1FCD9
add     sp, 8
push    [bp+arg_6]
push    [bp+arg_4]
mov     al, 0FFh
push    ax
lea     ax, [si+0Ch]
push    ax
mov     ax, 16h
push    ax
call    sub_20801
add     sp, 0Ah
pop     si
mov     sp, bp
pop     bp
retf
sub_1958C endp

align 2


; Attributes: bp-based frame

sub_195D8 proc far

arg_0= word ptr  6
arg_2= word ptr  8
arg_4= word ptr  0Ah
arg_6= word ptr  0Ch
arg_8= word ptr  0Eh

push    bp
mov     bp, sp
push    si
mov     si, [bp+arg_2]
call    sub_1F9C9
mov     al, 0DDh
push    ax
mov     ax, 14h
mul     [bp+arg_0]
push    ax
mov     ax, 12h
push    ax
mov     ax, si
mov     cx, 50h ; 'P'
mul     cx
add     ax, 3D6h
push    ax
call    sub_1FCD9
add     sp, 8
push    [bp+arg_8]
push    [bp+arg_6]
push    [bp+arg_4]
mov     al, 0FFh
push    ax
lea     ax, [si+0Ch]
push    ax
mov     ax, 16h
push    ax
call    sub_20835
add     sp, 0Ch
pop     si
mov     sp, bp
pop     bp
retf
sub_195D8 endp



; Attributes: bp-based frame

sub_19626 proc far

arg_0= word ptr  6

push    bp
mov     bp, sp
sub     sp, 0Ch
push    di
push    si
sub     di, di
mov     bx, 63Ch
mov     cx, [bp+arg_0]
mov     ax, seg dseg
mov     es, ax
assume es:dseg

loc_1963B:
cmp     es:[bx], cx
jz      short loc_1964A
inc     di
add     bx, 0Eh
cmp     bx, 112Ch
jb      short loc_1963B

loc_1964A:
mov     si, [bp+arg_0]
cmp     di, 0C8h
jnz     short loc_19664
mov     ax, 17ECh
push    ds
push    ax              ; char *
call    _printf
add     sp, 4
push    cs
call    near ptr sub_1C48C

loc_19664:
mov     al, 0DDh
push    ax
mov     ax, 80h ; '�'
push    ax
mov     ax, 6
push    ax
mov     cx, 4642h
push    cx
call    sub_1FCD9
add     sp, 8
mov     es, seg_278C4
mov     ax, si
shl     si, 1
add     si, ax
shl     si, 1
mov     ax, es:[si+286h]
mov     es, seg_278B2
assume es:seg008
add     ax, es:word_2229A
mov     dx, es:word_2229C
push    dx
push    ax
mov     ax, 4Ch ; 'L'
push    ax
call    sub_1F737
add     sp, 6
mov     es, seg_278C4
assume es:dseg
cmp     byte ptr es:[si+282h], 0Ah
jnz     short loc_196B8
mov     al, 88h
jmp     short loc_196BA

loc_196B8:
mov     al, 11h

loc_196BA:
push    ax
mov     ax, 4Ch ; 'L'
push    ax
mov     ax, 20h ; ' '
push    ax
mov     ax, 2
push    ax
mov     ax, 48C6h
push    ax
call    sub_20256
add     sp, 0Ah
mov     es, seg_278C6
mov     ax, di
shl     di, 1
add     di, ax
shl     di, 1
add     di, ax
shl     di, 1
push    word ptr es:[di+648h]
push    word ptr es:[di+646h]
mov     al, 0FFh
push    ax
mov     cx, 110h
push    cx
mov     cx, 42h ; 'B'
push    cx
call    sub_20801
add     sp, 0Ah
mov     ax, 1815h
push    ds
push    ax
mov     al, 0FFh
push    ax
mov     cx, 128h
push    cx
mov     dx, 43h ; 'C'
push    dx
call    sub_20801
add     sp, 0Ah
mov     ax, 1818h
push    ds
push    ax
mov     al, 0FFh
push    ax
mov     cx, 138h
push    cx
mov     dx, 43h ; 'C'
push    dx
call    sub_20801
add     sp, 0Ah
mov     ax, 181Bh
push    ds
push    ax
mov     al, 0FFh
push    ax
mov     cx, 148h
push    cx
mov     dx, 43h ; 'C'
push    dx
call    sub_20801
add     sp, 0Ah
mov     al, 0FFh
push    ax
mov     cx, 3
push    cx
mov     es, seg_278C6
push    word ptr es:[di+63Eh]
mov     dx, 128h
push    dx
mov     dx, 47h ; 'G'
push    dx
push    cs
call    near ptr sub_1B8D6
add     sp, 0Ah
mov     al, 0FFh
push    ax
mov     cx, 3
push    cx
mov     es, seg_278C6
push    word ptr es:[di+640h]
mov     dx, 138h
push    dx
mov     dx, 47h ; 'G'
push    dx
push    cs
call    near ptr sub_1B8D6
add     sp, 0Ah
mov     al, 0FFh
push    ax
mov     ax, 3
push    ax
mov     es, seg_278C6
push    word ptr es:[di+642h]
mov     ax, 148h
push    ax
mov     ax, 47h ; 'G'
push    ax
push    cs
call    near ptr sub_1B8D6
add     sp, 0Ah
pop     si
pop     di
mov     sp, bp
pop     bp
retf
sub_19626 endp

align 2



sub_197AC proc far
sub     al, al
push    ax
mov     ax, 190h
push    ax
mov     ax, 28h ; '('
push    ax
sub     ax, ax
push    ax
call    sub_1FDD6
add     sp, 8
mov     ax, 181Eh
push    ds
push    ax
mov     al, 0FFh
push    ax
mov     ax, 0BEh
push    ax
mov     ax, 1Fh
push    ax
push    cs
call    near ptr sub_19E30
add     sp, 0Ah
call    sub_20CDA
mov     ax, 1831h
push    ds
push    ax              ; char *
push    cs
call    near ptr sub_197EC
add     sp, 4
retf
sub_197AC endp

align 2


; Attributes: bp-based frame

; int __cdecl __far sub_197EC(char *)
sub_197EC proc far

var_14= dword ptr -14h
var_C= dword ptr -0Ch
var_8= word ptr -8
var_6= word ptr -6
arg_0= dword ptr  6

push    bp
mov     bp, sp
sub     sp, 14h
push    di
push    si
mov     es, seg_278CA
assume es:seg008
mov     ax, word ptr es:dword_222A2
mov     dx, word ptr es:dword_222A2+2
mov     word ptr [bp+var_C], ax
mov     word ptr [bp+var_C+2], dx
call    sub_21139
mov     ax, 183Dh
push    ds
push    ax              ; char *
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0] ; char *
call    _fopen
add     sp, 8
mov     word ptr [bp+var_14], ax
mov     word ptr [bp+var_14+2], dx
or      dx, ax
jnz     short loc_1986C
mov     ax, 1840h
push    ds
push    ax
mov     ax, 32h ; '2'
push    ax
mov     ax, 0Bh
push    ax
push    cs
call    near ptr sub_1958C
add     sp, 8
call    sub_20CDA
mov     ax, 0Fh
push    ax
call    sub_1F9E2
add     sp, 2
sub     ax, ax
push    ax
mov     ax, 160h
push    ax
mov     ax, 16h
push    ax
mov     ax, 792h
push    ax
call    sub_200C6
add     sp, 8
pop     si
pop     di
mov     sp, bp
pop     bp
retf
align 2

loc_1986C:
push    word ptr [bp+var_14+2]
push    ax              ; FILE *
mov     ax, 1
push    ax              ; size_t
mov     ax, 0FFFFh
push    ax              ; size_t
mov     es, seg_278CA
push    word ptr es:dword_222A2+2
push    word ptr es:dword_222A2 ; void *
call    _fread
add     sp, 0Ch
push    word ptr [bp+var_14+2]
push    word ptr [bp+var_14] ; FILE *
call    _fclose
add     sp, 4
les     bx, [bp+var_C]
assume es:nothing
add     word ptr [bp+var_C], 2
mov     ax, es:[bx]
mov     es, seg_278BA
assume es:seg008
mov     es:word_22328, ax
les     bx, [bp+var_C]
assume es:nothing
add     word ptr [bp+var_C], 2
mov     ax, es:[bx]
mov     es, seg_278BC
assume es:seg008
mov     es:word_2232C, ax
les     bx, [bp+var_C]
assume es:nothing
add     word ptr [bp+var_C], 2
mov     ax, es:[bx]
mov     es, seg_278BE
assume es:seg008
mov     es:word_222A6, ax
les     bx, [bp+var_C]
assume es:nothing
add     word ptr [bp+var_C], 2
mov     ax, es:[bx]
mov     es, seg_278CC
assume es:seg008
mov     es:word_22332, ax
les     bx, [bp+var_C]
assume es:nothing
add     word ptr [bp+var_C], 2
mov     ax, es:[bx]
mov     es, seg_278AA
assume es:seg008
mov     es:word_2232E, ax
les     bx, [bp+var_C]
assume es:nothing
add     word ptr [bp+var_C], 2
mov     ax, es:[bx]
mov     es, seg_278C8
assume es:seg008
mov     es:word_22326, ax
les     bx, [bp+var_C]
assume es:nothing
add     word ptr [bp+var_C], 2
mov     ax, es:[bx]
mov     es, seg_278AE
assume es:seg008
mov     es:word_22292, ax
les     bx, [bp+var_C]
assume es:nothing
add     word ptr [bp+var_C], 2
mov     ax, es:[bx]
mov     es, seg_278B0
assume es:seg008
mov     es:word_22294, ax
les     bx, [bp+var_C]
assume es:nothing
add     word ptr [bp+var_C], 2
mov     ax, es:[bx]
mov     es, seg_278C2
assume es:seg008
mov     es:word_222AC, ax
les     bx, [bp+var_C]
assume es:nothing
add     word ptr [bp+var_C], 2
mov     ax, es:[bx]
mov     es, seg_278CE
assume es:seg008
mov     es:word_22330, ax
les     bx, [bp+var_C]
assume es:nothing
add     word ptr [bp+var_C], 2
mov     ax, es:[bx]
mov     es, seg_278C0
assume es:seg008
mov     es:word_2232A, ax
les     bx, [bp+var_C]
assume es:nothing
add     word ptr [bp+var_C], 2
mov     ax, es:[bx]
mov     es, seg_278D0
assume es:seg008
mov     es:word_22290, ax
mov     es, seg_278B8
mov     ax, word ptr [bp+var_C]
mov     dx, word ptr [bp+var_C+2]
push    ds
mov     di, 1Eh
mov     si, ax
mov     ds, dx
mov     cx, 3Ch ; '<'
rep movsw
pop     ds
add     word ptr [bp+var_C], 78h ; 'x'
mov     es, seg_278AC
assume es:dseg
mov     ax, word ptr [bp+var_C]
mov     dx, word ptr [bp+var_C+2]
push    ds
mov     di, 1AE8h
mov     si, ax
mov     ds, dx
mov     cx, 1930h
rep movsw
pop     ds
sub     al, al
push    ax
mov     ax, 7E90h
push    ax
mov     ax, 7D00h
push    ax
push    cs
call    near ptr sub_1A986
add     sp, 6
push    cs
call    near ptr sub_1ABE6
mov     [bp+var_8], 0
mov     [bp+var_6], 63Ch
mov     bx, [bp+var_6]
mov     di, [bp+var_8]
mov     ax, seg dseg
mov     ds, ax

loc_199D3:
cmp     word ptr [bx], 5Bh ; '['
jz      short loc_199E2
inc     di
add     bx, 0Eh
cmp     bx, 112Ch
jb      short loc_199D3

loc_199E2:
mov     ax, seg dseg
mov     ds, ax
mov     es, seg_278C6
mov     ax, di
shl     di, 1
add     di, ax
shl     di, 1
add     di, ax
shl     di, 1
mov     word ptr es:[di+63Eh], 1F40h
mov     word ptr es:[di+640h], 1388h
mov     word ptr es:[di+642h], 3E8h
mov     ax, 908h
mov     cx, seg dseg
push    cx
push    ax
call    sub_1FA51
add     sp, 4
push    cs
call    near ptr sub_1BB2E
mov     ax, 908h
mov     cx, seg dseg
push    cx
push    ax
call    sub_1FB8A
add     sp, 4
mov     ax, 1
push    ax
call    sub_20FAB
add     sp, 2
pop     si
pop     di
mov     sp, bp
pop     bp
retf
sub_197EC endp



; Attributes: bp-based frame

; int __cdecl __far sub_19A42(char *)
sub_19A42 proc far

var_8= dword ptr -8
arg_0= dword ptr  6

push    bp
mov     bp, sp
sub     sp, 8
push    di
push    si
mov     es, seg_278BA
assume es:seg008
mov     ax, es:word_22328
mov     es, seg_278CA
les     bx, es:dword_222A2
assume es:nothing
mov     word ptr [bp+var_8], bx
mov     word ptr [bp+var_8+2], es
mov     es:[bx], ax
mov     es, seg_278BC
assume es:seg008
mov     ax, es:word_2232C
add     word ptr [bp+var_8], 2
les     bx, [bp+var_8]
assume es:nothing
mov     es:[bx], ax
mov     es, seg_278BE
assume es:seg008
mov     ax, es:word_222A6
les     bx, [bp+var_8]
assume es:nothing
inc     bx
inc     bx
mov     word ptr [bp+var_8], bx
mov     es:[bx], ax
mov     es, seg_278CC
assume es:seg008
mov     ax, es:word_22332
les     bx, [bp+var_8]
assume es:nothing
inc     bx
inc     bx
mov     word ptr [bp+var_8], bx
mov     es:[bx], ax
mov     es, seg_278AA
assume es:seg008
mov     ax, es:word_2232E
les     bx, [bp+var_8]
assume es:nothing
inc     bx
inc     bx
mov     word ptr [bp+var_8], bx
mov     es:[bx], ax
mov     es, seg_278C8
assume es:seg008
mov     ax, es:word_22326
les     bx, [bp+var_8]
assume es:nothing
inc     bx
inc     bx
mov     word ptr [bp+var_8], bx
mov     es:[bx], ax
mov     es, seg_278AE
assume es:seg008
mov     ax, es:word_22292
les     bx, [bp+var_8]
assume es:nothing
inc     bx
inc     bx
mov     word ptr [bp+var_8], bx
mov     es:[bx], ax
mov     es, seg_278B0
assume es:seg008
mov     ax, es:word_22294
les     bx, [bp+var_8]
assume es:nothing
inc     bx
inc     bx
mov     es:[bx], ax
lea     ax, [bx+2]
mov     word ptr [bp+var_8], ax
mov     word ptr [bp+var_8+2], es
mov     es, seg_278C2
assume es:seg008
mov     ax, es:word_222AC
les     bx, [bp+var_8]
assume es:nothing
mov     es:[bx], ax
mov     es, seg_278CE
assume es:seg008
mov     ax, es:word_22330
les     bx, [bp+var_8]
assume es:nothing
inc     bx
inc     bx
mov     word ptr [bp+var_8], bx
mov     es:[bx], ax
mov     es, seg_278C0
assume es:seg008
mov     ax, es:word_2232A
les     bx, [bp+var_8]
assume es:nothing
inc     bx
inc     bx
mov     word ptr [bp+var_8], bx
mov     es:[bx], ax
mov     es, seg_278D0
assume es:seg008
mov     ax, es:word_22290
les     bx, [bp+var_8]
assume es:nothing
inc     bx
inc     bx
mov     es:[bx], ax
lea     ax, [bx+2]
mov     word ptr [bp+var_8], ax
mov     ax, seg seg008
push    ds
mov     si, 1Eh
mov     ds, ax
assume ds:seg008
mov     di, word ptr [bp+var_8]
mov     cx, 3Ch ; '<'
rep movsw
pop     ds
assume ds:dseg
add     word ptr [bp+var_8], 78h ; 'x'
mov     ax, seg dseg
push    ds
mov     si, 1AE8h
mov     ds, ax
mov     di, word ptr [bp+var_8]
mov     cx, 1930h
rep movsw
pop     ds
mov     ax, 32F6h
push    ax              ; size_t
mov     es, seg_278CA
assume es:seg008
push    word ptr es:dword_222A2+2
push    word ptr es:dword_222A2 ; void *
push    word ptr [bp+arg_0+2]
push    word ptr [bp+arg_0] ; char *
push    cs
call    near ptr sub_1C08C
add     sp, 0Ah
sub     al, al
push    ax
mov     ax, 7E90h
push    ax
mov     ax, 7D00h
push    ax
push    cs
call    near ptr sub_1A986
add     sp, 6
push    cs
call    near ptr sub_1ABE6
pop     si
pop     di
mov     sp, bp
pop     bp
retf
sub_19A42 endp

align 2


; Attributes: bp-based frame

sub_19B9C proc far

var_1C= dword ptr -1Ch
var_18= word ptr -18h
var_16= word ptr -16h
var_14= word ptr -14h
var_12= word ptr -12h
var_10= word ptr -10h
var_E= word ptr -0Eh
var_C= word ptr -0Ch
var_A= word ptr -0Ah
var_8= word ptr -8
var_6= word ptr -6
var_4= word ptr -4
var_2= word ptr -2

push    bp
mov     bp, sp
sub     sp, 1Ch
push    si
mov     [bp+var_18], offset unk_23B9B
mov     [bp+var_16], ds
mov     [bp+var_14], offset unk_23B9C
mov     [bp+var_12], ds
mov     [bp+var_10], offset unk_23BA3
mov     [bp+var_E], ds
mov     [bp+var_C], offset unk_23BAB
mov     [bp+var_A], ds
mov     [bp+var_8], offset unk_23BB4
mov     [bp+var_6], ds
mov     [bp+var_4], offset unk_23BBB
mov     [bp+var_2], ds
mov     al, 0DDh
push    ax
mov     cx, 20h ; ' '
push    cx
mov     cx, 2
push    cx
mov     cx, 0F4Ah
push    cx
call    sub_1FCD9
add     sp, 8
mov     al, 0DDh
push    ax
mov     ax, 10h
push    ax
mov     ax, 4
push    ax
mov     ax, 1442h
push    ax
call    sub_1FCD9
add     sp, 8
mov     bx, offset byte_222B1
mov     es, seg_278B8
mov     word ptr [bp+var_1C], bx
mov     word ptr [bp+var_1C+2], es
cmp     byte ptr es:[bx], 0
jz      short loc_19C88
mov     bl, es:[bx]
sub     bh, bh
mov     ax, bx
shl     bx, 1
add     bx, ax
shl     bx, 1
mov     es, seg_278C4
assume es:dseg
mov     ax, es:[bx+3B2h]
mov     es, seg_278B2
assume es:seg008
add     ax, es:word_2229A
mov     dx, es:word_2229C
push    dx
push    ax
mov     ax, 4Ch ; 'L'
push    ax
call    sub_1F737
add     sp, 6
mov     al, 11h
push    ax
mov     ax, 4Ch ; 'L'
push    ax
mov     ax, 20h ; ' '
push    ax
mov     ax, 2
push    ax
mov     ax, 0F4Ah
push    ax
call    sub_20256
add     sp, 0Ah
les     bx, [bp+var_1C]
assume es:nothing
mov     al, es:[bx]
sub     ah, ah
mov     si, ax
shl     si, 1
shl     si, 1
push    [bp+si+var_16]
push    [bp+si+var_18]
mov     al, 55h ; 'U'
push    ax
mov     ax, 40h ; '@'
push    ax
mov     ax, 42h ; 'B'
push    ax
call    sub_20801
add     sp, 0Ah

loc_19C88:
pop     si
mov     sp, bp
pop     bp
retf
sub_19B9C endp

align 2


; Attributes: bp-based frame

sub_19C8E proc far

var_1C= dword ptr -1Ch
var_18= word ptr -18h
var_16= word ptr -16h
var_14= word ptr -14h
var_12= word ptr -12h
var_10= word ptr -10h
var_E= word ptr -0Eh
var_C= word ptr -0Ch
var_A= word ptr -0Ah
var_8= word ptr -8
var_6= word ptr -6
var_4= word ptr -4
var_2= word ptr -2

push    bp
mov     bp, sp
sub     sp, 1Ch
push    si
mov     [bp+var_18], offset unk_23BC2
mov     [bp+var_16], ds
mov     [bp+var_14], offset unk_23BC3
mov     [bp+var_12], ds
mov     [bp+var_10], offset unk_23BCB
mov     [bp+var_E], ds
mov     [bp+var_C], offset unk_23BD3
mov     [bp+var_A], ds
mov     [bp+var_8], offset unk_23BDC
mov     [bp+var_6], ds
mov     [bp+var_4], offset unk_23BE3
mov     [bp+var_2], ds
mov     al, 0DDh
push    ax
mov     cx, 20h ; ' '
push    cx
mov     cx, 2
push    cx
mov     cx, 1E4Ah
push    cx
call    sub_1FCD9
add     sp, 8
mov     al, 0DDh
push    ax
mov     ax, 10h
push    ax
mov     ax, 4
push    ax
mov     ax, 2342h
push    ax
call    sub_1FCD9
add     sp, 8
mov     bx, offset byte_222B2
mov     es, seg_278B8
assume es:seg008
mov     word ptr [bp+var_1C], bx
mov     word ptr [bp+var_1C+2], es
cmp     byte ptr es:[bx], 0
jz      short loc_19D7A
mov     bl, es:[bx]
sub     bh, bh
mov     ax, bx
shl     bx, 1
add     bx, ax
shl     bx, 1
mov     es, seg_278C4
assume es:dseg
mov     ax, es:[bx+3D0h]
mov     es, seg_278B2
assume es:seg008
add     ax, es:word_2229A
mov     dx, es:word_2229C
push    dx
push    ax
mov     ax, 4Ch ; 'L'
push    ax
call    sub_1F737
add     sp, 6
mov     al, 11h
push    ax
mov     ax, 4Ch ; 'L'
push    ax
mov     ax, 20h ; ' '
push    ax
mov     ax, 2
push    ax
mov     ax, 1E4Ah
push    ax
call    sub_20256
add     sp, 0Ah
les     bx, [bp+var_1C]
assume es:nothing
mov     al, es:[bx]
sub     ah, ah
mov     si, ax
shl     si, 1
shl     si, 1
push    [bp+si+var_16]
push    [bp+si+var_18]
mov     al, 0CCh
push    ax
mov     ax, 70h ; 'p'
push    ax
mov     ax, 42h ; 'B'
push    ax
call    sub_20801
add     sp, 0Ah

loc_19D7A:
pop     si
mov     sp, bp
pop     bp
retf
sub_19C8E endp

align 2


; Attributes: bp-based frame

sub_19D80 proc far

var_130= byte ptr -130h
var_12F= byte ptr -12Fh
var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  6
arg_2= word ptr  8

push    bp
mov     bp, sp
sub     sp, 130h
push    di
push    si
sub     si, si
mov     di, si
mov     [bp+var_4], 8
mov     ds, [bp+arg_2]

loc_19D95:
mov     [bp+var_2], 0
mov     cx, [bp+arg_0]

loc_19D9D:
mov     bx, cx
add     bx, si
cmp     byte ptr [bx], 9
jnz     short loc_19DAC
inc     si
dec     [bp+var_2]
jmp     short loc_19DDD

loc_19DAC:
mov     bx, cx
add     bx, si
cmp     byte ptr [bx], 0Ah
jz      short loc_19DE8
mov     bx, cx
add     bx, si
cmp     byte ptr [bx], 20h ; ' '
jnz     short loc_19DC8
mov     [bp+di+var_130], 20h ; ' '
inc     di
inc     si
jmp     short loc_19DDD
align 2

loc_19DC8:
mov     bx, cx
add     bx, si
mov     al, [bx]
mov     [bp+di+var_130], al
mov     al, [bx+1]
mov     [bp+di+var_12F], al
inc     di
inc     di
inc     si
inc     si

loc_19DDD:
inc     [bp+var_2]
cmp     [bp+var_2], 6
jb      short loc_19D9D
jmp     short loc_19DE9

loc_19DE8:
inc     si

loc_19DE9:
mov     [bp+di+var_130], 0Ah
inc     di
dec     [bp+var_4]
jnz     short loc_19D95
mov     ax, seg dseg
mov     ds, ax
mov     al, 0DDh
push    ax
mov     ax, 80h ; '�'
push    ax
mov     ax, 6
push    ax
mov     ax, 4642h
push    ax
call    sub_1FCD9
add     sp, 8
lea     ax, [bp+var_130]
push    ss
push    ax
mov     al, 0CCh
push    ax
mov     ax, 0E0h
push    ax
mov     ax, 42h ; 'B'
push    ax
call    sub_20801
add     sp, 0Ah
pop     si
pop     di
mov     sp, bp
pop     bp
retf
sub_19D80 endp

align 2


; Attributes: bp-based frame

sub_19E30 proc far

var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  6
arg_2= word ptr  8
arg_4= byte ptr  0Ah
arg_6= word ptr  0Ch
arg_8= word ptr  0Eh

push    bp
mov     bp, sp
sub     sp, 4
push    di
push    si
mov     di, [bp+arg_2]
mov     si, [bp+arg_6]
mov     ax, [bp+arg_8]
push    ax
push    si
mov     cl, [bp+arg_4]
push    cx
lea     dx, [di+1]
push    dx
push    [bp+arg_0]
mov     [bp+var_4], si
mov     [bp+var_2], ax
call    sub_20801
add     sp, 0Ah
push    [bp+var_2]
push    [bp+var_4]
mov     al, [bp+arg_4]
push    ax
push    di
push    [bp+arg_0]
call    sub_20801
add     sp, 0Ah
pop     si
pop     di
mov     sp, bp
pop     bp
retf
sub_19E30 endp



; Attributes: bp-based frame

sub_19E78 proc far

var_3= byte ptr -3
var_2= byte ptr -2
var_1= byte ptr -1
arg_0= byte ptr  6
arg_2= word ptr  8
arg_4= word ptr  0Ah

push    bp
mov     bp, sp
sub     sp, 8
push    di
push    si
sub     al, al
mov     [bp+var_3], al
mov     [bp+var_1], al
mov     ax, 0Ah
push    ax
call    sub_1F9E2
add     sp, 2
call    sub_20D08
mov     [bp+var_2], al
cmp     al, 1Ch
jnz     short loc_19EA3
jmp     loc_19FD9

loc_19EA3:
mov     si, [bp+arg_4]
mov     di, [bp+arg_2]

loc_19EA9:
cmp     [bp+var_2], 34h ; '4'
jnz     short loc_19EB2
jmp     loc_19FD9

loc_19EB2:
cmp     [bp+var_2], 0
jnz     short loc_19EBB
jmp     loc_19FD9

loc_19EBB:
call    sub_20D08
mov     [bp+var_2], al
cmp     al, 43h ; 'C'
jz      short loc_19ECB
cmp     al, 3Ah ; ':'
jnz     short loc_19F0E

loc_19ECB:
cmp     [bp+var_3], 0
jz      short loc_19F0E
dec     [bp+var_3]
call    sub_1F9C9
mov     al, 0DDh
push    ax
mov     ax, 10h
push    ax
mov     ax, 1
push    ax
mov     ax, si
mov     cx, 50h ; 'P'
mul     cx
add     ax, di
push    ax
call    sub_1FCD9
add     sp, 8
mov     es, seg_278B2
assume es:seg008
mov     ax, es:word_2229A
mov     dx, es:word_2229C
sub     ax, 337h
push    dx
push    ax
sub     si, 14h
jmp     short loc_19F5C
align 2

loc_19F0E:
cmp     [bp+var_2], 4Bh ; 'K'
jz      short loc_19F1A
cmp     [bp+var_2], 3Dh ; '='
jnz     short loc_19F7A

loc_19F1A:
mov     al, [bp+arg_0]
cmp     [bp+var_3], al
jz      short loc_19F7A
inc     [bp+var_3]
call    sub_1F9C9
mov     al, 0DDh
push    ax
mov     ax, 10h
push    ax
mov     ax, 1
push    ax
mov     ax, si
mov     cx, 50h ; 'P'
mul     cx
add     ax, di
push    ax
call    sub_1FCD9
add     sp, 8
mov     es, seg_278B2
mov     ax, es:word_2229A
mov     dx, es:word_2229C
sub     ax, 337h
push    dx
push    ax
add     si, 14h

loc_19F5C:
mov     ax, si
mov     cx, 50h ; 'P'
mul     cx
add     ax, di
push    ax
call    sub_1F696
add     sp, 6
mov     ax, 0Ah
push    ax
call    sub_1F9E2
add     sp, 2

loc_19F7A:
call    sub_1F9C9
cmp     [bp+var_1], 14h
ja      short loc_19FAE
mov     es, seg_278B2
mov     ax, es:word_2229A
mov     dx, es:word_2229C
sub     ax, 337h

loc_19F95:
push    dx
push    ax
mov     ax, si
mov     cx, 50h ; 'P'
mul     cx
add     ax, di
push    ax
call    sub_1F696
add     sp, 6
inc     [bp+var_1]
jmp     short loc_19FD0

loc_19FAE:
cmp     [bp+var_1], 14h
jb      short loc_19FCC
cmp     [bp+var_1], 28h ; '('
ja      short loc_19FCC
mov     es, seg_278B2
mov     ax, es:word_2229A
mov     dx, es:word_2229C
sub     ax, 2C8h
jmp     short loc_19F95

loc_19FCC:
mov     [bp+var_1], 0

loc_19FD0:
cmp     [bp+var_2], 1Ch
jz      short loc_19FD9
jmp     loc_19EA9

loc_19FD9:
mov     ax, 0Ah
push    ax
call    sub_1F9E2
add     sp, 2
cmp     [bp+var_2], 0
jnz     short loc_19FEF
mov     [bp+var_3], 0FFh

loc_19FEF:
mov     al, [bp+var_3]
pop     si
pop     di
mov     sp, bp
pop     bp
retf
sub_19E78 endp



; Attributes: bp-based frame

sub_19FF8 proc far

var_E= word ptr -0Eh
var_C= word ptr -0Ch
var_8= word ptr -8
var_6= word ptr -6
var_4= word ptr -4
var_2= word ptr -2

push    bp
mov     bp, sp
sub     sp, 10h
push    di
push    si
mov     si, 42h ; 'B'
mov     [bp+var_6], 90h
sub     ax, ax
mov     [bp+var_C], ax
mov     [bp+var_8], ax
mov     es, seg_278CE
mov     bx, es:word_22330
or      bx, bx
jz      short loc_1A07B
mov     [bp+var_E], bx
mov     [bp+var_2], 2D00h
mov     [bp+var_4], ax
mov     di, ax

loc_1A02A:
mov     [bp+var_C], di
mov     ax, [bp+var_4]
add     ax, di
cmp     ax, 18h
jz      short loc_1A07B
mov     es, seg_278B2
mov     ax, es:word_2229A
mov     dx, es:word_2229C
sub     ax, 3CBh
push    dx
push    ax
mov     ax, [bp+var_2]
add     ax, si
push    ax
call    sub_1F696
add     sp, 6
inc     si
inc     si
inc     di
cmp     di, 6
jnz     short loc_1A073
sub     di, di
add     [bp+var_4], 6
inc     [bp+var_8]
mov     si, 42h ; 'B'
add     byte ptr [bp+var_2+1], 5
add     [bp+var_6], 10h

loc_1A073:
dec     [bp+var_E]
jnz     short loc_1A02A
mov     [bp+var_C], di

loc_1A07B:
mov     es, seg_278C0
mov     ax, es:word_2232A
mov     [bp+var_E], ax
or      ax, ax
jz      short loc_1A0F2
mov     ax, 50h ; 'P'
mul     [bp+var_6]
mov     [bp+var_2], ax
mov     ax, [bp+var_8]
mov     cx, ax
shl     ax, 1
add     ax, cx
shl     ax, 1
mov     [bp+var_4], ax
mov     di, [bp+var_C]

loc_1A0A4:
mov     ax, [bp+var_4]
add     ax, di
cmp     ax, 18h
jz      short loc_1A0EF
mov     es, seg_278B2
mov     ax, es:word_2229A
mov     dx, es:word_2229C
sub     ax, 381h
push    dx
push    ax
mov     ax, [bp+var_2]
add     ax, si
push    ax
call    sub_1F696
add     sp, 6
inc     si
inc     si
inc     di
cmp     di, 6
jnz     short loc_1A0EA
sub     di, di
add     [bp+var_4], 6
inc     [bp+var_8]
mov     si, 42h ; 'B'
add     byte ptr [bp+var_2+1], 5
add     [bp+var_6], 10h

loc_1A0EA:
dec     [bp+var_E]
jnz     short loc_1A0A4

loc_1A0EF:
mov     [bp+var_C], di

loc_1A0F2:
mov     es, seg_278C2
mov     ax, es:word_222AC
mov     [bp+var_E], ax
or      ax, ax
jz      short loc_1A16C
mov     ax, 50h ; 'P'
mul     [bp+var_6]
mov     [bp+var_2], ax
mov     ax, [bp+var_8]
mov     cx, ax
shl     ax, 1
add     ax, cx
shl     ax, 1
mov     [bp+var_4], ax
mov     di, [bp+var_C]

loc_1A11B:
mov     [bp+var_C], di
mov     ax, [bp+var_4]
add     ax, di
cmp     ax, 18h
jz      short loc_1A16C
mov     es, seg_278B2
mov     ax, es:word_2229A
mov     dx, es:word_2229C
sub     ax, 40Ch
push    dx
push    ax
mov     ax, [bp+var_2]
add     ax, si
push    ax
call    sub_1F696
add     sp, 6
inc     si
inc     si
inc     di
cmp     di, 6
jnz     short loc_1A164
sub     di, di
add     [bp+var_4], 6
inc     [bp+var_8]
mov     si, 42h ; 'B'
add     byte ptr [bp+var_2+1], 5
add     [bp+var_6], 10h

loc_1A164:
dec     [bp+var_E]
jnz     short loc_1A11B
mov     [bp+var_C], di

loc_1A16C:
mov     [bp+var_2], 10h
mov     bx, [bp+var_8]
add     bx, 4
mov     ax, bx
shl     bx, 1
add     bx, ax
shl     bx, 1
sub     bx, [bp+var_C]
jz      short loc_1A1DE
mov     [bp+var_E], bx
mov     ax, 50h ; 'P'
mul     [bp+var_6]
mov     [bp+var_2], ax
mov     ax, [bp+var_8]
mov     cx, ax
shl     ax, 1
add     ax, cx
shl     ax, 1
mov     [bp+var_4], ax
mov     di, [bp+var_C]

loc_1A1A1:
mov     ax, [bp+var_4]
add     ax, di
cmp     ax, 18h
jz      short loc_1A1DE
mov     al, 0DDh
push    ax
mov     ax, 10h
push    ax
mov     ax, 1
push    ax
mov     cx, [bp+var_2]
add     cx, si
push    cx
call    sub_1FCD9
add     sp, 8
inc     si
inc     si
inc     di
cmp     di, 6
jnz     short loc_1A1D9
sub     di, di
add     [bp+var_4], 6
mov     si, 42h ; 'B'
add     byte ptr [bp+var_2+1], 5

loc_1A1D9:
dec     [bp+var_E]
jnz     short loc_1A1A1

loc_1A1DE:
pop     si
pop     di
mov     sp, bp
pop     bp
retf
sub_19FF8 endp




sub_1A1E4 proc far
mov     es, seg_278B2
push    es:word_2229C
push    es:word_2229A
mov     ax, 4Ch ; 'L'
push    ax
call    sub_1F737
add     sp, 6
mov     es, seg_278B2
mov     ax, es:word_2229A
mov     dx, es:word_2229C
add     ah, 7Dh ; '}'
push    dx
push    ax
mov     ax, 0A4Ch
push    ax
call    sub_1F737
add     sp, 6
sub     al, al
push    ax
mov     ax, 0A4Ch
push    ax
mov     ax, 20h ; ' '
push    ax
mov     cx, 2
push    cx
mov     dx, 4Ch ; 'L'
push    dx
call    sub_20385
add     sp, 0Ah
mov     ax, 4Ch ; 'L'
push    ax
mov     ax, 20h ; ' '
push    ax
mov     ax, 2
push    ax
mov     ax, 280h
mov     es, seg_278B0
mul     es:word_22294
mov     es, seg_278AE
add     ax, es:word_22292
shl     ax, 1
shl     ax, 1
add     ax, 792h
push    ax
call    sub_1FE82
add     sp, 8
mov     ax, 0Ah
push    ax
call    sub_1F9E2
add     sp, 2
retf
sub_1A1E4 endp

align 2


; Attributes: bp-based frame

sub_1A276 proc far

var_10= word ptr -10h
var_C= word ptr -0Ch
var_A= word ptr -0Ah
var_8= word ptr -8
var_6= word ptr -6
var_4= word ptr -4
var_2= word ptr -2
arg_0= byte ptr  6
arg_2= word ptr  8
arg_4= word ptr  0Ah

push    bp
mov     bp, sp
sub     sp, 12h
mov     ax, [bp+arg_2]
shl     ax, 1
shl     ax, 1
add     ax, 12h
mov     [bp+var_6], ax
mov     cl, 5
mov     ax, [bp+arg_4]
shl     ax, cl
add     ax, 18h
mov     [bp+var_8], ax
mov     es, seg_278B8
cmp     es:byte_222AF, 0
jz      short loc_1A2A5
jmp     loc_1A49C

loc_1A2A5:
cmp     [bp+arg_0], 1
jz      short loc_1A2AE
jmp     loc_1A342

loc_1A2AE:
mov     [bp+var_2], 4
mov     [bp+var_4], 20h ; ' '
mov     [bp+var_C], 8
mov     [bp+var_10], 100h
mov     [bp+var_A], 0

loc_1A2C7:
mov     ax, 50h ; 'P'
mul     [bp+var_10]
add     ax, [bp+var_C]
push    ax
push    [bp+var_4]
push    [bp+var_2]
mov     ax, 50h ; 'P'
mul     [bp+var_8]
add     ax, [bp+var_6]
push    ax
call    sub_1FE82
add     sp, 8
add     [bp+var_C], 8
push    cs
call    near ptr sub_192A4
inc     [bp+var_A]
cmp     [bp+var_A], 7
jb      short loc_1A2C7
mov     [bp+var_10], 120h
sub     ax, ax
mov     [bp+var_C], ax
mov     [bp+var_A], ax
jmp     short loc_1A30D
align 2

loc_1A30A:
inc     [bp+var_A]

loc_1A30D:
cmp     [bp+var_A], 9
jb      short loc_1A316
jmp     loc_1A68A

loc_1A316:
mov     ax, 50h ; 'P'
mul     [bp+var_10]
add     ax, [bp+var_C]
push    ax
push    [bp+var_4]
push    [bp+var_2]
mov     ax, 50h ; 'P'
mul     [bp+var_8]
add     ax, [bp+var_6]
push    ax
call    sub_1FE82
add     sp, 8
add     [bp+var_C], 8
push    cs
call    near ptr sub_192A4
jmp     short loc_1A30A

loc_1A342:
cmp     [bp+arg_0], 2
jz      short loc_1A34B
jmp     loc_1A3E4

loc_1A34B:
sub     [bp+var_6], 4
mov     [bp+var_2], 4
mov     [bp+var_4], 20h ; ' '
mov     [bp+var_C], 38h ; '8'
mov     [bp+var_10], 120h
mov     [bp+var_A], 0

loc_1A368:
mov     ax, 50h ; 'P'
mul     [bp+var_10]
add     ax, [bp+var_C]
push    ax
push    [bp+var_4]
push    [bp+var_2]
mov     ax, 50h ; 'P'
mul     [bp+var_8]
add     ax, [bp+var_6]
push    ax
call    sub_1FE82
add     sp, 8
sub     [bp+var_C], 8
push    cs
call    near ptr sub_192A4
inc     [bp+var_A]
cmp     [bp+var_A], 8
jb      short loc_1A368
mov     [bp+var_C], 38h ; '8'
mov     [bp+var_10], 100h
mov     [bp+var_A], 0
jmp     short loc_1A3AF

loc_1A3AC:
inc     [bp+var_A]

loc_1A3AF:
cmp     [bp+var_A], 8
jb      short loc_1A3B8
jmp     loc_1A68A

loc_1A3B8:
mov     ax, 50h ; 'P'
mul     [bp+var_10]
add     ax, [bp+var_C]
push    ax
push    [bp+var_4]
push    [bp+var_2]
mov     ax, 50h ; 'P'
mul     [bp+var_8]
add     ax, [bp+var_6]
push    ax
call    sub_1FE82
add     sp, 8
sub     [bp+var_C], 8
push    cs
call    near ptr sub_192A4
jmp     short loc_1A3AC

loc_1A3E4:
cmp     [bp+arg_0], 3
jnz     short loc_1A43E
mov     [bp+var_2], 2
mov     [bp+var_4], 40h ; '@'
mov     [bp+var_C], 4
mov     [bp+var_10], 140h
mov     [bp+var_A], 0
jmp     short loc_1A409
align 2

loc_1A406:
inc     [bp+var_A]

loc_1A409:
cmp     [bp+var_A], 10h
jb      short loc_1A412
jmp     loc_1A68A

loc_1A412:
mov     ax, 50h ; 'P'
mul     [bp+var_10]
add     ax, [bp+var_C]
push    ax
push    [bp+var_4]
push    [bp+var_2]
mov     ax, 50h ; 'P'
mul     [bp+var_8]
add     ax, [bp+var_6]
push    ax
call    sub_1FE82
add     sp, 8
add     [bp+var_C], 4
push    cs
call    near ptr sub_192A4
jmp     short loc_1A406

loc_1A43E:
cmp     [bp+arg_0], 4
jz      short loc_1A447
jmp     loc_1A68A

loc_1A447:
sub     [bp+var_8], 20h ; ' '
mov     [bp+var_2], 2
mov     [bp+var_4], 40h ; '@'
mov     [bp+var_C], 3Ch ; '<'
mov     [bp+var_10], 140h
mov     [bp+var_A], 0

loc_1A464:
mov     ax, 50h ; 'P'
mul     [bp+var_10]
add     ax, [bp+var_C]
push    ax
push    [bp+var_4]
push    [bp+var_2]
mov     ax, 50h ; 'P'
mul     [bp+var_8]
add     ax, [bp+var_6]
push    ax
call    sub_1FE82
add     sp, 8
sub     [bp+var_C], 4
push    cs
call    near ptr sub_192A4
inc     [bp+var_A]
cmp     [bp+var_A], 10h
jb      short loc_1A464
mov     sp, bp
pop     bp
retf
align 2

loc_1A49C:
cmp     [bp+arg_0], 1
jz      short loc_1A4A5
jmp     loc_1A538

loc_1A4A5:
mov     [bp+var_2], 4
mov     [bp+var_4], 20h ; ' '
mov     [bp+var_C], 10h
mov     [bp+var_10], 100h
mov     [bp+var_A], 0

loc_1A4BE:
mov     ax, 50h ; 'P'
mul     [bp+var_10]
add     ax, [bp+var_C]
push    ax
push    [bp+var_4]
push    [bp+var_2]
mov     ax, 50h ; 'P'
mul     [bp+var_8]
add     ax, [bp+var_6]
push    ax
call    sub_1FE82
add     sp, 8
add     [bp+var_C], 10h
push    cs
call    near ptr sub_192A4
inc     [bp+var_A]
cmp     [bp+var_A], 3
jb      short loc_1A4BE
mov     [bp+var_10], 120h
sub     ax, ax
mov     [bp+var_C], ax
mov     [bp+var_A], ax
jmp     short loc_1A503

loc_1A500:
inc     [bp+var_A]

loc_1A503:
cmp     [bp+var_A], 5
jb      short loc_1A50C
jmp     loc_1A68A

loc_1A50C:
mov     ax, 50h ; 'P'
mul     [bp+var_10]
add     ax, [bp+var_C]
push    ax
push    [bp+var_4]
push    [bp+var_2]
mov     ax, 50h ; 'P'
mul     [bp+var_8]
add     ax, [bp+var_6]
push    ax
call    sub_1FE82
add     sp, 8
add     [bp+var_C], 10h
push    cs
call    near ptr sub_192A4
jmp     short loc_1A500

loc_1A538:
cmp     [bp+arg_0], 2
jz      short loc_1A541
jmp     loc_1A5DA

loc_1A541:
sub     [bp+var_6], 4
mov     [bp+var_2], 4
mov     [bp+var_4], 20h ; ' '
mov     [bp+var_C], 30h ; '0'
mov     [bp+var_10], 120h
mov     [bp+var_A], 0

loc_1A55E:
mov     ax, 50h ; 'P'
mul     [bp+var_10]
add     ax, [bp+var_C]
push    ax
push    [bp+var_4]
push    [bp+var_2]
mov     ax, 50h ; 'P'
mul     [bp+var_8]
add     ax, [bp+var_6]
push    ax
call    sub_1FE82
add     sp, 8
sub     [bp+var_C], 10h
push    cs
call    near ptr sub_192A4
inc     [bp+var_A]
cmp     [bp+var_A], 4
jb      short loc_1A55E
mov     [bp+var_C], 30h ; '0'
mov     [bp+var_10], 100h
mov     [bp+var_A], 0
jmp     short loc_1A5A5

loc_1A5A2:
inc     [bp+var_A]

loc_1A5A5:
cmp     [bp+var_A], 4
jb      short loc_1A5AE
jmp     loc_1A68A

loc_1A5AE:
mov     ax, 50h ; 'P'
mul     [bp+var_10]
add     ax, [bp+var_C]
push    ax
push    [bp+var_4]
push    [bp+var_2]
mov     ax, 50h ; 'P'
mul     [bp+var_8]
add     ax, [bp+var_6]
push    ax
call    sub_1FE82
add     sp, 8
sub     [bp+var_C], 10h
push    cs
call    near ptr sub_192A4
jmp     short loc_1A5A2

loc_1A5DA:
cmp     [bp+arg_0], 3
jnz     short loc_1A634
mov     [bp+var_2], 2
mov     [bp+var_4], 40h ; '@'
mov     [bp+var_C], 8
mov     [bp+var_10], 140h
mov     [bp+var_A], 0
jmp     short loc_1A5FF
align 2

loc_1A5FC:
inc     [bp+var_A]

loc_1A5FF:
cmp     [bp+var_A], 8
jb      short loc_1A608
jmp     loc_1A68A

loc_1A608:
mov     ax, 50h ; 'P'
mul     [bp+var_10]
add     ax, [bp+var_C]
push    ax
push    [bp+var_4]
push    [bp+var_2]
mov     ax, 50h ; 'P'
mul     [bp+var_8]
add     ax, [bp+var_6]
push    ax
call    sub_1FE82
add     sp, 8
add     [bp+var_C], 8
push    cs
call    near ptr sub_192A4
jmp     short loc_1A5FC

loc_1A634:
cmp     [bp+arg_0], 4
jnz     short loc_1A68A
sub     [bp+var_8], 20h ; ' '
mov     [bp+var_2], 2
mov     [bp+var_4], 40h ; '@'
mov     [bp+var_C], 38h ; '8'
mov     [bp+var_10], 140h
mov     [bp+var_A], 0

loc_1A657:
mov     ax, 50h ; 'P'
mul     [bp+var_10]
add     ax, [bp+var_C]
push    ax
push    [bp+var_4]
push    [bp+var_2]
mov     ax, 50h ; 'P'
mul     [bp+var_8]
add     ax, [bp+var_6]
push    ax
call    sub_1FE82
add     sp, 8
sub     [bp+var_C], 8
push    cs
call    near ptr sub_192A4
inc     [bp+var_A]
cmp     [bp+var_A], 8
jb      short loc_1A657

loc_1A68A:
mov     sp, bp
pop     bp
retf
sub_1A276 endp



; Attributes: bp-based frame

sub_1A68E proc far

var_C= dword ptr -0Ch
var_8= dword ptr -8
var_1= byte ptr -1

push    bp
mov     bp, sp
sub     sp, 0Ch
push    di
push    si

loc_1A696:
call    sub_20D08
mov     [bp+var_1], al
cmp     al, 48h ; 'H'
jz      short loc_1A6A9
cmp     al, 3Ch ; '<'
jz      short loc_1A6A9
jmp     loc_1A738

loc_1A6A9:
mov     bx, offset word_22292
mov     es, seg_278AE
mov     word ptr [bp+var_8], bx
mov     word ptr [bp+var_8+2], es
cmp     word ptr es:[bx], 0Ah
jz      short loc_1A738
mov     ax, offset byte_2230C
mov     es, seg_278AA
mul     es:word_2232E
mov     bx, offset word_22294
mov     es, seg_278B0
mov     word ptr [bp+var_C], bx
mov     word ptr [bp+var_C+2], es
mov     bx, es:[bx]
mov     cx, bx
shl     bx, 1
shl     bx, 1
add     bx, cx
shl     bx, 1
add     bx, cx
add     bx, ax
les     di, [bp+var_8]
assume es:nothing
add     bx, es:[di]
shl     bx, 1
add     bx, 1AF0h
mov     es, seg_278AC
assume es:dseg
mov     si, bx
mov     word ptr [bp-2], es
cmp     word ptr es:[bx], 6
jnz     short loc_1A726
les     bx, [bp+var_C]
assume es:nothing
push    word ptr es:[bx]
les     bx, [bp+var_8]
push    word ptr es:[bx]
mov     al, 1
push    ax
push    cs
call    near ptr sub_1A276
add     sp, 6
les     bx, [bp+var_8]

loc_1A71A:
inc     word ptr es:[bx]

loc_1A71D:
call    sub_11588
jmp     loc_1A696
align 2

loc_1A726:
push    word ptr [bp-2]
push    si
mov     al, 1

loc_1A72C:
push    ax
call    sub_123EE
add     sp, 6
jmp     loc_1A696

loc_1A738:
cmp     [bp+var_1], 46h ; 'F'
jz      short loc_1A747
cmp     [bp+var_1], 3Bh ; ';'
jz      short loc_1A747
jmp     loc_1A7C8

loc_1A747:
mov     bx, offset word_22292
mov     es, seg_278AE
assume es:seg008
mov     word ptr [bp+var_8], bx
mov     word ptr [bp+var_8+2], es
cmp     word ptr es:[bx], 0
jz      short loc_1A7C8
mov     ax, offset byte_2230C
mov     es, seg_278AA
mul     es:word_2232E
mov     bx, offset word_22294
mov     es, seg_278B0
mov     word ptr [bp+var_C], bx
mov     word ptr [bp+var_C+2], es
mov     bx, es:[bx]
mov     cx, bx
shl     bx, 1
shl     bx, 1
add     bx, cx
shl     bx, 1
add     bx, cx
add     bx, ax
les     di, [bp+var_8]
assume es:nothing
add     bx, es:[di]
shl     bx, 1
add     bx, 1AECh
mov     es, seg_278AC
assume es:dseg
mov     si, bx
mov     word ptr [bp-2], es
cmp     word ptr es:[bx], 6
jnz     short loc_1A7BE
les     bx, [bp+var_C]
assume es:nothing
push    word ptr es:[bx]
les     bx, [bp+var_8]
push    word ptr es:[bx]
mov     al, 2
push    ax
push    cs
call    near ptr sub_1A276
add     sp, 6
les     bx, [bp+var_8]

loc_1A7B8:
dec     word ptr es:[bx]
jmp     loc_1A71D

loc_1A7BE:
push    word ptr [bp-2]
push    si
mov     al, 2
jmp     loc_1A72C
align 2

loc_1A7C8:
cmp     [bp+var_1], 4Bh ; 'K'
jz      short loc_1A7D7
cmp     [bp+var_1], 3Dh ; '='
jz      short loc_1A7D7
jmp     loc_1A858

loc_1A7D7:
mov     bx, offset word_22294
mov     es, seg_278B0
assume es:seg008
mov     word ptr [bp+var_C], bx
mov     word ptr [bp+var_C+2], es
cmp     word ptr es:[bx], 0Ah
jz      short loc_1A858
mov     ax, offset byte_2230C
mov     es, seg_278AA
mul     es:word_2232E
mov     es, word ptr [bp+var_C+2]
assume es:nothing
mov     bx, es:[bx]
mov     cx, bx
shl     bx, 1
shl     bx, 1
add     bx, cx
shl     bx, 1
add     bx, cx
add     bx, ax
mov     di, 2
mov     es, seg_278AE
assume es:seg008
mov     word ptr [bp+var_8], di
mov     word ptr [bp+var_8+2], es
add     bx, es:[di]
shl     bx, 1
add     bx, 1B04h
mov     es, seg_278AC
assume es:dseg
mov     si, bx
mov     word ptr [bp-2], es
cmp     word ptr es:[bx], 6
jnz     short loc_1A84E
les     bx, [bp+var_C]
assume es:nothing
push    word ptr es:[bx]
les     si, [bp+var_8]
push    word ptr es:[si]
mov     al, 3
push    ax
push    cs
call    near ptr sub_1A276
add     sp, 6
les     bx, [bp+var_C]
jmp     loc_1A71A
db 3 dup(90h)

loc_1A84E:
push    word ptr [bp-2]
push    si
mov     al, 3
jmp     loc_1A72C
align 2

loc_1A858:
cmp     [bp+var_1], 43h ; 'C'
jz      short loc_1A864
cmp     [bp+var_1], 3Ah ; ':'
jnz     short loc_1A8E2

loc_1A864:
mov     bx, offset word_22294
mov     es, seg_278B0
assume es:seg008
mov     word ptr [bp+var_C], bx
mov     word ptr [bp+var_C+2], es
cmp     word ptr es:[bx], 0
jz      short loc_1A8E2
mov     ax, offset byte_2230C
mov     es, seg_278AA
mul     es:word_2232E
mov     es, word ptr [bp+var_C+2]
assume es:nothing
mov     bx, es:[bx]
mov     cx, bx
shl     bx, 1
shl     bx, 1
add     bx, cx
shl     bx, 1
add     bx, cx
add     bx, ax
mov     di, 2
mov     es, seg_278AE
assume es:seg008
mov     word ptr [bp+var_8], di
mov     word ptr [bp+var_8+2], es
add     bx, es:[di]
shl     bx, 1
add     bx, 1AD8h
mov     es, seg_278AC
assume es:dseg
mov     si, bx
mov     word ptr [bp-2], es
cmp     word ptr es:[bx], 6
jnz     short loc_1A8D8
les     bx, [bp+var_C]
assume es:nothing
push    word ptr es:[bx]
les     si, [bp+var_8]
push    word ptr es:[si]
mov     al, 4
push    ax
push    cs
call    near ptr sub_1A276
add     sp, 6
les     bx, [bp+var_C]
jmp     loc_1A7B8

loc_1A8D8:
push    word ptr [bp-2]
push    si
mov     al, 4
jmp     loc_1A72C
align 2

loc_1A8E2:
cmp     [bp+var_1], 1Ch
jnz     short loc_1A8EB
jmp     loc_1A976

loc_1A8EB:
cmp     [bp+var_1], 34h ; '4'
jnz     short loc_1A8F4
jmp     loc_1A976

loc_1A8F4:
cmp     [bp+var_1], 3Fh ; '?'
jnz     short loc_1A922
call    sub_1F627
call    sub_1F632
call    sub_20CDA
call    sub_1F62D
call    sub_1F614
mov     ax, 1Eh

loc_1A916:
push    ax
call    sub_1F9E2
add     sp, 2
jmp     loc_1A696

loc_1A922:
mov     ax, seg seg008
mov     es, ax
assume es:seg008
cmp     [bp+var_1], 70h ; 'p'
jnz     short loc_1A968
cmp     es:byte_222AF, 1
jnz     short loc_1A944
mov     es, seg_278B8
mov     es:byte_222AF, 0
mov     ax, 18AAh
jmp     short loc_1A959

loc_1A944:
cmp     es:byte_222AF, 0
jnz     short loc_1A962
mov     es, seg_278B8
mov     es:byte_222AF, 1
mov     ax, 18C3h

loc_1A959:
push    ds
push    ax
push    cs
call    near ptr sub_19D80
add     sp, 4

loc_1A962:
mov     ax, 0Fh
jmp     short loc_1A916
align 2

loc_1A968:
cmp     [bp+var_1], 60h ; '`'
jz      short loc_1A980
push    cs
call    near ptr sub_192A4
jmp     loc_1A696
align 2

loc_1A976:
call    sub_10A5A
mov     ax, 0Ah
jmp     short loc_1A916

loc_1A980:
pop     si
pop     di
mov     sp, bp
pop     bp
retf
sub_1A68E endp



; Attributes: bp-based frame

sub_1A986 proc far

var_12= word ptr -12h
var_10= word ptr -10h
var_E= word ptr -0Eh
var_C= word ptr -0Ch
var_A= word ptr -0Ah
var_8= word ptr -8
var_6= word ptr -6
var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  6
arg_2= word ptr  8
arg_4= byte ptr  0Ah

push    bp
mov     bp, sp
sub     sp, 12h
push    di
push    si
mov     al, [bp+arg_4]
push    ax
mov     ax, 40h ; '@'
push    ax
mov     ax, 4
push    ax
sub     cx, cx
push    cx
call    sub_1FD07
add     sp, 8
mov     es, seg_278B2
mov     ax, es:word_2229A
mov     dx, es:word_2229C
add     ax, [bp+arg_0]
push    dx
push    ax
sub     ax, ax
push    ax
call    sub_1F737
add     sp, 6
mov     es, seg_278B2
mov     ax, es:word_2229A
mov     dx, es:word_2229C
add     ax, [bp+arg_2]
push    dx
push    ax
mov     ax, 0A02h
push    ax
call    sub_1F737
add     sp, 6
mov     [bp+var_2], 4
mov     [bp+var_4], 20h ; ' '
sub     di, di
mov     [bp+var_A], di
mov     [bp+var_8], di
mov     [bp+var_6], di
mov     [bp+var_E], 2

loc_1A9FA:
mov     ax, di
mov     cx, 50h ; 'P'
mul     cx
mov     [bp+var_10], ax
mov     [bp+var_2], 7
mov     si, [bp+var_A]
mov     [bp+var_C], di

loc_1AA0F:
mov     ax, 50h ; 'P'
mul     [bp+var_6]
add     ax, [bp+var_8]
push    ax
mov     ax, 20h ; ' '
push    ax
mov     cx, 4
push    cx
mov     cx, [bp+var_10]
add     si, 8
add     cx, si
push    cx
mov     [bp+var_12], cx
call    sub_1FF1D
add     sp, 8
mov     ax, 20h ; ' '
push    ax
mov     cx, 8
push    cx
push    [bp+var_12]
call    sub_20711
add     sp, 6
mov     ax, 20h ; ' '
push    ax
mov     ax, 8
push    ax
push    [bp+var_12]
call    sub_20711
add     sp, 6
mov     [bp+var_8], si
mov     [bp+var_6], di
dec     [bp+var_2]
jnz     short loc_1AA0F
sub     ax, ax
mov     [bp+var_A], ax
mov     [bp+var_8], ax
mov     di, 20h ; ' '
mov     [bp+var_6], di
dec     [bp+var_E]
jnz     short loc_1A9FA
mov     es, seg_278B2
push    es:word_2229C
push    es:word_2229A
mov     ax, 5000h
push    ax
call    sub_1F737
add     sp, 6
mov     [bp+var_2], 2
mov     [bp+var_4], di
sub     si, si
mov     [bp+var_8], si
mov     [bp+var_6], 100h
mov     [bp+var_C], 5000h
mov     [bp+var_E], 4

loc_1AAAF:
mov     di, 12h

loc_1AAB2:
mov     ax, 5000h
push    ax
mov     ax, 20h ; ' '
push    ax
mov     ax, 2
push    ax
mov     ax, [bp+var_C]
add     ax, si
push    ax
call    sub_1FF1D
add     sp, 8
add     si, 4
dec     di
jnz     short loc_1AAB2
sub     di, di
add     byte ptr [bp+var_C+1], 0Ah
mov     [bp+var_A], di
dec     [bp+var_E]
jnz     short loc_1AB36
mov     [bp+var_4], 5000h
mov     si, di
mov     [bp+var_C], si
mov     [bp+var_E], 2

loc_1AAEF:
mov     [bp+var_2], 8

loc_1AAF4:
mov     al, [bp+arg_4]
push    ax
mov     ax, [bp+var_C]
add     ax, di
push    ax
mov     ax, 20h ; ' '
push    ax
mov     ax, 4
push    ax
mov     ax, [bp+var_4]
add     ax, si
push    ax
call    sub_20385
add     sp, 0Ah
add     si, 8
add     di, 8
dec     [bp+var_2]
jnz     short loc_1AAF4
sub     dx, dx
mov     [bp+var_8], dx
add     byte ptr [bp+var_4+1], 0Ah
add     byte ptr [bp+var_C+1], 0Ah
mov     [bp+var_A], dx
dec     [bp+var_E]
jnz     short loc_1AB3C
jmp     short loc_1AB44

loc_1AB36:
mov     si, [bp+var_A]
jmp     loc_1AAAF

loc_1AB3C:
mov     di, [bp+var_8]
mov     si, [bp+var_A]
jmp     short loc_1AAEF

loc_1AB44:
mov     al, [bp+arg_4]
push    ax
sub     ax, ax
push    ax
mov     cx, 20h ; ' '
push    cx
mov     cx, 4
push    cx
mov     cx, 5A44h
push    cx
call    sub_20385
add     sp, 0Ah
sub     si, si
mov     [bp+var_8], si
mov     [bp+var_6], si
mov     di, 6400h
mov     [bp+var_C], 152h
mov     [bp+var_2], 9

loc_1AB74:
mov     al, [bp+arg_4]
push    ax
sub     ax, ax
push    ax
mov     cx, 20h ; ' '
push    cx
mov     cx, 4
push    cx
mov     dx, di
add     dx, si
push    dx
call    sub_20385
add     sp, 0Ah
add     si, 4
add     di, 0A0h
dec     [bp+var_2]
jnz     short loc_1AB74
mov     [bp+var_A], si
mov     [bp+var_8], 2
mov     [bp+var_6], 20h ; ' '
mov     ax, 50h ; 'P'
mul     [bp+var_C]
mov     di, ax
mov     [bp+var_2], 8

loc_1ABB6:
mov     al, [bp+arg_4]
push    ax
mov     ax, 0A02h
push    ax
mov     ax, 20h ; ' '
push    ax
mov     ax, 4
push    ax
mov     cx, di
add     cx, si
push    cx
call    sub_20385
add     sp, 0Ah
add     si, 4
add     di, 0A0h
dec     [bp+var_2]
jnz     short loc_1ABB6
pop     si
pop     di
mov     sp, bp
pop     bp
retf
sub_1A986 endp

align 2


; Attributes: bp-based frame

sub_1ABE6 proc far

var_18= word ptr -18h
var_16= word ptr -16h
var_E= word ptr -0Eh
var_C= word ptr -0Ch
var_A= word ptr -0Ah
var_6= word ptr -6
var_4= word ptr -4

push    bp
mov     bp, sp
sub     sp, 18h
push    di
push    si
mov     [bp+var_6], 2
mov     [bp+var_E], 80Ah
sub     ax, ax
mov     [bp+var_4], ax
mov     [bp+var_A], ax
mov     [bp+var_C], ax

loc_1AC03:
sub     si, si
mov     ax, [bp+var_C]
mov     [bp+var_4], ax
mov     ax, [bp+var_E]
mov     [bp+var_6], ax
mov     di, si

loc_1AC13:
mov     es, seg_278D2
assume es:dseg
mov     bx, [bp+var_6]
mov     si, es:[bx]
or      si, si
jnz     short loc_1AC24
jmp     loc_1AD44

loc_1AC24:
cmp     si, 0FFFFh
jnz     short loc_1AC2C
jmp     loc_1AD55

loc_1AC2C:
mov     es, seg_278C4
mov     bx, si
shl     bx, 1
add     bx, si
shl     bx, 1
mov     al, es:[bx+282h]
cmp     al, 8
jnz     short loc_1AC44
jmp     loc_1ACDC

loc_1AC44:
cmp     al, 9
jnz     short loc_1AC4B
jmp     loc_1ACDC

loc_1AC4B:
cmp     al, 0Ah
jz      short loc_1AC7A
cmp     al, 0Bh
jz      short loc_1AC7A
cmp     al, 7
jz      short loc_1AC7A
mov     ax, es:[bx+286h]
mov     es, seg_278B2
assume es:seg008
add     ax, es:word_2229A
mov     dx, es:word_2229C
push    dx
push    ax
push    [bp+var_4]
call    sub_1F737
add     sp, 6
jmp     loc_1AD44

loc_1AC7A:
mov     ax, es:[bx+286h]
mov     es, seg_278B2
add     ax, es:word_2229A
mov     dx, es:word_2229C
push    dx
push    ax
mov     ax, 4Ch ; 'L'
push    ax
call    sub_1F737
add     sp, 6
mov     es, seg_278B2
mov     ax, es:word_2229A
mov     dx, es:word_2229C
mov     es, seg_278C4
assume es:dseg
add     ax, es:word_225EA
push    dx
push    ax
mov     ax, [bp+var_A]
add     ax, di
shl     ax, 1
shl     ax, 1
push    ax
mov     [bp+var_16], ax
call    sub_1F737
add     sp, 6
mov     al, 88h
push    ax
mov     ax, 4Ch ; 'L'
push    ax
mov     ax, 20h ; ' '
push    ax
mov     ax, 2
push    ax
push    [bp+var_16]
jmp     short loc_1AD3C

loc_1ACDC:
mov     ax, es:[bx+286h]
mov     es, seg_278B2
assume es:seg008
add     ax, es:word_2229A
mov     dx, es:word_2229C
push    dx
push    ax
mov     ax, 4Ch ; 'L'
push    ax
call    sub_1F737
add     sp, 6
mov     es, seg_278B2
mov     ax, es:word_2229A
mov     dx, es:word_2229C
mov     es, seg_278C4
assume es:dseg
add     ax, es:word_225EA
push    dx
push    ax
mov     ax, [bp+var_A]
add     ax, di
shl     ax, 1
shl     ax, 1
push    ax
mov     [bp+var_18], ax
call    sub_1F737
add     sp, 6
mov     al, 11h
push    ax
mov     ax, 4Ch ; 'L'
push    ax
mov     ax, 20h ; ' '
push    ax
mov     ax, 2
push    ax
push    [bp+var_18]

loc_1AD3C:
call    sub_20385
add     sp, 0Ah

loc_1AD44:
add     [bp+var_4], 4
add     [bp+var_6], 2
inc     di
cmp     di, 10h
jnb     short loc_1AD55
jmp     loc_1AC13

loc_1AD55:
cmp     si, 0FFFFh
jz      short loc_1AD71
add     [bp+var_A], 280h
add     [bp+var_E], 20h ; ' '
add     byte ptr [bp+var_C+1], 0Ah
cmp     [bp+var_C], 4600h
jnb     short loc_1AD71
jmp     loc_1AC03

loc_1AD71:
pop     si
pop     di
mov     sp, bp
pop     bp
retf
sub_1ABE6 endp

align 2


; Attributes: bp-based frame

sub_1AD78 proc far

var_8= word ptr -8
var_6= word ptr -6
arg_0= word ptr  6
arg_2= word ptr  8
arg_4= word ptr  0Ah

push    bp
mov     bp, sp
sub     sp, 8
push    di
mov     ax, [bp+arg_0]
shl     ax, 1
shl     ax, 1
add     ax, 12h
mov     [bp+var_8], ax
mov     cl, 5
mov     ax, [bp+arg_2]
shl     ax, cl
add     ax, 18h
mov     [bp+var_6], ax
sub     di, di
mov     bx, 80Ah
mov     cx, [bp+arg_4]
mov     ax, seg dseg
mov     ds, ax

loc_1ADA6:
cmp     [bx], cx
jz      short loc_1ADB3
inc     di
inc     bx
inc     bx
cmp     bx, 936h
jb      short loc_1ADA6

loc_1ADB3:
mov     ax, seg dseg
mov     ds, ax
cmp     di, 96h
jnz     short loc_1ADCF
mov     ax, 18DCh
push    ds
push    ax              ; char *
call    _printf
add     sp, 4
push    cs
call    near ptr sub_1C48C

loc_1ADCF:
mov     ax, di
mov     cx, ax
and     al, 0F0h
mov     bx, 27h ; '''
mul     bx
add     cx, ax
shl     cx, 1
shl     cx, 1
push    cx
mov     ax, 20h ; ' '
push    ax
mov     ax, 2
push    ax
mov     ax, 50h ; 'P'
mul     [bp+var_6]
add     ax, [bp+var_8]
push    ax
call    sub_1FE82
add     sp, 8
pop     di
mov     sp, bp
pop     bp
retf
sub_1AD78 endp



; Attributes: bp-based frame

sub_1AE00 proc far

arg_0= byte ptr  6

push    bp
mov     bp, sp
cmp     [bp+arg_0], 1
jnz     short loc_1AE1E
mov     es, seg_278B0
assume es:seg008
push    es:word_22294
mov     es, seg_278AE
mov     ax, es:word_22292
inc     ax
jmp     short loc_1AE36
align 2

loc_1AE1E:
cmp     [bp+arg_0], 2
jnz     short loc_1AE3A
mov     es, seg_278B0
push    es:word_22294
mov     es, seg_278AE
mov     ax, es:word_22292
dec     ax

loc_1AE36:
push    ax
jmp     short loc_1AE65
align 2

loc_1AE3A:
cmp     [bp+arg_0], 3
jnz     short loc_1AE4C
mov     es, seg_278B0
mov     ax, es:word_22294
inc     ax
jmp     short loc_1AE5B
align 2

loc_1AE4C:
cmp     [bp+arg_0], 4
jnz     short loc_1AE69
mov     es, seg_278B0
mov     ax, es:word_22294
dec     ax

loc_1AE5B:
push    ax
mov     es, seg_278AE
push    es:word_22292

loc_1AE65:
push    cs
call    near ptr sub_1AE6E

loc_1AE69:
mov     sp, bp
pop     bp
retf
sub_1AE00 endp

align 2


; Attributes: bp-based frame

sub_1AE6E proc far

var_C= dword ptr -0Ch
var_2= word ptr -2
arg_0= word ptr  6
arg_2= word ptr  8

push    bp
mov     bp, sp
sub     sp, 0Eh
push    di
push    si
mov     di, [bp+arg_2]
mov     ax, offset byte_2230C
mov     es, seg_278AA
mul     es:word_2232E
mov     bx, ax
mov     ax, di
shl     ax, 1
shl     ax, 1
add     ax, di
shl     ax, 1
add     ax, di
add     bx, ax
add     bx, [bp+arg_0]
shl     bx, 1
add     bx, 1AEEh
mov     es, seg_278AC
assume es:dseg
mov     si, bx
mov     [bp+var_2], es
mov     bx, es:[bx]
mov     ax, bx
shl     bx, 1
add     bx, ax
shl     bx, 1
mov     es, seg_278C4
mov     ax, es:[bx+286h]
mov     bx, offset word_2229A
mov     es, seg_278B2
assume es:seg008
mov     word ptr [bp+var_C], bx
mov     word ptr [bp+var_C+2], es
add     ax, es:[bx]
mov     dx, es:[bx+2]
push    dx
push    ax
mov     ax, 4Ch ; 'L'
push    ax
call    sub_1F737
add     sp, 6
mov     es, [bp+var_2]
assume es:nothing
mov     bx, es:[si]
mov     ax, bx
shl     bx, 1
add     bx, ax
shl     bx, 1
mov     es, seg_278C4
assume es:dseg
mov     al, es:[bx+282h]
cmp     al, 8
jz      short loc_1AF38
cmp     al, 5
jz      short loc_1AF38
cmp     al, 0Ah
jz      short loc_1AF12
cmp     al, 7
jz      short loc_1AF12
cmp     al, 6
jz      short loc_1AF12
call    sub_1F9C9
mov     ax, 4Ch ; 'L'
jmp     short loc_1AF7C

loc_1AF12:
les     bx, [bp+var_C]
assume es:nothing
mov     ax, es:[bx]
mov     dx, es:[bx+2]
mov     es, seg_278C4
assume es:dseg
add     ax, es:word_225EA
push    dx
push    ax
mov     ax, 0A4Ch
push    ax
call    sub_1F737
add     sp, 6
mov     al, 88h
jmp     short loc_1AF5B
align 2

loc_1AF38:
les     bx, [bp+var_C]
assume es:nothing
mov     ax, es:[bx]
mov     dx, es:[bx+2]
mov     es, seg_278C4
assume es:dseg
add     ax, es:word_225EA
push    dx
push    ax
mov     ax, 0A4Ch
push    ax
call    sub_1F737
add     sp, 6
mov     al, 11h

loc_1AF5B:
push    ax
mov     ax, 4Ch ; 'L'
push    ax
mov     ax, 20h ; ' '
push    ax
mov     cx, 2
push    cx
mov     dx, 0A4Ch
push    dx
call    sub_20385
add     sp, 0Ah
call    sub_1F9C9
mov     ax, 0A4Ch

loc_1AF7C:
push    ax
mov     ax, 20h ; ' '
push    ax
mov     ax, 2
push    ax
mov     ax, di
mov     cx, 280h
mul     cx
add     ax, [bp+arg_0]
shl     ax, 1
shl     ax, 1
add     ax, 792h
push    ax
call    sub_1FE82
add     sp, 8
pop     si
pop     di
mov     sp, bp
pop     bp
retf
sub_1AE6E endp

align 2


; Attributes: bp-based frame

sub_1AFA6 proc far

var_10C= word ptr -10Ch
var_10A= word ptr -10Ah
var_106= word ptr -106h
var_104= word ptr -104h
var_102= word ptr -102h
var_100= word ptr -100h
var_FE= word ptr -0FEh
var_FC= word ptr -0FCh
var_FA= byte ptr -0FAh
var_F9= byte ptr -0F9h
var_F8= byte ptr -0F8h
var_F7= byte ptr -0F7h
var_F6= byte ptr -0F6h
var_F5= byte ptr -0F5h
var_F4= byte ptr -0F4h
var_F3= byte ptr -0F3h
var_F2= byte ptr -0F2h
var_F1= byte ptr -0F1h
var_F0= byte ptr -0F0h
var_EF= byte ptr -0EFh
var_EE= byte ptr -0EEh
var_ED= byte ptr -0EDh
var_EC= byte ptr -0ECh
var_EB= byte ptr -0EBh
var_EA= byte ptr -0EAh
var_E9= byte ptr -0E9h
var_E8= byte ptr -0E8h
var_E7= byte ptr -0E7h
var_E6= byte ptr -0E6h
var_E5= byte ptr -0E5h
var_E4= byte ptr -0E4h
var_E3= byte ptr -0E3h
var_E2= byte ptr -0E2h
var_E1= byte ptr -0E1h
var_E0= byte ptr -0E0h
var_DF= byte ptr -0DFh
var_DE= byte ptr -0DEh
var_DD= byte ptr -0DDh
var_DC= byte ptr -0DCh
var_DB= byte ptr -0DBh
var_DA= byte ptr -0DAh
var_D9= byte ptr -0D9h
var_D8= byte ptr -0D8h
var_D7= byte ptr -0D7h
var_D6= byte ptr -0D6h
var_D5= byte ptr -0D5h
var_D4= byte ptr -0D4h
var_D3= byte ptr -0D3h
var_D2= byte ptr -0D2h
var_D1= byte ptr -0D1h
var_D0= byte ptr -0D0h
var_CF= byte ptr -0CFh
var_CE= byte ptr -0CEh
var_CD= byte ptr -0CDh
var_CC= byte ptr -0CCh
var_CB= byte ptr -0CBh
var_CA= byte ptr -0CAh
var_C9= byte ptr -0C9h
var_C8= byte ptr -0C8h
var_C7= byte ptr -0C7h
var_C6= byte ptr -0C6h
var_C5= byte ptr -0C5h
var_C4= byte ptr -0C4h
var_C3= byte ptr -0C3h
var_C2= byte ptr -0C2h
var_C1= byte ptr -0C1h
var_C0= byte ptr -0C0h
var_BF= byte ptr -0BFh
var_BE= byte ptr -0BEh
var_BD= byte ptr -0BDh
var_BC= byte ptr -0BCh
var_BB= byte ptr -0BBh
var_BA= byte ptr -0BAh
var_B9= byte ptr -0B9h
var_B8= byte ptr -0B8h
var_B7= byte ptr -0B7h
var_B6= byte ptr -0B6h
var_B5= byte ptr -0B5h
var_B4= byte ptr -0B4h
var_B3= byte ptr -0B3h
var_B2= byte ptr -0B2h
var_B1= byte ptr -0B1h
var_B0= byte ptr -0B0h
var_AF= byte ptr -0AFh
var_AE= byte ptr -0AEh
var_AD= byte ptr -0ADh
var_AC= byte ptr -0ACh
var_AB= byte ptr -0ABh
var_AA= byte ptr -0AAh
var_A9= byte ptr -0A9h
var_A8= byte ptr -0A8h
var_A7= byte ptr -0A7h
var_A6= byte ptr -0A6h
var_A5= byte ptr -0A5h
var_A4= byte ptr -0A4h
var_A3= byte ptr -0A3h
var_A2= byte ptr -0A2h
var_A1= byte ptr -0A1h
var_A0= byte ptr -0A0h
var_9F= byte ptr -9Fh
var_9E= byte ptr -9Eh
var_9D= byte ptr -9Dh
var_9C= byte ptr -9Ch
var_9B= byte ptr -9Bh
var_9A= byte ptr -9Ah
var_99= byte ptr -99h
var_98= byte ptr -98h
var_97= byte ptr -97h
var_96= byte ptr -96h
var_95= byte ptr -95h
var_94= byte ptr -94h
var_93= byte ptr -93h
var_92= byte ptr -92h
var_91= byte ptr -91h
var_90= byte ptr -90h
var_8F= byte ptr -8Fh
var_8E= byte ptr -8Eh
var_8D= byte ptr -8Dh
var_8C= byte ptr -8Ch
var_8B= byte ptr -8Bh
var_8A= byte ptr -8Ah
var_89= byte ptr -89h
var_88= byte ptr -88h
var_87= byte ptr -87h
var_86= byte ptr -86h
var_85= byte ptr -85h
var_84= byte ptr -84h
var_83= byte ptr -83h
var_82= byte ptr -82h
var_81= byte ptr -81h
var_80= byte ptr -80h
var_7F= byte ptr -7Fh
var_7E= byte ptr -7Eh
var_7D= byte ptr -7Dh
var_7C= byte ptr -7Ch
var_7B= byte ptr -7Bh
var_7A= byte ptr -7Ah
var_79= byte ptr -79h
var_78= byte ptr -78h
var_77= byte ptr -77h
var_76= byte ptr -76h
var_75= byte ptr -75h
var_74= byte ptr -74h
var_73= byte ptr -73h
var_72= byte ptr -72h
var_71= byte ptr -71h
var_70= byte ptr -70h
var_6F= byte ptr -6Fh
var_6E= byte ptr -6Eh
var_6D= byte ptr -6Dh
var_6C= byte ptr -6Ch
var_6B= byte ptr -6Bh
var_6A= byte ptr -6Ah
var_69= byte ptr -69h
var_68= byte ptr -68h
var_67= byte ptr -67h
var_66= byte ptr -66h
var_65= byte ptr -65h
var_64= byte ptr -64h
var_63= byte ptr -63h
var_62= byte ptr -62h
var_61= byte ptr -61h
var_60= byte ptr -60h
var_5F= byte ptr -5Fh
var_5E= byte ptr -5Eh
var_5D= byte ptr -5Dh
var_5C= byte ptr -5Ch
var_5B= byte ptr -5Bh
var_5A= byte ptr -5Ah
var_59= byte ptr -59h
var_58= byte ptr -58h
var_57= byte ptr -57h
var_56= byte ptr -56h
var_55= byte ptr -55h
var_54= byte ptr -54h
var_53= byte ptr -53h
var_52= byte ptr -52h
var_51= byte ptr -51h
var_50= byte ptr -50h
var_4F= byte ptr -4Fh
var_4E= byte ptr -4Eh
var_4D= byte ptr -4Dh
var_4C= byte ptr -4Ch
var_4B= byte ptr -4Bh
var_4A= byte ptr -4Ah
var_49= byte ptr -49h
var_48= byte ptr -48h
var_47= byte ptr -47h
var_46= byte ptr -46h
var_45= byte ptr -45h
var_44= byte ptr -44h
var_43= byte ptr -43h
var_42= byte ptr -42h
var_41= byte ptr -41h
var_40= byte ptr -40h
var_3F= byte ptr -3Fh
var_3E= byte ptr -3Eh
var_3D= byte ptr -3Dh
var_3C= byte ptr -3Ch
var_3B= byte ptr -3Bh
var_3A= byte ptr -3Ah
var_39= byte ptr -39h
var_38= byte ptr -38h
var_37= byte ptr -37h
var_36= byte ptr -36h
var_35= byte ptr -35h
var_34= byte ptr -34h
var_33= byte ptr -33h
var_32= byte ptr -32h
var_31= byte ptr -31h
var_30= byte ptr -30h
var_2F= byte ptr -2Fh
var_2E= byte ptr -2Eh
var_2D= byte ptr -2Dh
var_2C= byte ptr -2Ch
var_2B= byte ptr -2Bh
var_2A= byte ptr -2Ah
var_29= byte ptr -29h
var_28= byte ptr -28h
var_27= byte ptr -27h
var_26= byte ptr -26h
var_25= byte ptr -25h
var_24= byte ptr -24h
var_23= byte ptr -23h
var_22= byte ptr -22h
var_21= byte ptr -21h
var_20= byte ptr -20h
var_1F= byte ptr -1Fh
var_1E= byte ptr -1Eh
var_1D= byte ptr -1Dh
var_1C= byte ptr -1Ch
var_1B= byte ptr -1Bh
var_1A= byte ptr -1Ah
var_19= byte ptr -19h
var_18= byte ptr -18h
var_17= byte ptr -17h
var_16= byte ptr -16h
var_15= byte ptr -15h
var_14= byte ptr -14h
var_13= byte ptr -13h
var_12= byte ptr -12h
var_11= byte ptr -11h
var_10= byte ptr -10h
var_F= byte ptr -0Fh
var_E= byte ptr -0Eh
var_D= byte ptr -0Dh
var_C= byte ptr -0Ch
var_B= byte ptr -0Bh
var_A= byte ptr -0Ah
var_9= byte ptr -9
var_8= word ptr -8
var_6= word ptr -6
var_4= dword ptr -4

push    bp
mov     bp, sp
sub     sp, 10Ch
push    di
push    si
mov     [bp+var_6], 2
mov     [bp+var_8], 20h ; ' '
mov     al, 0Ah
mov     [bp+var_E5], al
mov     [bp+var_E3], al
mov     [bp+var_E1], al
mov     [bp+var_DF], al
mov     [bp+var_DD], al
mov     [bp+var_DB], al
mov     [bp+var_D9], al
mov     [bp+var_D7], al
mov     [bp+var_D5], al
mov     [bp+var_D3], al
mov     [bp+var_D2], al
mov     [bp+var_D1], al
mov     [bp+var_D0], al
mov     [bp+var_CE], al
mov     [bp+var_CC], al
mov     [bp+var_CA], al
mov     [bp+var_C8], al
mov     [bp+var_C6], al
mov     [bp+var_C4], al
mov     [bp+var_C2], al
mov     [bp+var_C0], al
mov     [bp+var_BE], al
mov     al, 9
mov     [bp+var_E7], al
mov     [bp+var_D4], al
mov     [bp+var_CF], al
mov     [bp+var_BC], al
sub     al, al
mov     [bp+var_FA], al
mov     [bp+var_F9], al
mov     [bp+var_F8], al
mov     [bp+var_F6], al
mov     [bp+var_F4], al
mov     [bp+var_F2], al
mov     [bp+var_F0], al
mov     [bp+var_EE], al
mov     [bp+var_EC], al
mov     [bp+var_EA], al
mov     [bp+var_E8], al
mov     [bp+var_E6], al
mov     [bp+var_BD], al
mov     [bp+var_BB], al
mov     [bp+var_B9], al
mov     [bp+var_B7], al
mov     [bp+var_B5], al
mov     [bp+var_B3], al
mov     [bp+var_B1], al
mov     [bp+var_AF], al
mov     [bp+var_AD], al
mov     [bp+var_AB], al
mov     al, 2
mov     [bp+var_F5], al
mov     [bp+var_E2], al
mov     [bp+var_C1], al
mov     [bp+var_AE], al
mov     [bp+var_A7], al
mov     al, 3
mov     [bp+var_F3], al
mov     [bp+var_E0], al
mov     [bp+var_C3], al
mov     [bp+var_B0], al
mov     [bp+var_A5], al
mov     al, 4
mov     [bp+var_F1], al
mov     [bp+var_DE], al
mov     [bp+var_C5], al
mov     [bp+var_B2], al
mov     [bp+var_A3], al
mov     al, 5
mov     [bp+var_EF], al
mov     [bp+var_DC], al
mov     [bp+var_C7], al
mov     [bp+var_B4], al
mov     [bp+var_A1], al
mov     al, 6
mov     [bp+var_ED], al
mov     [bp+var_DA], al
mov     [bp+var_C9], al
mov     [bp+var_B6], al
mov     [bp+var_9F], al
mov     al, 7
mov     [bp+var_EB], al
mov     [bp+var_D8], al
mov     [bp+var_CB], al
mov     [bp+var_B8], al
mov     [bp+var_9D], al
mov     al, 8
mov     [bp+var_E9], al
mov     [bp+var_D6], al
mov     [bp+var_CD], al
mov     [bp+var_BA], al
mov     [bp+var_9B], al
mov     al, 1
mov     [bp+var_F7], al
mov     [bp+var_E4], al
mov     [bp+var_BF], al
mov     [bp+var_AC], al
mov     [bp+var_AA], al
mov     [bp+var_A9], al
mov     [bp+var_A8], al
mov     [bp+var_A6], al
mov     [bp+var_A4], al
mov     [bp+var_A2], al
mov     [bp+var_A0], al
mov     [bp+var_9E], al
mov     [bp+var_9C], al
mov     [bp+var_9A], al
mov     al, 9
mov     [bp+var_99], al
mov     [bp+var_97], al
mov     [bp+var_95], al
mov     [bp+var_93], al
mov     [bp+var_91], al
mov     [bp+var_8F], al
mov     [bp+var_8D], al
mov     [bp+var_8B], al
mov     [bp+var_8A], al
mov     [bp+var_89], al
mov     [bp+var_88], al
mov     [bp+var_86], al
mov     [bp+var_84], al
mov     [bp+var_82], al
mov     [bp+var_80], al
mov     [bp+var_7E], al
mov     [bp+var_7C], al
mov     [bp+var_7A], al
mov     al, 1
mov     [bp+var_79], al
mov     [bp+var_77], al
mov     [bp+var_75], al
mov     [bp+var_73], al
mov     [bp+var_71], al
mov     [bp+var_6F], al
mov     [bp+var_6D], al
mov     [bp+var_6B], al
mov     al, 8
mov     [bp+var_8C], al
mov     [bp+var_87], al
mov     [bp+var_78], al
mov     [bp+var_5D], al
mov     [bp+var_5B], al
mov     [bp+var_59], al
mov     [bp+var_57], al
mov     [bp+var_55], al
mov     [bp+var_53], al
mov     [bp+var_52], al
mov     [bp+var_51], al
mov     [bp+var_50], al
mov     [bp+var_4E], al
mov     [bp+var_4C], al
mov     [bp+var_4A], al
mov     [bp+var_48], al
mov     [bp+var_46], al
mov     al, 7
mov     [bp+var_8E], al
mov     [bp+var_85], al
mov     [bp+var_76], al
mov     [bp+var_5F], al
mov     [bp+var_54], al
mov     [bp+var_4F], al
mov     [bp+var_44], al
mov     al, 6
mov     [bp+var_90], al
mov     [bp+var_83], al
mov     [bp+var_74], al
mov     [bp+var_61], al
mov     [bp+var_56], al
mov     [bp+var_4D], al
mov     [bp+var_42], al
mov     al, 2
mov     [bp+var_98], al
mov     [bp+var_7B], al
mov     [bp+var_6C], al
mov     [bp+var_6A], al
mov     [bp+var_69], al
mov     [bp+var_68], al
mov     [bp+var_66], al
mov     [bp+var_64], al
mov     [bp+var_62], al
mov     [bp+var_60], al
mov     [bp+var_5E], al
mov     [bp+var_45], al
mov     [bp+var_43], al
mov     [bp+var_41], al
mov     [bp+var_3F], al
mov     [bp+var_3D], al
mov     [bp+var_3B], al
mov     al, 4
mov     [bp+var_94], al
mov     [bp+var_7F], al
mov     [bp+var_70], al
mov     [bp+var_65], al
mov     [bp+var_5A], al
mov     [bp+var_49], al
mov     [bp+var_3E], al
mov     [bp+var_37], al
mov     al, 3
mov     [bp+var_96], al
mov     [bp+var_7D], al
mov     [bp+var_6E], al
mov     [bp+var_67], al
mov     [bp+var_5C], al
mov     [bp+var_47], al
mov     [bp+var_3C], al
mov     [bp+var_3A], al
mov     [bp+var_39], al
mov     [bp+var_38], al
mov     [bp+var_36], al
mov     al, 5
mov     [bp+var_92], al
mov     [bp+var_81], al
mov     [bp+var_72], al
mov     [bp+var_63], al
mov     [bp+var_58], al
mov     [bp+var_4B], al
mov     [bp+var_40], al
mov     [bp+var_35], al
mov     al, 7
mov     [bp+var_31], al
mov     [bp+var_2F], al
mov     [bp+var_2D], al
mov     [bp+var_2B], al
mov     [bp+var_2A], al
mov     [bp+var_29], al
mov     [bp+var_28], al
mov     [bp+var_26], al
mov     [bp+var_24], al
mov     [bp+var_22], al
mov     al, 3
mov     [bp+var_34], al
mov     [bp+var_32], al
mov     [bp+var_21], al
mov     [bp+var_1F], al
mov     [bp+var_1D], al
mov     [bp+var_1B], al
mov     al, 6
mov     [bp+var_33], al
mov     [bp+var_2C], al
mov     [bp+var_27], al
mov     [bp+var_20], al
mov     [bp+var_15], al
mov     [bp+var_13], al
mov     [bp+var_12], al
mov     [bp+var_11], al
mov     [bp+var_10], al
mov     [bp+var_E], al
mov     al, 4
mov     [bp+var_30], al
mov     [bp+var_23], al
mov     [bp+var_1C], al
mov     [bp+var_1A], al
mov     [bp+var_19], al
mov     [bp+var_18], al
mov     [bp+var_16], al
mov     [bp+var_D], al
mov     [bp+var_B], al
mov     al, 5
mov     [bp+var_2E], al
mov     [bp+var_25], al
mov     [bp+var_1E], al
mov     [bp+var_17], al
mov     [bp+var_14], al
mov     [bp+var_F], al
mov     [bp+var_C], al
mov     [bp+var_A], al
mov     [bp+var_9], al
mov     [bp+var_FE], 12h
mov     [bp+var_100], 18h
sub     ax, ax
mov     [bp+var_106], ax
mov     [bp+var_10C], ax
mov     [bp+var_102], ax
jmp     short loc_1B370
align 2

loc_1B358:
mov     ax, [bp+var_102]
mov     cx, 0Ah

loc_1B35F:
sub     dx, dx
div     cx
or      dx, dx
jnz     short loc_1B36C
call    sub_1F9C9

loc_1B36C:
inc     [bp+var_102]

loc_1B370:
cmp     [bp+var_102], 79h ; 'y'
jnb     short loc_1B3D0
mov     es, seg_278B2
assume es:seg008
mov     ax, es:word_2229A
mov     dx, es:word_2229C
add     ax, 912h
push    dx
push    ax
mov     si, [bp+var_102]
shl     si, 1
mov     al, [bp+si+var_F9]
sub     ah, ah
mov     cl, 5
shl     ax, cl
add     ax, [bp+var_100]
mov     cx, 14h
mul     cx
mov     cl, [bp+si+var_FA]
sub     ch, ch
add     ax, cx
shl     ax, 1
shl     ax, 1
add     ax, [bp+var_FE]
push    ax
call    sub_1F696
add     sp, 6
mov     es, seg_278B8
cmp     es:byte_222AF, 0
jnz     short loc_1B358
mov     ax, [bp+var_102]
mov     cx, 3
jmp     short loc_1B35F

loc_1B3D0:
mov     ax, 0F8h        ; "8"
mov     es, seg_278AA
mul     es:word_2232E
add     ax, 1AEEh
mov     word ptr [bp+var_4], ax
mov     word ptr [bp+var_4+2], seg dseg
mov     [bp+var_FE], 12h
mov     [bp+var_100], 18h
mov     [bp+var_104], 4Ch ; 'L'
sub     ax, ax
mov     [bp+var_10A], ax
mov     [bp+var_102], ax
jmp     loc_1B542

loc_1B406:
mov     bx, ax
shl     bx, 1
add     bx, ax
shl     bx, 1
cmp     byte ptr es:[bx+282h], 0Ah
jz      short loc_1B429
cmp     byte ptr es:[bx+282h], 7
jz      short loc_1B429
cmp     byte ptr es:[bx+282h], 6
jz      short loc_1B429
jmp     loc_1B4C6

loc_1B429:
mov     es, seg_278B2
mov     ax, es:word_2229A
mov     dx, es:word_2229C
mov     es, seg_278C4
assume es:dseg
add     ax, es:word_225EA
push    dx
push    ax
mov     si, [bp+var_102]
shl     si, 1
mov     al, [bp+si+var_F9]
sub     ah, ah
mov     cl, 5
shl     ax, cl
add     ax, [bp+var_100]
mov     cx, 14h
mul     cx
mov     cl, [bp+si+var_FA]
sub     ch, ch
add     ax, cx
shl     ax, 1
shl     ax, 1
add     ax, [bp+var_FE]
push    ax
mov     si, ax
call    sub_1F696
add     sp, 6
mov     es, seg_278C4
mov     bx, [bp+var_FC]
mov     ax, bx
shl     bx, 1
add     bx, ax
shl     bx, 1
mov     ax, es:[bx+286h]
mov     es, seg_278B2
assume es:seg008
add     ax, es:word_2229A
mov     dx, es:word_2229C
push    dx
push    ax
mov     ax, 50h ; 'P'
mul     [bp+var_10A]
add     ax, [bp+var_104]
push    ax
mov     di, ax
call    sub_1F737
add     sp, 6
mov     al, 88h

loc_1B4B2:
push    ax
push    di
push    [bp+var_8]
push    [bp+var_6]
push    si
call    sub_20256
add     sp, 0Ah
jmp     short loc_1B515
align 2

loc_1B4C6:
mov     bx, ax
shl     bx, 1
add     bx, ax
shl     bx, 1
mov     ax, es:[bx+286h]
mov     es, seg_278B2
add     ax, es:word_2229A
mov     dx, es:word_2229C
push    dx
push    ax
mov     si, [bp+var_102]
shl     si, 1
mov     al, [bp+si+var_F9]
sub     ah, ah
mov     cl, 5
shl     ax, cl
add     ax, [bp+var_100]
mov     cx, 14h
mul     cx
mov     cl, [bp+si+var_FA]
sub     ch, ch
add     ax, cx
shl     ax, 1
shl     ax, 1
add     ax, [bp+var_FE]
push    ax
call    sub_1F696
add     sp, 6

loc_1B515:
mov     es, seg_278B8
cmp     es:byte_222AF, 0
jnz     short loc_1B52A
mov     ax, [bp+var_102]
mov     cx, 3
jmp     short loc_1B531

loc_1B52A:
mov     ax, [bp+var_102]
mov     cx, 0Ah

loc_1B531:
sub     dx, dx
div     cx
or      dx, dx
jnz     short loc_1B53E
call    sub_1F9C9

loc_1B53E:
inc     [bp+var_102]

loc_1B542:
cmp     [bp+var_102], 79h ; 'y'
jb      short loc_1B54C
jmp     loc_1B624

loc_1B54C:
mov     si, [bp+var_102]
shl     si, 1
mov     al, [bp+si+var_FA]
sub     ah, ah
mov     bl, [bp+si+var_F9]
sub     bh, bh
mov     cx, bx
shl     bx, 1
shl     bx, 1
add     bx, cx
shl     bx, 1
add     bx, cx
add     bx, ax
shl     bx, 1
les     si, [bp+var_4]
assume es:nothing
mov     bx, es:[bx+si]
mov     [bp+var_FC], bx
mov     ax, bx
shl     bx, 1
add     bx, ax
shl     bx, 1
mov     es, seg_278C4
assume es:dseg
cmp     byte ptr es:[bx+282h], 8
jz      short loc_1B597
cmp     byte ptr es:[bx+282h], 5
jz      short loc_1B597
jmp     loc_1B406

loc_1B597:
mov     es, seg_278B2
assume es:seg008
mov     ax, es:word_2229A
mov     dx, es:word_2229C
mov     es, seg_278C4
assume es:dseg
add     ax, es:word_225EA
push    dx
push    ax
mov     si, [bp+var_102]
shl     si, 1
mov     al, [bp+si+var_F9]
sub     ah, ah
mov     cl, 5
shl     ax, cl
add     ax, [bp+var_100]
mov     cx, 14h
mul     cx
mov     cl, [bp+si+var_FA]
sub     ch, ch
add     ax, cx
shl     ax, 1
shl     ax, 1
add     ax, [bp+var_FE]
push    ax
mov     si, ax
call    sub_1F696
add     sp, 6
mov     es, seg_278C4
mov     bx, [bp+var_FC]
mov     ax, bx
shl     bx, 1
add     bx, ax
shl     bx, 1
mov     ax, es:[bx+286h]
mov     es, seg_278B2
assume es:seg008
add     ax, es:word_2229A
mov     dx, es:word_2229C
push    dx
push    ax
mov     ax, 50h ; 'P'
mul     [bp+var_10A]
add     ax, [bp+var_104]
push    ax
mov     di, ax
call    sub_1F737
add     sp, 6
mov     al, 11h
jmp     loc_1B4B2
align 2

loc_1B624:
pop     si
pop     di
mov     sp, bp
pop     bp
retf
sub_1AFA6 endp



; Attributes: bp-based frame

sub_1B62A proc far

var_1C= word ptr -1Ch
var_1A= word ptr -1Ah
var_12= word ptr -12h
var_10= word ptr -10h
var_E= word ptr -0Eh
var_2= word ptr -2

push    bp
mov     bp, sp
sub     sp, 1Ch
push    di
push    si
mov     [bp+var_2], 2
mov     ax, 0F8h        ; "8"
mov     es, seg_278AA
mul     es:word_2232E
add     ax, 1AEEh
mov     cx, seg dseg
mov     si, ax
mov     [bp+var_12], cx
sub     ax, ax
mov     [bp+var_E], ax
mov     [bp+var_10], 792h

loc_1B658:
sub     di, di
mov     ax, [bp+var_10]
mov     [bp+var_2], ax

loc_1B660:
mov     es, [bp+var_12]
assume es:nothing
mov     bx, es:[si]
mov     ax, bx
shl     bx, 1
add     bx, ax
shl     bx, 1
mov     es, seg_278C4
assume es:dseg
mov     al, es:[bx+282h]
cmp     al, 8
jnz     short loc_1B67E
jmp     loc_1B72C

loc_1B67E:
cmp     al, 5
jnz     short loc_1B685
jmp     loc_1B72C

loc_1B685:
cmp     al, 0Ah
jz      short loc_1B6B4
cmp     al, 7
jz      short loc_1B6B4
cmp     al, 6
jz      short loc_1B6B4
mov     ax, es:[bx+286h]
mov     es, seg_278B2
assume es:seg008
add     ax, es:word_2229A
mov     dx, es:word_2229C
push    dx
push    ax
push    [bp+var_2]
call    sub_1F696
add     sp, 6
jmp     loc_1B7A9

loc_1B6B4:
mov     es, seg_278B2
mov     ax, es:word_2229A
mov     dx, es:word_2229C
mov     es, seg_278C4
assume es:dseg
add     ax, es:word_225EA
push    dx
push    ax
mov     ax, [bp+var_E]
add     ax, di
shl     ax, 1
shl     ax, 1
add     ax, 792h
push    ax
mov     [bp+var_1A], ax
call    sub_1F696
add     sp, 6
mov     es, [bp+var_12]
assume es:nothing
mov     bx, es:[si]
mov     ax, bx
shl     bx, 1
add     bx, ax
shl     bx, 1
mov     es, seg_278C4
assume es:dseg
mov     ax, es:[bx+286h]
mov     es, seg_278B2
assume es:seg008
add     ax, es:word_2229A
mov     dx, es:word_2229C
push    dx
push    ax
mov     ax, 4Ch ; 'L'
push    ax
call    sub_1F737
add     sp, 6
mov     al, 88h
push    ax
mov     ax, 4Ch ; 'L'
push    ax
mov     ax, 20h ; ' '
push    ax
mov     ax, 2
push    ax
push    [bp+var_1A]
jmp     short loc_1B7A1
align 2

loc_1B72C:
mov     es, seg_278B2
mov     ax, es:word_2229A
mov     dx, es:word_2229C
mov     es, seg_278C4
assume es:dseg
add     ax, es:word_225EA
push    dx
push    ax
mov     ax, [bp+var_E]
add     ax, di
shl     ax, 1
shl     ax, 1
add     ax, 792h
push    ax
mov     [bp+var_1C], ax
call    sub_1F696
add     sp, 6
mov     es, [bp+var_12]
assume es:nothing
mov     bx, es:[si]
mov     ax, bx
shl     bx, 1
add     bx, ax
shl     bx, 1
mov     es, seg_278C4
assume es:dseg
mov     ax, es:[bx+286h]
mov     es, seg_278B2
assume es:seg008
add     ax, es:word_2229A
mov     dx, es:word_2229C
push    dx
push    ax
mov     ax, 4Ch ; 'L'
push    ax
call    sub_1F737
add     sp, 6
mov     al, 11h
push    ax
mov     ax, 4Ch ; 'L'
push    ax
mov     ax, 20h ; ' '
push    ax
mov     ax, 2
push    ax
push    [bp+var_1C]

loc_1B7A1:
call    sub_20256
add     sp, 0Ah

loc_1B7A9:
add     [bp+var_2], 4
inc     si
inc     si
mov     ax, [bp+var_12]
inc     di
cmp     di, 0Bh
jnb     short loc_1B7BB
jmp     loc_1B660

loc_1B7BB:
add     [bp+var_E], 280h
add     byte ptr [bp+var_10+1], 0Ah
cmp     [bp+var_10], 7592h
jnb     short loc_1B7CE
jmp     loc_1B658

loc_1B7CE:
pop     si
pop     di
mov     sp, bp
pop     bp
retf
sub_1B62A endp



; Attributes: bp-based frame

sub_1B7D4 proc far

var_2C= byte ptr -2Ch
var_2= word ptr -2
arg_0= dword ptr  6
arg_4= word ptr  0Ah

push    bp
mov     bp, sp
sub     sp, 2Ch
push    di
push    si
mov     ax, 0Ah
push    ax              ; int
lea     ax, [bp+var_2C]
push    ss
push    ax              ; char *
push    [bp+arg_4]      ; int
call    _itoa
add     sp, 8
sub     si, si
cmp     [bp+var_2C], 0
jz      short loc_1B82E
mov     ax, word ptr [bp+arg_0]
mov     dx, word ptr [bp+arg_0+2]
mov     di, ax
mov     [bp+var_2], dx

loc_1B803:
mov     al, [bp+si+var_2C]
sub     ah, ah
push    ax
call    sub_1F4EC
add     sp, 2
mov     cx, ax
mov     al, ah
mov     es, [bp+var_2]
assume es:nothing
mov     es:[di], al
mov     es, [bp+var_2]
mov     es:[di+1], cl
inc     di
inc     di
mov     ax, [bp+var_2]
inc     si
cmp     [bp+si+var_2C], 0
jnz     short loc_1B803

loc_1B82E:
mov     bx, si
shl     bx, 1
les     si, [bp+arg_0]
mov     byte ptr es:[bx+si], 0
pop     si
pop     di
mov     sp, bp
pop     bp
retf
sub_1B7D4 endp

align 2
push    bp
mov     bp, sp
sub     sp, 0A2h
push    di
push    si
mov     ax, 0Ah
push    ax
lea     ax, [bp-52h]
push    ss
push    ax
push    word ptr [bp+0Ah]
call    _itoa
add     sp, 8
sub     si, si
cmp     byte ptr [bp-52h], 0
jz      short loc_1B897
lea     ax, [bp-0A2h]
mov     [bp-2], ax

loc_1B86C:
mov     al, [bp+si-52h]
sub     ah, ah
push    ax
call    sub_1F4EC
add     sp, 2
mov     di, ax
mov     ah, al
sub     al, al
mov     cx, di
mov     cl, ch
sub     ch, ch
or      ax, cx
mov     bx, [bp-2]
add     word ptr [bp-2], 2
mov     [bx], ax
inc     si
cmp     [bp+si-52h], ch
jnz     short loc_1B86C

loc_1B897:
shl     si, 1
mov     word ptr [bp+si-0A2h], 0
lea     ax, [bp-0A2h]
push    ss
push    ax
mov     al, [bp+0Eh]
push    ax
push    word ptr [bp+8]
lea     ax, [bp-52h]
mov     di, ax
push    ss
pop     es
mov     cx, 0FFFFh
xor     ax, ax
repne scasb
not     cx
dec     cx
sub     cx, [bp+0Ch]
neg     cx
shl     cx, 1
add     cx, [bp+6]
push    cx
push    cs
call    near ptr sub_19E30
add     sp, 0Ah
pop     si
pop     di
mov     sp, bp
pop     bp
retf
align 2


; Attributes: bp-based frame

sub_1B8D6 proc far

var_A2= word ptr -0A2h
var_52= byte ptr -52h
var_2= word ptr -2
arg_0= word ptr  6
arg_2= word ptr  8
arg_4= word ptr  0Ah
arg_6= word ptr  0Ch
arg_8= byte ptr  0Eh

push    bp
mov     bp, sp
sub     sp, 0A2h
push    di
push    si
mov     ax, 0Ah
push    ax              ; int
lea     ax, [bp+var_52]
push    ss
push    ax              ; char *
push    [bp+arg_4]      ; int
call    _itoa
add     sp, 8
sub     si, si
cmp     [bp+var_52], 0
jz      short loc_1B92D
lea     ax, [bp+var_A2]
mov     [bp+var_2], ax

loc_1B902:
mov     al, [bp+si+var_52]
sub     ah, ah
push    ax
call    sub_1F4EC
add     sp, 2
mov     di, ax
mov     ah, al
sub     al, al
mov     cx, di
mov     cl, ch
sub     ch, ch
or      ax, cx
mov     bx, [bp+var_2]
add     [bp+var_2], 2
mov     [bx], ax
inc     si
cmp     [bp+si+var_52], ch
jnz     short loc_1B902

loc_1B92D:
shl     si, 1
mov     [bp+si+var_A2], 0
lea     ax, [bp+var_A2]
push    ss
push    ax
mov     al, [bp+arg_8]
push    ax
push    [bp+arg_2]
lea     ax, [bp+var_52]
mov     di, ax
push    ss
pop     es
mov     cx, 0FFFFh
xor     ax, ax
repne scasb
not     cx
dec     cx
sub     cx, [bp+arg_6]
neg     cx
shl     cx, 1
add     cx, [bp+arg_0]
push    cx
call    sub_20801
add     sp, 0Ah
pop     si
pop     di
mov     sp, bp
pop     bp
retf
sub_1B8D6 endp



; Attributes: bp-based frame

sub_1B96C proc far

var_10= dword ptr -10h
var_C= dword ptr -0Ch
var_8= dword ptr -8
var_4= dword ptr -4
arg_0= byte ptr  6

push    bp
mov     bp, sp
sub     sp, 10h
mov     bx, offset word_22328
mov     es, seg_278BA
assume es:seg008
mov     word ptr [bp+var_4], bx
mov     word ptr [bp+var_4+2], es
cmp     word ptr es:[bx], 2706h
jbe     short loc_1B98B
mov     word ptr es:[bx], 2706h

loc_1B98B:
mov     bx, offset word_2232C
mov     es, seg_278BC
mov     word ptr [bp+var_8], bx
mov     word ptr [bp+var_8+2], es
cmp     word ptr es:[bx], 3DEh
jbe     short loc_1B9A4
mov     word ptr es:[bx], 3DEh

loc_1B9A4:
mov     bx, offset word_222A6
mov     es, seg_278BE
mov     word ptr [bp+var_C], bx
mov     word ptr [bp+var_C+2], es
cmp     word ptr es:[bx], 3DEh
jbe     short loc_1B9BD
mov     word ptr es:[bx], 3DEh

loc_1B9BD:
mov     bx, offset word_22332
mov     es, seg_278CC
mov     word ptr [bp+var_10], bx
mov     word ptr [bp+var_10+2], es
cmp     word ptr es:[bx], 2706h
jbe     short loc_1B9D6
mov     word ptr es:[bx], 2706h

loc_1B9D6:
cmp     [bp+arg_0], 0
jz      short loc_1B9E2
cmp     [bp+arg_0], 1
jnz     short loc_1BA15

loc_1B9E2:
mov     al, 0DDh
push    ax
mov     ax, 10h
push    ax
mov     ax, 4
push    ax
mov     cx, 1906h
push    cx
call    sub_1FCD9
add     sp, 8
mov     al, 0FFh
push    ax
mov     ax, 4
push    ax
les     bx, [bp+var_4]
assume es:nothing
push    word ptr es:[bx]
mov     ax, 50h ; 'P'
push    ax
mov     ax, 6
push    ax
push    cs
call    near ptr sub_1B8D6
add     sp, 0Ah

loc_1BA15:
cmp     [bp+arg_0], 0
jz      short loc_1BA21
cmp     [bp+arg_0], 2
jnz     short loc_1BA54

loc_1BA21:
mov     al, 0DDh
push    ax
mov     ax, 10h
push    ax
mov     ax, 4
push    ax
mov     cx, 2086h
push    cx
call    sub_1FCD9
add     sp, 8
mov     al, 0FFh
push    ax
mov     ax, 4
push    ax
les     bx, [bp+var_8]
push    word ptr es:[bx]
mov     ax, 68h ; 'h'
push    ax
mov     ax, 6
push    ax
push    cs
call    near ptr sub_1B8D6
add     sp, 0Ah

loc_1BA54:
cmp     [bp+arg_0], 0
jz      short loc_1BA60
cmp     [bp+arg_0], 3
jnz     short loc_1BA93

loc_1BA60:
mov     al, 0DDh
push    ax
mov     ax, 10h
push    ax
mov     ax, 4
push    ax
mov     cx, 2806h
push    cx
call    sub_1FCD9
add     sp, 8
mov     al, 0FFh
push    ax
mov     ax, 4
push    ax
les     bx, [bp+var_C]
push    word ptr es:[bx]
mov     ax, 80h ; '�'
push    ax
mov     ax, 6
push    ax
push    cs
call    near ptr sub_1B8D6
add     sp, 0Ah

loc_1BA93:
cmp     [bp+arg_0], 0
jz      short loc_1BA9F
cmp     [bp+arg_0], 4
jnz     short loc_1BAD2

loc_1BA9F:
mov     al, 0DDh
push    ax
mov     ax, 10h
push    ax
mov     ax, 4
push    ax
mov     cx, 2F86h
push    cx
call    sub_1FCD9
add     sp, 8
mov     al, 0FFh
push    ax
mov     ax, 4
push    ax
les     bx, [bp+var_10]
push    word ptr es:[bx]
mov     ax, 98h
push    ax
mov     ax, 6
push    ax
push    cs
call    near ptr sub_1B8D6
add     sp, 0Ah

loc_1BAD2:
cmp     [bp+arg_0], 0
jz      short loc_1BADE
cmp     [bp+arg_0], 5
jnz     short loc_1BB29

loc_1BADE:
mov     al, 0DDh
push    ax
mov     ax, 10h
push    ax
mov     ax, 4
push    ax
mov     cx, 0F04h
push    cx
call    sub_1FCD9
add     sp, 8
mov     ax, 1905h
push    ds
push    ax
mov     al, 0FFh
push    ax
mov     cx, 30h ; '0'
push    cx
mov     dx, 4
push    dx
call    sub_20801
add     sp, 0Ah
mov     al, 0FFh
push    ax
mov     ax, 2
push    ax
mov     es, seg_278AA
assume es:seg008
push    es:word_2232E
mov     ax, 30h ; '0'
push    ax
mov     ax, 6
push    ax
push    cs
call    near ptr sub_1B8D6

loc_1BB29:
mov     sp, bp
pop     bp
retf
sub_1B96C endp

align 2



sub_1BB2E proc far
mov     es, seg_278B4
push    es:word_222A0
push    es:word_2229E
sub     ax, ax
push    ax
call    sub_1F696
add     sp, 6
sub     al, al
push    ax
push    cs
call    near ptr sub_1B96C
add     sp, 2
push    cs
call    near ptr sub_19B9C
push    cs
call    near ptr sub_19C8E
push    cs
call    near ptr sub_19FF8
call    sub_12F8C
push    cs
call    near ptr sub_1B62A
push    cs
call    near ptr sub_1A1E4
retf
sub_1BB2E endp

align 2


; Attributes: bp-based frame

sub_1BB6C proc far

var_128= word ptr -128h
var_126= word ptr -126h
var_124= word ptr -124h
var_122= word ptr -122h
var_120= word ptr -120h
var_11E= word ptr -11Eh
var_11C= word ptr -11Ch
var_11A= word ptr -11Ah
var_118= word ptr -118h
var_116= word ptr -116h
var_114= word ptr -114h
var_112= word ptr -112h
var_110= word ptr -110h
var_10E= word ptr -10Eh
var_10C= word ptr -10Ch
var_10A= word ptr -10Ah
var_108= word ptr -108h
var_106= word ptr -106h
var_104= word ptr -104h
var_102= word ptr -102h
var_100= word ptr -100h
var_FE= word ptr -0FEh
var_FC= word ptr -0FCh
var_FA= word ptr -0FAh
var_F8= word ptr -0F8h
var_F6= word ptr -0F6h
var_F4= word ptr -0F4h
var_F2= word ptr -0F2h
var_F0= word ptr -0F0h
var_EE= word ptr -0EEh
var_EC= word ptr -0ECh
var_EA= word ptr -0EAh
var_E8= word ptr -0E8h
var_E6= word ptr -0E6h
var_E4= word ptr -0E4h
var_E2= word ptr -0E2h
var_E0= word ptr -0E0h
var_DE= word ptr -0DEh
var_DC= word ptr -0DCh
var_DA= word ptr -0DAh
var_D8= word ptr -0D8h
var_D6= word ptr -0D6h
var_D4= word ptr -0D4h
var_D2= word ptr -0D2h
var_D0= word ptr -0D0h
var_CE= word ptr -0CEh
var_CC= word ptr -0CCh
var_CA= word ptr -0CAh
var_C8= word ptr -0C8h
var_C6= word ptr -0C6h
var_C4= word ptr -0C4h
var_C2= word ptr -0C2h
var_C0= word ptr -0C0h
var_BE= word ptr -0BEh
var_BC= word ptr -0BCh
var_BA= word ptr -0BAh
var_B8= word ptr -0B8h
var_B6= word ptr -0B6h
var_B4= word ptr -0B4h
var_B2= word ptr -0B2h
var_B0= word ptr -0B0h
var_AE= word ptr -0AEh
var_AC= word ptr -0ACh
var_AA= word ptr -0AAh
var_A8= word ptr -0A8h
var_A6= byte ptr -0A6h
var_A4= word ptr -0A4h
var_A2= word ptr -0A2h
var_A0= word ptr -0A0h
var_9E= word ptr -9Eh
var_9C= word ptr -9Ch
var_9A= word ptr -9Ah
var_98= word ptr -98h
var_96= word ptr -96h
var_94= word ptr -94h
var_92= word ptr -92h
var_90= word ptr -90h
var_8E= word ptr -8Eh
var_8C= word ptr -8Ch
var_8A= word ptr -8Ah
var_88= word ptr -88h
var_86= word ptr -86h
var_84= word ptr -84h
var_82= word ptr -82h
var_80= word ptr -80h
var_7E= word ptr -7Eh
var_7C= word ptr -7Ch
var_7A= word ptr -7Ah
var_78= word ptr -78h
var_76= word ptr -76h
var_74= word ptr -74h
var_72= word ptr -72h
var_70= word ptr -70h
var_6E= word ptr -6Eh
var_6C= word ptr -6Ch
var_6A= word ptr -6Ah
var_68= word ptr -68h
var_66= word ptr -66h
var_64= word ptr -64h
var_62= word ptr -62h
var_60= word ptr -60h
var_5E= word ptr -5Eh
var_5C= word ptr -5Ch
var_5A= word ptr -5Ah
var_58= word ptr -58h
var_56= word ptr -56h
var_54= word ptr -54h
var_52= word ptr -52h
var_50= word ptr -50h
var_4E= word ptr -4Eh
var_4C= word ptr -4Ch
var_4A= word ptr -4Ah
var_48= word ptr -48h
var_46= word ptr -46h
var_44= word ptr -44h
var_42= word ptr -42h
var_40= word ptr -40h
var_3E= word ptr -3Eh
var_3C= word ptr -3Ch
var_3A= word ptr -3Ah
var_38= word ptr -38h
var_36= word ptr -36h
var_34= word ptr -34h
var_32= word ptr -32h
var_30= word ptr -30h
var_2E= word ptr -2Eh
var_2C= word ptr -2Ch
var_2A= word ptr -2Ah
var_28= word ptr -28h
var_26= word ptr -26h
var_24= word ptr -24h
var_22= word ptr -22h
var_20= word ptr -20h
var_1E= word ptr -1Eh
var_1C= word ptr -1Ch
var_1A= word ptr -1Ah
var_18= word ptr -18h
var_16= word ptr -16h
var_14= word ptr -14h
var_12= word ptr -12h
var_10= word ptr -10h
var_E= word ptr -0Eh
var_C= word ptr -0Ch
var_A= word ptr -0Ah
var_8= word ptr -8
var_6= word ptr -6
var_4= word ptr -4
var_2= word ptr -2

push    bp
mov     bp, sp
sub     sp, 128h
push    di
push    si
mov     [bp+var_108], 8F8h
mov     [bp+var_DA], 0CCFh
mov     ax, 0BBEh
mov     [bp+var_DC], ax
mov     [bp+var_D8], ax
mov     ax, 0AADh
mov     [bp+var_DE], ax
mov     [bp+var_D6], ax
mov     ax, 99Ch
mov     [bp+var_E0], ax
mov     [bp+var_D4], ax
mov     ax, 88Bh
mov     [bp+var_E2], ax
mov     [bp+var_D2], ax
mov     ax, 77Ah
mov     [bp+var_E4], ax
mov     [bp+var_D0], ax
mov     ax, 669h
mov     [bp+var_E6], ax
mov     [bp+var_CE], ax
mov     ax, 558h
mov     [bp+var_E8], ax
mov     [bp+var_CC], ax
mov     ax, 447h
mov     [bp+var_EA], ax
mov     [bp+var_CA], ax
mov     ax, 336h
mov     [bp+var_EC], ax
mov     [bp+var_C8], ax
mov     ax, 225h
mov     [bp+var_EE], ax
mov     [bp+var_C6], ax
mov     ax, 30h ; '0'
mov     [bp+var_F0], ax
mov     [bp+var_C4], ax
mov     ax, 40h ; '@'
mov     [bp+var_F2], ax
mov     [bp+var_C2], ax
mov     ax, 50h ; 'P'
mov     [bp+var_F4], ax
mov     [bp+var_C0], ax
mov     ax, 60h ; '`'
mov     [bp+var_F6], ax
mov     [bp+var_BE], ax
mov     ax, 70h ; 'p'
mov     [bp+var_F8], ax
mov     [bp+var_BC], ax
mov     ax, 181h
mov     [bp+var_FA], ax
mov     [bp+var_BA], ax
mov     ax, 292h
mov     [bp+var_FC], ax
mov     [bp+var_B8], ax
mov     ax, 3A3h
mov     [bp+var_FE], ax
mov     [bp+var_B6], ax
mov     ax, 4B4h
mov     [bp+var_100], ax
mov     [bp+var_B4], ax
mov     ax, 5C5h
mov     [bp+var_102], ax
mov     [bp+var_B2], ax
mov     ax, 6D6h
mov     [bp+var_104], ax
mov     [bp+var_B0], ax
mov     ax, 7E7h
mov     [bp+var_106], ax
mov     [bp+var_AE], ax
mov     [bp+var_124], 2888h
mov     [bp+var_122], 3888h
mov     [bp+var_120], 4888h
mov     [bp+var_11E], 5888h
mov     [bp+var_11C], 6888h
mov     [bp+var_114], 0A558h
sub     ax, ax
mov     [bp+var_128], ax
mov     [bp+var_20], ax
mov     [bp+var_1A], 3000h
mov     [bp+var_18], 4000h
mov     [bp+var_16], 5000h
mov     [bp+var_14], 6000h
mov     ax, 78F8h
mov     [bp+var_11A], ax
mov     [bp+var_12], ax
mov     ax, 8CAAh
mov     [bp+var_118], ax
mov     [bp+var_10], ax
mov     ax, 9ECCh
mov     [bp+var_116], ax
mov     [bp+var_E], ax
mov     [bp+var_C], 0A447h
mov     ax, 0BAADh
mov     [bp+var_112], ax
mov     [bp+var_A], ax
mov     ax, 0CCCFh
mov     [bp+var_110], ax
mov     [bp+var_8], ax
mov     ax, 0D666h
mov     [bp+var_10E], ax
mov     [bp+var_6], ax
mov     ax, 0ECCCh
mov     [bp+var_10C], ax
mov     [bp+var_4], ax
mov     ax, 0FFFFh
mov     [bp+var_10A], ax
mov     [bp+var_2], ax
mov     ax, 1000h
mov     [bp+var_1E], ax
mov     [bp+var_80], ax
mov     [bp+var_7E], 1111h
mov     [bp+var_7C], 1222h
mov     [bp+var_7A], 1333h
mov     [bp+var_78], 1444h
mov     [bp+var_76], 1555h
mov     [bp+var_74], 1666h
mov     [bp+var_72], 1777h
mov     ax, 1888h
mov     [bp+var_126], ax
mov     [bp+var_70], ax
mov     [bp+var_6E], 1999h
mov     [bp+var_6C], 1AAAh
mov     [bp+var_6A], 1BBBh
mov     [bp+var_68], 1CCCh
mov     [bp+var_66], 1DDDh
mov     [bp+var_64], 1EEEh
mov     [bp+var_62], 1FFFh
mov     ax, 2000h
mov     [bp+var_1C], ax
mov     [bp+var_60], ax
mov     [bp+var_5E], 2111h
mov     [bp+var_5C], 2222h
mov     [bp+var_5A], 2333h
mov     [bp+var_58], 2444h
mov     [bp+var_56], 2555h
mov     [bp+var_54], 2666h
mov     [bp+var_52], 2777h
mov     [bp+var_50], 2888h
mov     [bp+var_4E], 2999h
mov     [bp+var_4C], 2AAAh
mov     [bp+var_4A], 2BBBh
mov     [bp+var_48], 2CCCh
mov     [bp+var_46], 2DDDh
mov     [bp+var_44], 2EEEh
mov     [bp+var_40], 3000h
mov     [bp+var_3E], 3111h
mov     [bp+var_3C], 3222h
mov     [bp+var_3A], 3333h
mov     [bp+var_38], 3444h
mov     [bp+var_36], 3555h
mov     [bp+var_34], 3666h
mov     [bp+var_32], 3777h
mov     [bp+var_30], 3888h
mov     [bp+var_2E], 3999h
mov     [bp+var_2C], 3AAAh
mov     [bp+var_2A], 3BBBh
mov     [bp+var_28], 3CCCh
mov     [bp+var_26], 3DDDh
mov     [bp+var_24], 3EEEh
mov     [bp+var_9E], 1FFFh
mov     ax, 2FFFh
mov     [bp+var_42], ax
mov     [bp+var_9C], ax
mov     ax, 3FFFh
mov     [bp+var_22], ax
mov     [bp+var_9A], ax
mov     [bp+var_98], 4000h
mov     [bp+var_96], 5000h
mov     [bp+var_94], 6000h
mov     [bp+var_92], 78F8h
mov     [bp+var_90], 8CAAh
mov     [bp+var_8E], 9ECCh
mov     [bp+var_8C], 0A447h
mov     [bp+var_8A], 0BAADh
mov     [bp+var_88], 0CCCFh
mov     [bp+var_86], 0D666h
mov     [bp+var_84], 0ECCCh
mov     [bp+var_82], 0FFFFh
mov     es, seg_278B4
mov     ax, es:word_2229E
mov     dx, es:word_222A0
add     ax, 61A8h
push    dx
push    ax
sub     ax, ax
mov     [bp+var_A0], ax
push    ax
call    sub_1F696
add     sp, 6
lea     ax, [bp+var_20]
push    ss
push    ax
call    sub_1FB8A
add     sp, 4
mov     ax, 1Eh
push    ax
call    sub_1F9E2
add     sp, 2
mov     [bp+var_AC], 0

loc_1BE9E:
mov     [bp+var_AA], 0

loc_1BEA4:
mov     cl, 4
mov     si, [bp+var_AC]
shl     si, cl
add     si, [bp+var_AA]
shl     si, 1
push    [bp+si+var_80]
call    sub_1FA1D
add     sp, 2
mov     ax, 3
push    ax
call    sub_1F9E2
add     sp, 2
inc     [bp+var_AA]
cmp     [bp+var_AA], 10h
jb      short loc_1BEA4
mov     ax, 3Ch ; '<'
push    ax
call    sub_1F9E2
add     sp, 2
inc     [bp+var_AC]
cmp     [bp+var_AC], 3
jb      short loc_1BE9E
mov     ax, 3Ch ; '<'
push    ax
call    sub_1F9E2
add     sp, 2
lea     ax, [bp+var_A0]
push    ss
push    ax
call    sub_1FA51
add     sp, 4
mov     ax, 32h ; '2'
push    ax
call    sub_1F9E2
add     sp, 2
mov     es, seg_278B4
push    es:word_222A0
push    es:word_2229E
sub     ax, ax
push    ax
call    sub_1F696
add     sp, 6
mov     ax, 190Eh
push    ds
push    ax
mov     al, 11h
push    ax
mov     ax, 118h
mov     [bp+var_A8], ax
push    ax
mov     ax, 1Ch
mov     [bp+var_A4], ax
push    ax
push    cs
call    near ptr sub_19E30
add     sp, 0Ah
lea     ax, [bp+var_128]
push    ss
push    ax
call    sub_1FB8A
add     sp, 4
mov     ax, 2
push    ax
call    sub_20FAB
add     sp, 2
mov     [bp+var_AA], 0
call    sub_20D45
jmp     loc_1C062
align 2

loc_1BF72:
cmp     al, 34h ; '4'
jnz     short loc_1BF79
jmp     loc_1C072

loc_1BF79:
mov     ax, 3
push    ax
call    sub_1F9E2
add     sp, 2
mov     ax, [bp+var_AA]
mov     cx, 2Eh ; '.'
sub     dx, dx
div     cx
mov     si, dx
shl     si, 1
mov     ax, [bp+si+var_108]
or      ah, 10h
push    ax
call    sub_1FA1D
add     sp, 2
mov     ax, [bp+var_AA]
inc     ax
mov     cx, 2Eh ; '.'
mov     bx, ax
sub     dx, dx
div     cx
mov     si, dx
shl     si, 1
mov     ax, [bp+si+var_108]
or      ah, 20h
push    ax
mov     si, bx
call    sub_1FA1D
add     sp, 2
mov     ax, [bp+var_AA]
inc     ax
inc     ax
mov     cx, 2Eh ; '.'
sub     dx, dx
div     cx
mov     di, dx
shl     di, 1
mov     ax, [bp+di+var_108]
or      ah, 30h
push    ax
call    sub_1FA1D
add     sp, 2
mov     ax, [bp+var_AA]
add     ax, 14h
mov     cx, 2Eh ; '.'
sub     dx, dx
div     cx
mov     di, dx
shl     di, 1
mov     ax, [bp+di+var_108]
or      ah, 40h
push    ax
call    sub_1FA1D
add     sp, 2
mov     ax, [bp+var_AA]
add     ax, 15h
mov     cx, 2Eh ; '.'
sub     dx, dx
div     cx
mov     di, dx
shl     di, 1
mov     ax, [bp+di+var_108]
or      ah, 50h
push    ax
call    sub_1FA1D
add     sp, 2
mov     ax, [bp+var_AA]
add     ax, 16h
mov     cx, 2Eh ; '.'
sub     dx, dx
div     cx
mov     di, dx
shl     di, 1
mov     ax, [bp+di+var_108]
or      ah, 60h
mov     [bp+var_A2], ax
push    ax
call    sub_1FA1D
add     sp, 2
mov     [bp+var_AA], si
cmp     si, 2Eh ; '.'
jb      short loc_1C062
mov     [bp+var_AA], 0

loc_1C062:
call    sub_20D08
mov     [bp+var_A6], al
cmp     al, 1Ch
jz      short loc_1C072
jmp     loc_1BF72

loc_1C072:
lea     ax, [bp+var_128]
push    ss
push    ax
call    sub_1FA51
add     sp, 4
call    sub_21139
pop     si
pop     di
mov     sp, bp
pop     bp
retf
sub_1BB6C endp

align 2


; Attributes: bp-based frame

; int __cdecl __far sub_1C08C(char *, void *, size_t)
sub_1C08C proc far

var_2= word ptr -2
arg_0= dword ptr  6
arg_4= dword ptr  0Ah
arg_8= word ptr  0Eh

push    bp
mov     bp, sp
sub     sp, 4
push    di
push    si
mov     si, word ptr [bp+arg_0]
mov     ax, 193Ch
push    ds
push    ax              ; char *
push    word ptr [bp+arg_0+2]
push    si              ; char *
call    _fopen
add     sp, 8
mov     di, ax
mov     [bp+var_2], dx
or      dx, ax
jnz     short loc_1C0C7
mov     ax, word ptr [bp+arg_0+2]
push    ax
push    si
mov     ax, 193Fh
push    ds
push    ax              ; char *
call    _printf
add     sp, 8
push    cs
call    near ptr sub_1C48C

loc_1C0C7:
mov     ax, [bp+var_2]
push    ax
push    di              ; FILE *
mov     cx, 1
push    cx              ; size_t
push    [bp+arg_8]      ; size_t
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4] ; void *
mov     si, ax
call    _fwrite
add     sp, 0Ch
push    si
push    di              ; FILE *
call    _fclose
add     sp, 4
pop     si
pop     di
mov     sp, bp
pop     bp
retf
sub_1C08C endp

align 2


; Attributes: bp-based frame

; int __cdecl __far sub_1C0F4(char *, void *)
sub_1C0F4 proc far

var_2= word ptr -2
arg_0= dword ptr  6
arg_4= dword ptr  0Ah

push    bp
mov     bp, sp
sub     sp, 4
push    di
push    si
mov     si, word ptr [bp+arg_0]
mov     ax, 1960h
push    ds
push    ax              ; char *
push    word ptr [bp+arg_0+2]
push    si              ; char *
call    _fopen
add     sp, 8
mov     di, ax
mov     [bp+var_2], dx
or      dx, ax
jnz     short loc_1C12F
mov     ax, word ptr [bp+arg_0+2]
push    ax
push    si
mov     ax, 1963h
push    ds
push    ax              ; char *
call    _printf
add     sp, 8
push    cs
call    near ptr sub_1C48C

loc_1C12F:
mov     ax, [bp+var_2]
push    ax
push    di              ; FILE *
mov     cx, 1
push    cx              ; size_t
mov     cx, 0FFFFh
push    cx              ; size_t
push    word ptr [bp+arg_4+2]
push    word ptr [bp+arg_4] ; void *
mov     si, ax
call    _fread
add     sp, 0Ch
push    si
push    di              ; FILE *
call    _fclose
add     sp, 4
pop     si
pop     di
mov     sp, bp
pop     bp
retf
sub_1C0F4 endp



; Attributes: bp-based frame

sub_1C15C proc far

var_4= word ptr -4
var_2= word ptr -2
arg_0= word ptr  6
arg_2= word ptr  8
arg_4= word ptr  0Ah
arg_6= word ptr  0Ch
arg_8= word ptr  0Eh
arg_A= word ptr  10h
arg_C= word ptr  12h
arg_E= word ptr  14h

push    bp
mov     bp, sp
sub     sp, 4
push    di
push    si
mov     di, [bp+arg_4]
mov     si, [bp+arg_0]
mov     cl, 4
mov     dx, [bp+arg_2]
mov     ax, si
mov     bx, si
shr     ax, cl
mov     si, dx
add     dx, ax
inc     dx
push    dx
push    bx
push    si
mov     ax, 198Ah
push    ds
push    ax              ; char *
mov     si, dx
call    _printf
add     sp, 0Ah
mov     cx, [bp+arg_6]
mov     ax, di
mov     dx, cx
mov     cl, 4
mov     bx, di
shr     ax, cl
add     ax, dx
inc     ax
push    ax
push    bx
push    dx
mov     dx, 19A1h
push    ds
push    dx              ; char *
mov     di, ax
call    _printf
add     sp, 0Ah
mov     cl, 4
mov     ax, [bp+arg_8]
mov     dx, ax
shr     ax, cl
mov     bx, [bp+arg_A]
mov     cx, bx
add     bx, ax
lea     ax, [bx+1]
push    ax
push    dx
push    cx
mov     cx, 19B8h
push    ds
push    cx              ; char *
mov     [bp+var_2], ax
call    _printf
add     sp, 0Ah
mov     cl, 4
mov     ax, [bp+arg_C]
mov     dx, ax
shr     ax, cl
mov     cx, [bp+arg_E]
mov     bx, cx
add     cx, ax
inc     cx
push    cx
push    dx
push    bx
mov     ax, 19CFh
push    ds
push    ax              ; char *
mov     [bp+var_4], cx
call    _printf
add     sp, 0Ah
push    [bp+var_4]
push    [bp+var_2]
push    di
push    si
call    sub_1F5F3
add     sp, 8
pop     si
pop     di
mov     sp, bp
pop     bp
retf
sub_1C15C endp



; Attributes: bp-based frame

sub_1C20E proc far

var_10= dword ptr -10h
var_C= dword ptr -0Ch
var_8= dword ptr -8
var_4= dword ptr -4

push    bp
mov     bp, sp
sub     sp, 10h
push    si
mov     ax, 7530h
push    ax              ; size_t
call    j___fmalloc
add     sp, 2
mov     es, seg_278A8
mov     es:word_22296, ax
mov     es:word_22298, dx
mov     ax, 0FDE8h
push    ax              ; size_t
call    j___fmalloc
add     sp, 2
mov     bx, offset word_2229A
mov     es, seg_278B2
mov     word ptr [bp+var_4], bx
mov     word ptr [bp+var_4+2], es
mov     es:[bx], ax
mov     es:[bx+2], dx
mov     ax, 0FDE8h
push    ax              ; size_t
call    j___fmalloc
add     sp, 2
mov     bx, offset word_2229E
mov     es, seg_278B4
mov     word ptr [bp+var_8], bx
mov     word ptr [bp+var_8+2], es
mov     es:[bx], ax
mov     es:[bx+2], dx
mov     ax, 0FDE8h
push    ax              ; size_t
call    j___fmalloc
add     sp, 2
mov     bx, offset dword_222A2
mov     es, seg_278CA
mov     word ptr [bp+var_C], bx
mov     word ptr [bp+var_C+2], es
mov     es:[bx], ax
mov     es:[bx+2], dx
mov     ax, 0FDE8h
push    ax              ; size_t
call    j___fmalloc
add     sp, 2
mov     bx, offset word_222A8
mov     es, seg_278D4
mov     word ptr [bp+var_10], bx
mov     word ptr [bp+var_10+2], es
mov     es:[bx], ax
mov     es:[bx+2], dx
les     bx, [bp+var_4]
assume es:nothing
mov     ax, es:[bx+2]
or      ax, es:[bx]
jz      short loc_1C2DE
les     bx, [bp+var_8]
mov     ax, es:[bx+2]
or      ax, es:[bx]
jz      short loc_1C2DE
les     bx, [bp+var_C]
mov     ax, es:[bx+2]
or      ax, es:[bx]
jz      short loc_1C2DE
les     bx, [bp+var_10]
mov     ax, es:[bx+2]
or      ax, es:[bx]
jnz     short loc_1C2EB

loc_1C2DE:
mov     ax, 19E7h
push    ds
push    ax              ; char *
call    _printf
add     sp, 4

loc_1C2EB:
mov     cl, 4
les     bx, [bp+var_4]
mov     ax, es:[bx]
mov     dx, ax
shr     ax, cl
mov     bx, es:[bx+2]
mov     si, bx
add     bx, ax
lea     ax, [bx+1]
push    ax
push    dx
push    si
mov     ax, 1A05h
push    ds
push    ax              ; char *
call    _printf
add     sp, 0Ah
mov     cl, 4
les     bx, [bp+var_8]
mov     ax, es:[bx]
mov     dx, ax
shr     ax, cl
mov     bx, es:[bx+2]
mov     si, bx
add     bx, ax
lea     ax, [bx+1]
push    ax
push    dx
push    si
mov     ax, 1A1Bh
push    ds
push    ax              ; char *
call    _printf
add     sp, 0Ah
mov     cl, 4
les     bx, [bp+var_C]
mov     ax, es:[bx]
mov     dx, ax
shr     ax, cl
mov     cx, es:[bx+2]
mov     si, cx
add     cx, ax
inc     cx
push    cx
push    dx
push    si
mov     ax, 1A31h
push    ds
push    ax              ; char *
call    _printf
add     sp, 0Ah
mov     cl, 4
les     bx, [bp+var_10]
mov     ax, es:[bx]
mov     dx, ax
shr     ax, cl
mov     cx, es:[bx+2]
mov     si, cx
add     cx, ax
inc     cx
push    cx
push    dx
push    si
mov     ax, 1A47h
push    ds
push    ax              ; char *
call    _printf
add     sp, 0Ah
les     bx, [bp+var_10]
mov     ax, es:[bx]
mov     dx, es:[bx+2]
mov     cx, ax
mov     bx, dx
add     ax, 7EF4h
push    dx
push    ax
push    bx
push    cx
les     bx, [bp+var_C]
mov     ax, es:[bx]
mov     dx, es:[bx+2]
mov     cx, ax
mov     bx, dx
add     ax, 7EF4h
push    dx
push    ax
push    bx
push    cx
push    cs
call    near ptr sub_1C15C
add     sp, 10h
pop     si
mov     sp, bp
pop     bp
retf
sub_1C20E endp

align 2



sub_1C3BA proc far
mov     es, seg_278A8
assume es:seg008
push    es:word_22298
push    es:word_22296   ; void far *
call    j___ffree
add     sp, 4
mov     es, seg_278B2
push    es:word_2229C
push    es:word_2229A   ; void far *
call    j___ffree
add     sp, 4
mov     es, seg_278B4
push    es:word_222A0
push    es:word_2229E   ; void far *
call    j___ffree
add     sp, 4
mov     es, seg_278CA
push    word ptr es:dword_222A2+2
push    word ptr es:dword_222A2 ; void far *
call    j___ffree
add     sp, 4
mov     es, seg_278D4
push    es:word_222AA
push    es:word_222A8   ; void far *
call    j___ffree
add     sp, 4
retf
sub_1C3BA endp

align 2



sub_1C42A proc far
push    cs
call    near ptr sub_1C20E
call    sub_20D4C
mov     al, 1
push    ax
call    sub_20212
add     sp, 2
call    sub_1F637
sub     al, al
push    ax
call    sub_20212
add     sp, 2
call    sub_1F637
sub     al, al
push    ax
call    sub_20235
add     sp, 2
call    sub_1F614
mov     ax, 8E8h
mov     cx, seg dseg
push    cx
push    ax
call    sub_1FA06
add     sp, 4
sub     al, al
push    ax
push    ax
sub     ax, ax
push    ax
mov     ax, 14h
push    ax
call    sub_207E0
add     sp, 8
call    sub_16536
retf
sub_1C42A endp



; Attributes: noreturn

sub_1C48C proc far
mov     ax, 908h
mov     cx, seg dseg
push    cx
push    ax
call    sub_1FA51
add     sp, 4
sub     ax, ax
push    ax
call    sub_1FA1D
add     sp, 2
call    sub_1F627
call    sub_1F632
call    sub_20F42
call    sub_20D6F
push    cs
call    near ptr sub_1C3BA
mov     ax, 1A5Fh
push    ds
push    ax              ; char *
call    _printf
add     sp, 4
sub     ax, ax
push    ax              ; int
call    _exit
sub_1C48C endp

add     sp, 2
retf


; Attributes: noreturn bp-based frame

sub_1C4D8 proc far

var_272= word ptr -272h
var_270= word ptr -270h
var_26E= word ptr -26Eh
var_26C= word ptr -26Ch
var_26A= word ptr -26Ah
var_268= word ptr -268h
var_266= word ptr -266h
var_264= word ptr -264h
var_262= word ptr -262h
var_260= word ptr -260h
var_25E= word ptr -25Eh
var_25C= word ptr -25Ch
var_25A= word ptr -25Ah
var_258= word ptr -258h
var_256= word ptr -256h
var_254= word ptr -254h
var_252= word ptr -252h
var_250= word ptr -250h
var_24E= word ptr -24Eh
var_24C= word ptr -24Ch
var_24A= word ptr -24Ah
var_248= word ptr -248h
var_246= word ptr -246h
var_244= word ptr -244h
var_242= word ptr -242h
var_240= word ptr -240h
var_23E= word ptr -23Eh
var_23C= word ptr -23Ch
var_23A= word ptr -23Ah
var_238= word ptr -238h
var_236= word ptr -236h
var_234= word ptr -234h
var_232= word ptr -232h
var_230= word ptr -230h
var_22E= word ptr -22Eh
var_22C= word ptr -22Ch
var_22A= word ptr -22Ah
var_228= word ptr -228h
var_226= word ptr -226h
var_224= word ptr -224h
var_222= word ptr -222h
var_220= word ptr -220h
var_21E= word ptr -21Eh
var_21C= word ptr -21Ch
var_21A= word ptr -21Ah
var_218= word ptr -218h
var_216= word ptr -216h
var_214= word ptr -214h
var_212= word ptr -212h
var_210= word ptr -210h
var_20E= word ptr -20Eh
var_20C= word ptr -20Ch
var_20A= word ptr -20Ah
var_208= word ptr -208h
var_206= word ptr -206h
var_204= word ptr -204h
var_202= word ptr -202h
var_200= word ptr -200h
var_1FE= word ptr -1FEh
var_1FC= word ptr -1FCh
var_1FA= word ptr -1FAh
var_1F8= word ptr -1F8h
var_1F6= word ptr -1F6h
var_1F4= word ptr -1F4h
var_1F2= word ptr -1F2h
var_1F0= word ptr -1F0h
var_1EE= word ptr -1EEh
var_1EC= word ptr -1ECh
var_1EA= word ptr -1EAh
var_1E8= word ptr -1E8h
var_1E6= word ptr -1E6h
var_1E4= word ptr -1E4h
var_1E2= word ptr -1E2h
var_1E0= word ptr -1E0h
var_1DE= word ptr -1DEh
var_1DC= word ptr -1DCh
var_1DA= word ptr -1DAh
var_1D8= word ptr -1D8h
var_1D6= word ptr -1D6h
var_1D4= word ptr -1D4h
var_1D2= word ptr -1D2h
var_1D0= word ptr -1D0h
var_1CE= word ptr -1CEh
var_1CC= word ptr -1CCh
var_1CA= word ptr -1CAh
var_1C8= word ptr -1C8h
var_1C6= word ptr -1C6h
var_1C4= word ptr -1C4h
var_1C2= word ptr -1C2h
var_1C0= word ptr -1C0h
var_1BE= word ptr -1BEh
var_1BC= word ptr -1BCh
var_1BA= word ptr -1BAh
var_1B8= word ptr -1B8h
var_1B6= word ptr -1B6h
var_1B4= word ptr -1B4h
var_1B2= word ptr -1B2h
var_1B0= word ptr -1B0h
var_1AE= word ptr -1AEh
var_1AC= word ptr -1ACh
var_1AA= word ptr -1AAh
var_1A8= word ptr -1A8h
var_1A6= word ptr -1A6h
var_1A4= word ptr -1A4h
var_1A2= word ptr -1A2h
var_1A0= word ptr -1A0h
var_19E= word ptr -19Eh
var_19C= word ptr -19Ch
var_19A= word ptr -19Ah
var_198= word ptr -198h
var_196= word ptr -196h
var_194= word ptr -194h
var_192= word ptr -192h
var_190= word ptr -190h
var_18E= word ptr -18Eh
var_18C= word ptr -18Ch
var_18A= word ptr -18Ah
var_188= word ptr -188h
var_186= word ptr -186h
var_184= word ptr -184h
var_182= word ptr -182h
var_180= word ptr -180h
var_17E= word ptr -17Eh
var_17C= word ptr -17Ch
var_17A= word ptr -17Ah
var_178= word ptr -178h
var_176= word ptr -176h
var_174= word ptr -174h
var_172= word ptr -172h
var_170= word ptr -170h
var_16E= word ptr -16Eh
var_16C= word ptr -16Ch
var_16A= word ptr -16Ah
var_168= word ptr -168h
var_166= word ptr -166h
var_164= word ptr -164h
var_162= word ptr -162h
var_160= word ptr -160h
var_15E= word ptr -15Eh
var_15C= word ptr -15Ch
var_15A= word ptr -15Ah
var_158= word ptr -158h
var_156= word ptr -156h
var_154= word ptr -154h
var_152= word ptr -152h
var_150= word ptr -150h
var_14E= word ptr -14Eh
var_14C= word ptr -14Ch
var_14A= word ptr -14Ah
var_148= word ptr -148h
var_146= word ptr -146h
var_144= word ptr -144h
var_142= word ptr -142h
var_140= word ptr -140h
var_13E= word ptr -13Eh
var_13C= word ptr -13Ch
var_13A= word ptr -13Ah
var_138= word ptr -138h
var_136= word ptr -136h
var_134= word ptr -134h
var_132= word ptr -132h
var_130= word ptr -130h
var_12E= word ptr -12Eh
var_12C= word ptr -12Ch
var_12A= word ptr -12Ah
var_128= word ptr -128h
var_126= word ptr -126h
var_124= word ptr -124h
var_122= word ptr -122h
var_120= word ptr -120h
var_11E= word ptr -11Eh
var_11C= word ptr -11Ch
var_11A= word ptr -11Ah
var_118= word ptr -118h
var_116= word ptr -116h
var_114= word ptr -114h
var_112= word ptr -112h
var_110= word ptr -110h
var_10E= word ptr -10Eh
var_10C= word ptr -10Ch
var_10A= word ptr -10Ah
var_108= word ptr -108h
var_106= word ptr -106h
var_104= word ptr -104h
var_102= word ptr -102h
var_100= word ptr -100h
var_FE= word ptr -0FEh
var_FC= word ptr -0FCh
var_FA= word ptr -0FAh
var_F8= word ptr -0F8h
var_F6= word ptr -0F6h
var_F4= word ptr -0F4h
var_F2= word ptr -0F2h
var_F0= word ptr -0F0h
var_EE= word ptr -0EEh
var_EC= word ptr -0ECh
var_EA= word ptr -0EAh
var_E8= word ptr -0E8h
var_E6= word ptr -0E6h
var_E4= word ptr -0E4h
var_E2= word ptr -0E2h
var_E0= word ptr -0E0h
var_DE= word ptr -0DEh
var_DC= word ptr -0DCh
var_DA= word ptr -0DAh
var_D8= word ptr -0D8h
var_D6= word ptr -0D6h
var_D4= word ptr -0D4h
var_D2= word ptr -0D2h
var_D0= word ptr -0D0h
var_CE= word ptr -0CEh
var_CC= word ptr -0CCh
var_CA= word ptr -0CAh
var_C8= word ptr -0C8h
var_C6= word ptr -0C6h
var_C4= word ptr -0C4h
var_C2= word ptr -0C2h
var_C0= word ptr -0C0h
var_BE= word ptr -0BEh
var_BC= word ptr -0BCh
var_BA= word ptr -0BAh
var_B8= word ptr -0B8h
var_B6= word ptr -0B6h
var_B4= word ptr -0B4h
var_B2= word ptr -0B2h
var_B0= word ptr -0B0h
var_AE= word ptr -0AEh
var_AC= word ptr -0ACh
var_AA= word ptr -0AAh
var_A8= word ptr -0A8h
var_A6= word ptr -0A6h
var_A4= word ptr -0A4h
var_A2= word ptr -0A2h
var_A0= word ptr -0A0h
var_9E= word ptr -9Eh
var_9C= word ptr -9Ch
var_9A= word ptr -9Ah
var_98= word ptr -98h
var_96= word ptr -96h
var_94= word ptr -94h
var_92= word ptr -92h
var_90= word ptr -90h
var_8E= word ptr -8Eh
var_8C= word ptr -8Ch
var_8A= word ptr -8Ah
var_88= word ptr -88h
var_86= word ptr -86h
var_84= word ptr -84h
var_82= word ptr -82h
var_80= word ptr -80h
var_7E= word ptr -7Eh
var_7C= word ptr -7Ch
var_7A= word ptr -7Ah
var_78= word ptr -78h
var_76= word ptr -76h
var_74= word ptr -74h
var_72= word ptr -72h
var_70= word ptr -70h
var_6E= word ptr -6Eh
var_6C= word ptr -6Ch
var_6A= word ptr -6Ah
var_68= word ptr -68h
var_66= word ptr -66h
var_64= word ptr -64h
var_62= word ptr -62h
var_60= word ptr -60h
var_5E= word ptr -5Eh
var_5C= word ptr -5Ch
var_5A= word ptr -5Ah
var_58= word ptr -58h
var_56= word ptr -56h
var_54= word ptr -54h
var_52= word ptr -52h
var_50= word ptr -50h
var_4E= word ptr -4Eh
var_4C= word ptr -4Ch
var_4A= word ptr -4Ah
var_48= word ptr -48h
var_46= word ptr -46h
var_44= word ptr -44h
var_42= word ptr -42h
var_40= word ptr -40h
var_3E= word ptr -3Eh
var_3C= word ptr -3Ch
var_3A= word ptr -3Ah
var_38= word ptr -38h
var_36= word ptr -36h
var_34= word ptr -34h
var_32= word ptr -32h
var_30= word ptr -30h
var_2E= word ptr -2Eh
var_2C= word ptr -2Ch
var_2A= word ptr -2Ah
var_28= word ptr -28h
var_26= word ptr -26h
var_24= word ptr -24h
var_22= word ptr -22h
var_20= word ptr -20h
var_1E= word ptr -1Eh
var_1C= word ptr -1Ch
var_1A= word ptr -1Ah
var_18= word ptr -18h
var_16= word ptr -16h
var_14= word ptr -14h
var_12= word ptr -12h
var_10= word ptr -10h
var_E= word ptr -0Eh
var_C= word ptr -0Ch
var_A= word ptr -0Ah
var_8= word ptr -8
var_6= word ptr -6
var_4= word ptr -4
var_2= word ptr -2
arg_D2= byte ptr  0D8h

push    bp
mov     bp, sp
sub     sp, 272h
push    di
push    si
mov     [bp+var_144], 444h
mov     [bp+var_142], 1472h
mov     [bp+var_140], 2694h
mov     [bp+var_13E], 38B6h
mov     [bp+var_13C], 4AD8h
mov     [bp+var_13A], 5CFAh
mov     [bp+var_138], 66D6h
mov     [bp+var_136], 78F8h
mov     [bp+var_134], 8CAAh
mov     [bp+var_132], 9ECCh
mov     [bp+var_130], 0A88Bh
mov     [bp+var_12E], 0BAADh
mov     [bp+var_12C], 0CCCFh
mov     [bp+var_12A], 0D666h
mov     [bp+var_128], 0ECCCh
mov     [bp+var_124], 555h
mov     [bp+var_122], 1583h
mov     [bp+var_120], 27A5h
mov     [bp+var_11E], 39C7h
mov     [bp+var_11C], 4BE9h
mov     [bp+var_11A], 5DFBh
mov     [bp+var_118], 67E7h
mov     [bp+var_116], 79F9h
mov     [bp+var_114], 8DBBh
mov     [bp+var_112], 9FDDh
mov     [bp+var_110], 0A99Ch
mov     [bp+var_10E], 0BBBEh
mov     [bp+var_10C], 0CDDFh
mov     [bp+var_10A], 0D777h
mov     [bp+var_108], 0EDDDh
mov     [bp+var_104], 666h
mov     [bp+var_102], 1694h
mov     [bp+var_100], 28B6h
mov     [bp+var_FE], 3AD8h
mov     [bp+var_FC], 4CFAh
mov     [bp+var_FA], 5EFCh
mov     [bp+var_F8], 68F8h
mov     [bp+var_F6], 7AFAh
mov     [bp+var_F4], 8ECCh
mov     [bp+var_F2], 9FEEh
mov     [bp+var_F0], 0AAADh
mov     [bp+var_EE], 0BCCFh
mov     [bp+var_EC], 0CEEFh
mov     [bp+var_EA], 0D888h
mov     [bp+var_E8], 0EEEEh
mov     [bp+var_E4], 777h
mov     [bp+var_E2], 17A5h
mov     [bp+var_E0], 29C7h
mov     [bp+var_DE], 3BE9h
mov     [bp+var_DC], 4DFBh
mov     [bp+var_DA], 5FFDh
mov     [bp+var_D8], 69F9h
mov     [bp+var_D6], 7BFBh
mov     [bp+var_D4], 8EDDh
mov     [bp+var_D0], 0ABBEh
mov     [bp+var_CE], 0BDDFh
mov     [bp+var_CA], 0D999h
mov     [bp+var_C4], 888h
mov     [bp+var_C2], 18B6h
mov     [bp+var_C0], 2AD8h
mov     [bp+var_BE], 3CFAh
mov     [bp+var_BC], 4EFCh
mov     [bp+var_BA], 5FFEh
mov     [bp+var_B8], 6AFAh
mov     [bp+var_B6], 7CFCh
mov     [bp+var_B4], 8FEEh
mov     [bp+var_B0], 0ACCFh
mov     [bp+var_AE], 0BEEFh
mov     [bp+var_AA], 0DAAAh
mov     [bp+var_A4], 999h
mov     [bp+var_A2], 19C7h
mov     [bp+var_A0], 2BE9h
mov     [bp+var_9E], 3DFBh
mov     [bp+var_9C], 4FFDh
mov     [bp+var_9A], 5FFFh
mov     [bp+var_98], 6BFBh
mov     [bp+var_96], 7DFDh
mov     [bp+var_94], 8FFFh
mov     ax, 9FFFh
mov     [bp+var_D2], ax
mov     [bp+var_B2], ax
mov     [bp+var_92], ax
mov     [bp+var_90], 0ADDFh
mov     [bp+var_8E], 0BFFFh
mov     ax, 0CFFFh
mov     [bp+var_CC], ax
mov     [bp+var_AC], ax
mov     [bp+var_8C], ax
mov     [bp+var_8A], 0DBBBh
mov     ax, 0EFFFh
mov     [bp+var_C8], ax
mov     [bp+var_A8], ax
mov     [bp+var_88], ax
mov     ax, 0FFFFh
mov     [bp+var_126], ax
mov     [bp+var_106], ax
mov     [bp+var_E6], ax
mov     [bp+var_C6], ax
mov     [bp+var_A6], ax
mov     [bp+var_86], ax
mov     [bp+var_84], 0AAAh
mov     [bp+var_82], 1AD8h
mov     [bp+var_80], 2CFAh
mov     [bp+var_7E], 3EFCh
mov     [bp+var_7C], 4FFEh
mov     [bp+var_78], 6CFCh
mov     [bp+var_76], 7EFEh
mov     [bp+var_70], 0AEEFh
mov     [bp+var_6A], 0DCCCh
mov     [bp+var_62], 1BE9h
mov     [bp+var_60], 2DFBh
mov     [bp+var_5E], 3FFDh
mov     [bp+var_58], 6DFDh
mov     [bp+var_4A], 0DDDDh
mov     [bp+var_44], 0CCCh
mov     [bp+var_42], 1CFAh
mov     [bp+var_40], 2EFCh
mov     [bp+var_3E], 3FFEh
mov     [bp+var_38], 6EFEh
mov     [bp+var_2A], 0DEEEh
mov     ax, 0FFFh
mov     [bp+var_24], ax
mov     [bp+var_248], ax
mov     ax, 1FFFh
mov     [bp+var_22], ax
mov     [bp+var_246], ax
mov     ax, 2FFFh
mov     [bp+var_20], ax
mov     [bp+var_244], ax
mov     ax, 3FFFh
mov     [bp+var_1E], ax
mov     [bp+var_242], ax
mov     ax, 4FFFh
mov     [bp+var_5C], ax
mov     [bp+var_3C], ax
mov     [bp+var_1C], ax
mov     [bp+var_240], ax
mov     ax, 5FFFh
mov     [bp+var_7A], ax
mov     [bp+var_5A], ax
mov     [bp+var_3A], ax
mov     [bp+var_1A], ax
mov     [bp+var_23E], ax
mov     ax, 6FFFh
mov     [bp+var_18], ax
mov     [bp+var_23C], ax
mov     ax, 0BBBh
mov     [bp+var_64], ax
mov     [bp+var_228], ax
mov     [bp+var_226], 1BBBh
mov     [bp+var_224], 2BBBh
mov     [bp+var_222], 3BBBh
mov     [bp+var_220], 4BBBh
mov     [bp+var_21E], 5BBCh
mov     ax, 8FFFh
mov     [bp+var_74], ax
mov     [bp+var_54], ax
mov     [bp+var_34], ax
mov     [bp+var_14], ax
mov     [bp+var_238], ax
mov     [bp+var_218], ax
mov     ax, 9FFFh
mov     [bp+var_72], ax
mov     [bp+var_52], ax
mov     [bp+var_32], ax
mov     [bp+var_12], ax
mov     [bp+var_236], ax
mov     [bp+var_216], ax
mov     ax, 0AFFFh
mov     [bp+var_50], ax
mov     [bp+var_30], ax
mov     [bp+var_10], ax
mov     [bp+var_234], ax
mov     [bp+var_214], ax
mov     ax, 0BFFFh
mov     [bp+var_6E], ax
mov     [bp+var_4E], ax
mov     [bp+var_2E], ax
mov     [bp+var_E], ax
mov     [bp+var_232], ax
mov     [bp+var_212], ax
mov     ax, 0CFFFh
mov     [bp+var_6C], ax
mov     [bp+var_4C], ax
mov     [bp+var_2C], ax
mov     [bp+var_C], ax
mov     [bp+var_230], ax
mov     [bp+var_210], ax
mov     ax, 0DFFFh
mov     [bp+var_A], ax
mov     [bp+var_22E], ax
mov     [bp+var_20E], ax
mov     ax, 0EFFFh
mov     [bp+var_68], ax
mov     [bp+var_48], ax
mov     [bp+var_28], ax
mov     [bp+var_8], ax
mov     [bp+var_22C], ax
mov     [bp+var_20C], ax
mov     ax, 0FFFFh
mov     [bp+var_66], ax
mov     [bp+var_46], ax
mov     [bp+var_26], ax
mov     [bp+var_6], ax
mov     [bp+var_22A], ax
mov     [bp+var_20A], ax
mov     [bp+var_208], 999h
mov     [bp+var_206], 1999h
mov     [bp+var_204], 2999h
mov     [bp+var_202], 3999h
mov     [bp+var_200], 499Ah
mov     [bp+var_1FE], 599Ch
mov     ax, 6DDDh
mov     [bp+var_21C], ax
mov     [bp+var_1FC], ax
mov     ax, 7FFFh
mov     [bp+var_56], ax
mov     [bp+var_36], ax
mov     [bp+var_16], ax
mov     [bp+var_23A], ax
mov     [bp+var_21A], ax
mov     [bp+var_1FA], ax
mov     [bp+var_1E8], 777h
mov     [bp+var_1E6], 1777h
mov     [bp+var_1E4], 2777h
mov     [bp+var_1E2], 3778h
mov     [bp+var_1E0], 477Ah
mov     [bp+var_1C8], 555h
mov     [bp+var_1C6], 1555h
mov     [bp+var_1C4], 2556h
mov     [bp+var_1C2], 3558h
mov     [bp+var_1A8], 333h
mov     [bp+var_1A6], 1334h
mov     [bp+var_1A4], 2336h
mov     [bp+var_188], 112h
mov     [bp+var_186], 1114h
mov     ax, 6DDDh
mov     [bp+var_1DC], ax
mov     [bp+var_1BC], ax
mov     [bp+var_19C], ax
mov     [bp+var_17C], ax
mov     [bp+var_168], 2
mov     [bp+var_166], 1004h
mov     ax, 2226h
mov     [bp+var_184], ax
mov     [bp+var_164], ax
mov     ax, 3448h
mov     [bp+var_1A2], ax
mov     [bp+var_182], ax
mov     [bp+var_162], ax
mov     ax, 466Ah
mov     [bp+var_1C0], ax
mov     [bp+var_1A0], ax
mov     [bp+var_180], ax
mov     [bp+var_160], ax
mov     ax, 588Ch
mov     [bp+var_1DE], ax
mov     [bp+var_1BE], ax
mov     [bp+var_19E], ax
mov     [bp+var_17E], ax
mov     [bp+var_15E], ax
mov     ax, 0DFFFh
mov     [bp+var_1EE], ax
mov     [bp+var_1CE], ax
mov     [bp+var_1AE], ax
mov     [bp+var_18E], ax
mov     [bp+var_16E], ax
mov     [bp+var_14E], ax
mov     ax, 0EFFFh
mov     [bp+var_1EC], ax
mov     [bp+var_1CC], ax
mov     [bp+var_1AC], ax
mov     [bp+var_18C], ax
mov     [bp+var_16C], ax
mov     [bp+var_14C], ax
mov     ax, 0FFFFh
mov     [bp+var_1EA], ax
mov     [bp+var_1CA], ax
mov     [bp+var_1AA], ax
mov     [bp+var_18A], ax
mov     [bp+var_16A], ax
mov     [bp+var_14A], ax
mov     [bp+var_26E], 0
mov     [bp+var_26C], 1FFFh
mov     [bp+var_26A], 2FFFh
mov     [bp+var_268], 3FFFh
mov     [bp+var_266], 4FFFh
mov     [bp+var_264], 5FFFh
mov     ax, 6FFFh
mov     [bp+var_15C], ax
mov     [bp+var_262], ax
mov     ax, 7FFFh
mov     [bp+var_1DA], ax
mov     [bp+var_1BA], ax
mov     [bp+var_19A], ax
mov     [bp+var_17A], ax
mov     [bp+var_15A], ax
mov     [bp+var_260], ax
mov     ax, 8FFFh
mov     [bp+var_1F8], ax
mov     [bp+var_1D8], ax
mov     [bp+var_1B8], ax
mov     [bp+var_198], ax
mov     [bp+var_178], ax
mov     [bp+var_158], ax
mov     [bp+var_25E], ax
mov     ax, 9FFFh
mov     [bp+var_1F6], ax
mov     [bp+var_1D6], ax
mov     [bp+var_1B6], ax
mov     [bp+var_196], ax
mov     [bp+var_176], ax
mov     [bp+var_156], ax
mov     [bp+var_25C], ax
mov     ax, 0AFFFh
mov     [bp+var_1F4], ax
mov     [bp+var_1D4], ax
mov     [bp+var_1B4], ax
mov     [bp+var_194], ax
mov     [bp+var_174], ax
mov     [bp+var_154], ax
mov     [bp+var_25A], ax
mov     ax, 0BFFFh
mov     [bp+var_1F2], ax
mov     [bp+var_1D2], ax
mov     [bp+var_1B2], ax
mov     [bp+var_192], ax
mov     [bp+var_172], ax
mov     [bp+var_152], ax
mov     [bp+var_258], ax
mov     ax, 0CFFFh
mov     [bp+var_1F0], ax
mov     [bp+var_1D0], ax
mov     [bp+var_1B0], ax
mov     [bp+var_190], ax
mov     [bp+var_170], ax
mov     [bp+var_150], ax
mov     [bp+var_256], ax
mov     [bp+var_254], 0DFFFh
mov     [bp+var_252], 0EFFFh
mov     [bp+var_250], 0FFFFh
call    sub_21139
mov     [bp+var_24E], 0

loc_1CAEF:
mov     ax, 792h
push    ax
mov     cx, 160h
push    cx
mov     dx, 16h
push    dx
sub     bx, bx
push    bx
call    sub_2016C
add     sp, 8
mov     ax, [bp+var_24E]
add     ax, 0A1h
push    ax
mov     es, seg_278A8
push    es:word_22298
push    es:word_22296
mov     ax, 32h ; '2'
push    ax
mov     ax, 3
push    ax
push    cs
call    near ptr sub_194BA
add     sp, 0Ah
call    sub_20CDA
sub     ax, ax
push    ax
mov     ax, 160h
push    ax
mov     ax, 16h
push    ax
mov     ax, 792h
push    ax
call    sub_200C6
add     sp, 8
inc     [bp+var_24E]
cmp     [bp+var_24E], 2
jb      short loc_1CAEF
mov     [bp+var_146], 5
mov     [bp+var_24A], 4
mov     [bp+var_24E], 0

loc_1CB64:
mov     ax, offset byte_2230C
mov     es, seg_278AA
mul     es:word_2232E
mov     bx, ax
mov     ax, [bp+var_24A]
mov     cx, ax
shl     ax, 1
shl     ax, 1
add     ax, cx
shl     ax, 1
add     ax, cx
add     bx, ax
add     bx, [bp+var_146]
shl     bx, 1
mov     es, seg_278AC
assume es:dseg
mov     word ptr es:[bx+1AEEh], 15h
push    [bp+var_24A]
push    [bp+var_146]
mov     si, ax
push    cs
call    near ptr sub_1AE6E
add     sp, 4
push    [bp+var_24A]
push    [bp+var_146]
push    cs
call    near ptr sub_1AE6E
add     sp, 4
mov     ax, offset byte_2230C
mov     es, seg_278AA
assume es:seg008
mul     es:word_2232E
add     si, ax
add     si, [bp+var_146]
shl     si, 1
mov     es, seg_278AC
assume es:dseg
mov     word ptr es:[si+1AEEh], 5Bh ; '['
push    [bp+var_24A]
push    [bp+var_146]
push    cs
call    near ptr sub_1AE6E
add     sp, 4
inc     [bp+var_24E]
cmp     [bp+var_24E], 32h ; '2'
jnb     short loc_1CBF1
jmp     loc_1CB64

loc_1CBF1:
mov     ax, 32h ; '2'
push    ax
call    sub_1F9E2
add     sp, 2
mov     [bp+var_24E], 0

loc_1CC03:
mov     ax, 792h
push    ax
mov     cx, 160h
push    cx
mov     dx, 16h
push    dx
sub     bx, bx
push    bx
call    sub_2016C
add     sp, 8
mov     ax, [bp+var_24E]
add     ax, 0A3h
push    ax
mov     es, seg_278A8
assume es:seg008
push    es:word_22298
push    es:word_22296
mov     ax, 32h ; '2'
push    ax
mov     ax, 8
push    ax
push    cs
call    near ptr sub_194BA
add     sp, 0Ah
call    sub_20CDA
sub     ax, ax
push    ax
mov     ax, 160h
push    ax
mov     ax, 16h
push    ax
mov     ax, 792h
push    ax
call    sub_200C6
add     sp, 8
inc     [bp+var_24E]
cmp     [bp+var_24E], 8
jb      short loc_1CC03
mov     ax, 32h ; '2'
push    ax
call    sub_1F9E2
add     sp, 2
sub     ax, ax
mov     [bp+var_148], ax
mov     [bp+var_24C], ax
mov     [bp+var_270], ax
mov     [bp+var_272], ax
push    ax
mov     ax, 190h
push    ax
mov     ax, 28h ; '('
mov     [bp+var_2], ax
push    ax
sub     ax, ax
push    ax
call    sub_1FFA4
add     sp, 8
mov     [bp+var_4], 0C8h
mov     ax, 0Bh
push    ax
call    sub_20FAB
add     sp, 2
mov     [bp+var_24E], 0

loc_1CCB2:
mov     ax, [bp+var_24E]
shl     ax, 1
push    ax
push    [bp+var_4]
mov     cx, 28h ; '('
sub     cx, [bp+var_24E]
push    cx
sub     dx, dx
push    dx
mov     si, ax
mov     di, cx
call    sub_1FE82
add     sp, 8
mov     ax, 0C8h
mov     [bp+var_24C], ax
mov     [bp+var_272], ax
mov     [bp+var_148], si
mov     [bp+var_270], 0
mov     [bp+var_2], di
mov     ax, 3E80h
push    ax
push    [bp+var_4]
push    di
lea     cx, [si+3E80h]
push    cx
call    sub_1FE82
add     sp, 8
call    sub_1F9C9
inc     [bp+var_24E]
cmp     [bp+var_24E], 0Ah
jb      short loc_1CCB2
mov     ax, 1Eh
push    ax
call    sub_1F9E2
add     sp, 2
mov     ax, 0Dh
push    ax
call    sub_20FAB
add     sp, 2
mov     [bp+var_24E], 0

loc_1CD2E:
mov     cl, 5
mov     si, [bp+var_24E]
shl     si, cl
lea     ax, [bp+si+var_144]
push    ss
push    ax
call    sub_1FA06
add     sp, 4
call    sub_1F9C9
inc     [bp+var_24E]
cmp     [bp+var_24E], 0Ah
jb      short loc_1CD2E
mov     ax, 1E0h
push    ax
call    sub_1F9E2
add     sp, 2
mov     es, seg_278B4
push    es:word_222A0
push    es:word_2229E   ; void *
mov     ax, 1A89h
push    ds
push    ax              ; char *
push    cs
call    near ptr sub_1C0F4
add     sp, 8
mov     es, seg_278B4
mov     ax, es:word_2229E
mov     dx, es:word_222A0
add     ax, 4A38h
push    dx
push    ax              ; void *
mov     ax, 1A95h
push    ds
push    ax              ; char *
push    cs
call    near ptr sub_1C0F4
add     sp, 8
mov     es, seg_278B4
mov     ax, es:word_2229E
mov     dx, es:word_222A0
sub     ax, 6B90h
push    dx
push    ax              ; void *
mov     ax, 1AA1h
push    ds
push    ax              ; char *
push    cs
call    near ptr sub_1C0F4
add     sp, 8
mov     es, seg_278B4
mov     ax, es:word_2229E
mov     dx, es:word_222A0
sub     ax, 4C50h
push    dx
push    ax              ; void *
mov     ax, 1AADh
push    ds
push    ax              ; char *
push    cs
call    near ptr sub_1C0F4
add     sp, 8
call    sub_1F637
mov     es, seg_278B4
push    es:word_222A0
push    es:word_2229E
mov     ax, 14h
push    ax
call    sub_1F696
add     sp, 6
mov     es, seg_278B4
mov     ax, es:word_2229E
mov     dx, es:word_222A0
add     ax, 4A38h
push    dx
push    ax
sub     ax, ax
push    ax
call    sub_1F6D8
add     sp, 6
mov     al, 0DDh
push    ax
sub     ax, ax
push    ax
mov     cx, 190h
push    cx
mov     dx, 28h ; '('
push    dx
push    ax
call    sub_20499
add     sp, 0Ah
mov     al, 1
push    ax
call    sub_20212
add     sp, 2
mov     ax, 14h
mov     [bp+var_2], ax
mov     [bp+var_270], ax
push    ax
mov     ax, 190h
mov     [bp+var_4], ax
push    ax
mov     ax, 14h
push    ax
sub     ax, ax
mov     [bp+var_148], ax
mov     [bp+var_24C], ax
mov     [bp+var_272], ax
push    ax
call    sub_1FFA4
add     sp, 8
sub     al, al
push    ax
call    sub_20212
add     sp, 2
mov     es, seg_278B4
push    es:word_222A0
push    es:word_2229E
sub     ax, ax
push    ax
call    sub_1F6D8
add     sp, 6
mov     [bp+var_24E], 0

loc_1CE89:
cmp     [bp+var_24E], 7
jnb     short loc_1CEA6
mov     cl, 5
mov     si, [bp+var_24E]
shl     si, cl
lea     ax, [bp+si+var_228]
push    ss
push    ax
call    sub_1FA06
add     sp, 4

loc_1CEA6:
cmp     [bp+var_24E], 12h
jbe     short loc_1CEC5
lea     ax, [bp+arg_D2]
mov     cl, 5
mov     dx, [bp+var_24E]
shl     dx, cl
sub     ax, dx
push    ss
push    ax
call    sub_1FA06
add     sp, 4

loc_1CEC5:
mov     al, 1
push    ax
call    sub_20212
add     sp, 2
mov     ax, [bp+var_24E]
mov     cx, ax
shl     ax, 1
shl     ax, 1
shl     ax, 1
shl     ax, 1
sub     ax, cx
mov     cx, ax
sub     ax, 190h
neg     ax
mov     [bp+var_4], ax
mov     [bp+var_148], 28h ; '('
mov     [bp+var_24C], cx
sub     dx, dx
mov     [bp+var_270], dx
mov     [bp+var_272], dx
push    dx
push    ax
mov     dx, 14h
mov     [bp+var_2], dx
push    dx
mov     bx, 50h ; 'P'
mov     dx, ax
mov     ax, cx
mov     si, dx
mul     bx
add     ax, 28h ; '('
push    ax
mov     di, cx
call    sub_1FFA4
add     sp, 8
cmp     [bp+var_24E], 0
jz      short loc_1CF4D
mov     [bp+var_4], di
mov     [bp+var_24C], 0
mov     [bp+var_272], si
mov     ax, si
mov     cx, 50h ; 'P'
mul     cx
push    ax
push    di
mov     ax, 14h
push    ax
mov     ax, 28h ; '('
push    ax
call    sub_1FFA4
add     sp, 8

loc_1CF4D:
sub     al, al
push    ax
call    sub_20212
add     sp, 2
mov     al, 0DDh
push    ax
sub     ax, ax
push    ax
mov     cx, 190h
push    cx
mov     dx, 14h
push    dx
mov     bx, 28h ; '('
push    bx
call    sub_20385
add     sp, 0Ah
sub     ax, ax
mov     [bp+var_24C], ax
mov     [bp+var_272], ax
mov     ax, 28h ; '('
mov     [bp+var_270], ax
push    ax
mov     ax, 190h
mov     [bp+var_4], ax
push    ax
mov     ax, 14h
mov     [bp+var_2], ax
mov     [bp+var_148], ax
push    ax
push    ax
call    sub_1FE82
add     sp, 8
mov     ax, 7
push    ax
call    sub_20FAB
add     sp, 2
mov     ax, 1Eh
push    ax
call    sub_1F9E2
add     sp, 2
inc     [bp+var_24E]
cmp     [bp+var_24E], 1Ah
jnb     short loc_1CFC5
jmp     loc_1CE89

loc_1CFC5:
mov     al, 0FFh
push    ax
mov     ax, 190h
push    ax
mov     ax, 50h ; 'P'
push    ax
sub     ax, ax
push    ax
call    sub_1FCD9
add     sp, 8
mov     es, seg_278B4
mov     ax, es:word_2229E
mov     dx, es:word_222A0
sub     ax, 6B90h
push    dx
push    ax
sub     ax, ax
push    ax
call    sub_1F737
add     sp, 6
sub     ax, ax
push    ax
call    sub_1FA1D
add     sp, 2
mov     [bp+var_2], 28h ; '('
mov     [bp+var_4], 1
sub     ax, ax
mov     [bp+var_148], ax
mov     [bp+var_270], ax
mov     [bp+var_272], ax
mov     [bp+var_24C], ax
jmp     short loc_1D05C
align 2

loc_1D022:
mov     ax, 50h ; 'P'
mul     [bp+var_272]
add     ax, [bp+var_270]
push    ax
push    [bp+var_4]
push    [bp+var_2]
mov     ax, 50h ; 'P'
mul     [bp+var_24C]
add     ax, [bp+var_148]
push    ax
call    sub_1FE82
add     sp, 8
mov     ax, 3
push    ax
call    sub_1F9E2
add     sp, 2
inc     [bp+var_24C]
inc     [bp+var_272]

loc_1D05C:
cmp     [bp+var_24C], 190h
jb      short loc_1D022
mov     ax, 3Ch ; '<'
push    ax
call    sub_1F9E2
add     sp, 2
lea     ax, [bp+var_26E]
push    ss
push    ax
call    sub_1FA51
add     sp, 4
mov     ax, 3Ch ; '<'
push    ax
call    sub_1F9E2
add     sp, 2
call    sub_1F637
mov     es, seg_278B4
mov     ax, es:word_2229E
mov     dx, es:word_222A0
sub     ax, 4C50h
push    dx
push    ax
sub     ax, ax
push    ax
call    sub_1F737
add     sp, 6
mov     ax, 908h
mov     cx, seg dseg
push    cx
push    ax
call    sub_1FA06
add     sp, 4
mov     [bp+var_2], 2
mov     ax, 20h ; ' '
mov     [bp+var_4], ax
mov     [bp+var_24C], ax
mov     [bp+var_272], ax
mov     ax, 4
mov     [bp+var_270], ax
mov     [bp+var_148], ax
jmp     short loc_1D111

loc_1D0DC:
mov     ax, 50h ; 'P'
mul     [bp+var_272]
add     ax, [bp+var_270]
push    ax
push    [bp+var_4]
push    [bp+var_2]
mov     ax, 50h ; 'P'
mul     [bp+var_24C]
add     ax, [bp+var_148]
push    ax
call    sub_1FE82
add     sp, 8
call    sub_1F9C9
add     [bp+var_148], 4
add     [bp+var_270], 4

loc_1D111:
cmp     [bp+var_148], 4Ch ; 'L'
jb      short loc_1D0DC
mov     ax, 48h ; 'H'
mov     [bp+var_148], ax
mov     [bp+var_270], ax
mov     ax, 20h ; ' '
mov     [bp+var_272], ax
mov     [bp+var_24C], ax
jmp     short loc_1D165

loc_1D130:
mov     ax, 50h ; 'P'
mul     [bp+var_272]
add     ax, [bp+var_270]
push    ax
push    [bp+var_4]
push    [bp+var_2]
mov     ax, 50h ; 'P'
mul     [bp+var_24C]
add     ax, [bp+var_148]
push    ax
call    sub_1FE82
add     sp, 8
call    sub_1F9C9
add     [bp+var_24C], 20h ; ' '
add     [bp+var_272], 20h ; ' '

loc_1D165:
cmp     [bp+var_24C], 180h
jb      short loc_1D130
mov     ax, 160h
mov     [bp+var_24C], ax
mov     [bp+var_272], ax
mov     ax, 48h ; 'H'
mov     [bp+var_270], ax
mov     [bp+var_148], ax
jmp     short loc_1D1BB
align 2

loc_1D186:
mov     ax, 50h ; 'P'
mul     [bp+var_272]
add     ax, [bp+var_270]
push    ax
push    [bp+var_4]
push    [bp+var_2]
mov     ax, 50h ; 'P'
mul     [bp+var_24C]
add     ax, [bp+var_148]
push    ax
call    sub_1FE82
add     sp, 8
call    sub_1F9C9
sub     [bp+var_148], 4
sub     [bp+var_270], 4

loc_1D1BB:
cmp     [bp+var_148], 0
jnz     short loc_1D186
mov     ax, 4
mov     [bp+var_148], ax
mov     [bp+var_270], ax
mov     ax, 160h
mov     [bp+var_272], ax
mov     [bp+var_24C], ax
jmp     short loc_1D20F

loc_1D1DA:
mov     ax, 50h ; 'P'
mul     [bp+var_272]
add     ax, [bp+var_270]
push    ax
push    [bp+var_4]
push    [bp+var_2]
mov     ax, 50h ; 'P'
mul     [bp+var_24C]
add     ax, [bp+var_148]
push    ax
call    sub_1FE82
add     sp, 8
call    sub_1F9C9
sub     [bp+var_24C], 20h ; ' '
sub     [bp+var_272], 20h ; ' '

loc_1D20F:
cmp     [bp+var_24C], 0
jnz     short loc_1D1DA
mov     ax, 3Ch ; '<'
push    ax
call    sub_1F9E2
add     sp, 2
mov     ax, 8
mov     [bp+var_148], ax
mov     [bp+var_270], ax
mov     ax, 1408h
push    ax
mov     cx, 100h
mov     [bp+var_4], cx
push    cx
mov     cx, 40h ; '@'
mov     [bp+var_2], cx
mov     [bp+var_24C], cx
mov     [bp+var_272], cx
push    cx
push    ax
call    sub_1FE82
add     sp, 8
mov     ax, 3Ch ; '<'
push    ax
call    sub_1F9E2
add     sp, 2
mov     ax, 2
push    ax
call    sub_20FAB
add     sp, 2
mov     ax, 258h
push    ax
call    sub_1F9E2
add     sp, 2
call    sub_20CDA
push    cs
call    near ptr sub_1C48C
sub_1C4D8 endp

pop     si
pop     di
mov     sp, bp
pop     bp
retf
align 2


; Attributes: bp-based frame

sub_1D284 proc far

var_34= word ptr -34h
var_32= dword ptr -32h
var_2E= word ptr -2Eh
var_2C= word ptr -2Ch
var_2A= word ptr -2Ah
var_28= word ptr -28h
var_26= word ptr -26h
var_24= word ptr -24h
var_22= word ptr -22h
var_20= word ptr -20h
var_1E= word ptr -1Eh
var_1C= word ptr -1Ch
var_1A= word ptr -1Ah
var_18= word ptr -18h
var_16= word ptr -16h
var_14= word ptr -14h
var_12= word ptr -12h
var_10= word ptr -10h
var_E= word ptr -0Eh
var_C= word ptr -0Ch
var_8= word ptr -8
var_6= word ptr -6
var_4= word ptr -4
var_2= word ptr -2

push    bp
mov     bp, sp
sub     sp, 34h
push    di
push    si
mov     ax, 1
mov     [bp+var_28], ax
mov     [bp+var_24], ax
mov     [bp+var_20], ax
mov     ax, 3
mov     [bp+var_18], ax
mov     [bp+var_14], ax
mov     [bp+var_10], ax
mov     ax, 0F8h
mov     bx, offset word_2232E
mov     es, seg_278AA
mov     word ptr [bp+var_32], bx
mov     word ptr [bp+var_32+2], es
mul     word ptr es:[bx]
mov     bx, ax
mov     es, seg_278AC
assume es:dseg
mov     ax, 4
mov     [bp+var_2A], ax
mov     [bp+var_12], ax
mov     [bp+var_E], ax
mov     es:[bx+1B7Ch], ax
mov     ax, 6
mov     [bp+var_22], ax
mov     [bp+var_1E], ax
mov     [bp+var_1A], ax
push    ax
mov     ax, 5
mov     [bp+var_2E], ax
mov     [bp+var_26], ax
mov     [bp+var_16], ax
push    ax
push    cs
call    near ptr sub_17B26
add     sp, 4
mov     [bp+var_2], 5
mov     ax, 2
mov     [bp+var_2C], ax
mov     [bp+var_1C], ax
mov     [bp+var_C], ax
mov     [bp+var_4], ax
mov     si, 32h ; '2'

loc_1D306:
mov     ax, 0F8h
les     bx, [bp+var_32]
assume es:nothing
mul     word ptr es:[bx]
mov     di, ax
mov     es, seg_278AC
assume es:dseg
mov     word ptr es:[di+1B24h], 6
mov     ax, 2
push    ax
mov     cx, 5
push    cx
push    cs
call    near ptr sub_1AE6E
add     sp, 4
mov     ax, 0F8h
les     bx, [bp+var_32]
assume es:nothing
mul     word ptr es:[bx]
mov     bx, ax
mov     es, seg_278AC
assume es:dseg
mov     word ptr es:[bx+1B24h], 5Bh ; '['
mov     ax, 2
push    ax
mov     ax, 5
push    ax
push    cs
call    near ptr sub_1AE6E
add     sp, 4
dec     si
jnz     short loc_1D306
mov     ax, 32h ; '2'
push    ax
call    sub_1F9E2
add     sp, 2
mov     ax, 792h
push    ax
mov     cx, 160h
push    cx
mov     dx, 16h
push    dx
sub     bx, bx
push    bx
call    sub_2016C
add     sp, 8
mov     ax, 9Bh
push    ax
mov     es, seg_278A8
assume es:seg008
push    es:word_22298
push    es:word_22296
mov     ax, 32h ; '2'
push    ax
mov     ax, 4
push    ax
push    cs
call    near ptr sub_194BA
add     sp, 0Ah
call    sub_20CDA
sub     ax, ax
push    ax
mov     ax, 160h
push    ax
mov     ax, 16h
push    ax
mov     ax, 792h
push    ax
call    sub_200C6
add     sp, 8
lea     si, [bp+var_28]

loc_1D3B6:
mov     cx, [si-2]
mov     di, [si]
mov     ax, di
mov     dx, di
shl     ax, 1
shl     ax, 1
add     ax, dx
shl     ax, 1
add     ax, dx
mov     [bp+var_34], ax
mov     [bp+var_6], 0Ah
mov     [bp+var_8], si
mov     [bp+var_4], di
mov     [bp+var_2], cx
mov     si, cx

loc_1D3DC:
mov     ax, 7Ch ; '|'
les     bx, [bp+var_32]
assume es:nothing
mul     word ptr es:[bx]
mov     bx, ax
add     bx, [bp+var_34]
add     bx, si
shl     bx, 1
mov     es, seg_278AC
assume es:dseg
mov     word ptr es:[bx+1AEEh], 6
push    di
push    si
push    cs
call    near ptr sub_1AE6E
add     sp, 4
mov     ax, 7Ch ; '|'
les     bx, [bp+var_32]
assume es:nothing
mul     word ptr es:[bx]
mov     bx, ax
add     bx, [bp+var_34]
add     bx, si
shl     bx, 1
mov     es, seg_278AC
assume es:dseg
mov     word ptr es:[bx+1AEEh], 5Dh ; ']'
push    di
push    si
push    cs
call    near ptr sub_1AE6E
add     sp, 4
dec     [bp+var_6]
jnz     short loc_1D3DC
mov     si, [bp+var_8]
mov     ax, 0Ah
push    ax
call    sub_1F9E2
add     sp, 2
add     si, 4
lea     ax, [bp+var_8]
cmp     si, ax
jnb     short loc_1D449
jmp     loc_1D3B6

loc_1D449:
mov     ax, 1Eh
push    ax
call    sub_1F9E2
add     sp, 2
pop     si
pop     di
mov     sp, bp
pop     bp
retf
sub_1D284 endp

align 2
push    bp
mov     bp, sp
sub     sp, 36h
push    di
push    si
mov     word ptr [bp-32h], 17h
mov     word ptr [bp-2Eh], 32h ; '2'
mov     word ptr [bp-2Ch], 5Fh ; '_'
mov     word ptr [bp-2Ah], 5Bh ; '['
mov     word ptr [bp-28h], 9Dh
mov     word ptr [bp-26h], 97h
mov     word ptr [bp-24h], 91h
mov     word ptr [bp-22h], 15h
mov     word ptr [bp-20h], 5Dh ; ']'
mov     word ptr [bp-1Eh], 89h
mov     word ptr [bp-1Ch], 1Bh
mov     word ptr [bp-1Ah], 85h
mov     word ptr [bp-18h], 51h ; 'Q'
mov     word ptr [bp-16h], 3Dh ; '='
mov     word ptr [bp-14h], 57h ; 'W'
mov     word ptr [bp-12h], 9Bh
mov     word ptr [bp-10h], 95h
mov     ax, 19h
mov     [bp-34h], ax
mov     [bp-0Eh], ax
mov     ax, 908h
mov     cx, seg dseg
push    cx
push    ax
call    sub_1FA06
add     sp, 4
mov     ax, 1AB7h
push    ds
push    ax
mov     al, 0FFh
push    ax
mov     cx, 0AAh
push    cx
mov     cx, 1Dh
push    cx
call    sub_20801
add     sp, 0Ah
mov     ax, 1ACEh
push    ds
push    ax
mov     al, 0FFh
push    ax
mov     ax, 0D2h
push    ax
mov     ax, 1Ch
push    ax
call    sub_20801
add     sp, 0Ah
call    sub_20CDA
mov     ax, 13h
mov     [bp-30h], ax
push    ax
call    sub_20BDA
add     sp, 2
mov     di, ax
call    sub_1F637
mov     bx, di
shl     bx, 1
lea     ax, [bp-34h]
add     bx, ax
mov     si, [bx]
mov     word ptr [bp-4], 4Ch ; 'L'
mov     word ptr [bp-2], 0
mov     word ptr [bp-6], 26h ; '&'
mov     word ptr [bp-8], 96h
mov     word ptr [bp-0Ah], 2
mov     word ptr [bp-0Ch], 20h ; ' '
mov     es, seg_278C4
mov     bx, si
shl     bx, 1
add     bx, si
shl     bx, 1
cmp     byte ptr es:[bx+282h], 8
jz      short loc_1D5B4
mov     ax, seg dseg
mov     es, ax
mov     bx, si
shl     bx, 1
add     bx, si
shl     bx, 1
mov     [bp-36h], bx
cmp     byte ptr es:[bx+282h], 5
jz      short loc_1D5B4
cmp     byte ptr es:[bx+282h], 0Ah
jz      short loc_1D58A
cmp     byte ptr es:[bx+282h], 7
jz      short loc_1D58A
cmp     byte ptr es:[bx+282h], 6
jnz     short loc_1D5FC

loc_1D58A:
mov     es, seg_278C4
mov     ax, es:[bx+286h]
mov     es, seg_278B2
assume es:seg008
add     ax, es:word_2229A
mov     dx, es:word_2229C
push    dx
push    ax
mov     ax, 4Ch ; 'L'
push    ax
call    sub_1F737
add     sp, 6
mov     al, 88h
jmp     short loc_1D5E3
align 2

loc_1D5B4:
mov     es, seg_278C4
assume es:dseg
mov     ax, si
shl     si, 1
add     si, ax
shl     si, 1
mov     ax, es:[si+286h]
mov     es, seg_278B2
assume es:seg008
add     ax, es:word_2229A
mov     dx, es:word_2229C
push    dx
push    ax
mov     ax, 4Ch ; 'L'
push    ax
call    sub_1F737
add     sp, 6
mov     al, 11h

loc_1D5E3:
push    ax
mov     ax, 4Ch ; 'L'
push    ax
mov     ax, 20h ; ' '
push    ax
mov     ax, 2
push    ax
mov     ax, 2F06h
push    ax
call    sub_20256
add     sp, 0Ah

loc_1D5FC:
mov     word ptr [bp-4], 14h
mov     word ptr [bp-2], 0C8h
mov     si, di
shl     si, 1
add     si, 0C9h
cmp     byte ptr [bp+6], 1
jnz     short loc_1D615
inc     si

loc_1D615:
push    si
mov     es, seg_278A8
push    es:word_22298
push    es:word_22296
mov     al, 0FFh
push    ax
mov     ax, 0C8h
push    ax
mov     ax, 14h
push    ax
call    sub_20835
add     sp, 0Ch
call    sub_20CDA
mov     ax, 8E8h
mov     cx, seg dseg
push    cx
push    ax
call    sub_1FA06
add     sp, 4
pop     si
pop     di
mov     sp, bp
pop     bp
retf
seg001 ends


; Segment type: Pure code
seg002 segment byte public 'CODE' use16
assume cs:seg002
;org 2
assume es:nothing, ss:nothing, ds:dseg, fs:nothing, gs:nothing
db 10h dup(0)
assume ss:seg010, ds:nothing
; [000000CB BYTES: COLLAPSED FUNCTION start. PRESS CTRL-NUMPAD+ TO EXPAND]

__cintDIV:
mov     ax, word ptr cs:__dataseg
mov     ds, ax
mov     ax, 3
mov     ss:off_2708A, 1D7h
; [00000024 BYTES: COLLAPSED CHUNK OF FUNCTION __fptrap. PRESS CTRL-NUMPAD+ TO EXPAND]
db 0
; [000000C5 BYTES: COLLAPSED FUNCTION __cinit. PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000007 BYTES: COLLAPSED FUNCTION _exit. PRESS CTRL-NUMPAD+ TO EXPAND]
; [0000007C BYTES: COLLAPSED FUNCTION __exit. PRESS CTRL-NUMPAD+ TO EXPAND]
; [0000002D BYTES: COLLAPSED FUNCTION __ctermsub. PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000013 BYTES: COLLAPSED FUNCTION sub_1D8D7. PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000022 BYTES: COLLAPSED FUNCTION __FF_MSGBANNER. PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION __fptrap. PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000024 BYTES: COLLAPSED FUNCTION __aFchkstk. PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000024 BYTES: COLLAPSED FUNCTION __nullcheck. PRESS CTRL-NUMPAD+ TO EXPAND]



sub_1D95A proc near
pop     word ptr dword_27106
pop     word ptr dword_27106+2
mov     ah, 30h
int     21h             ; DOS - GET DOS VERSION
                        ; Return: AL = major version number (00h for DOS 1.x)
mov     word_270CA, ax
mov     dx, 1
cmp     al, 2
jz      short loc_1D999
mov     es, word_270C8
assume es:nothing
mov     es, word ptr es:2Ch
mov     seg_270F1, es
xor     ax, ax
cwd
mov     cx, 8000h
xor     di, di

loc_1D985:
repne scasb
scasb
jnz     short loc_1D985
inc     di
inc     di
mov     word_270EF, di
mov     cx, 0FFFFh
repne scasb
not     cx
mov     dx, cx

loc_1D999:
mov     di, 1
mov     si, 81h
mov     ds, word_270C8

loc_1D9A3:
lodsb
cmp     al, 20h ; ' '
jz      short loc_1D9A3
cmp     al, 9
jz      short loc_1D9A3
cmp     al, 0Dh
jnz     short loc_1D9B3
jmp     loc_1DA3B

loc_1D9B3:
inc     di

loc_1D9B4:
dec     si

loc_1D9B5:
lodsb
cmp     al, 20h ; ' '
jz      short loc_1D9A3
cmp     al, 9
jz      short loc_1D9A3
cmp     al, 0Dh
jz      short loc_1DA3B
cmp     al, 22h ; '"'
jz      short loc_1D9FC
cmp     al, 5Ch ; '\'
jz      short loc_1D9DF
cmp     al, 80h ; '�'
jb      short loc_1D9DC
cmp     al, 0A0h
jb      short loc_1D9DA
cmp     al, 0E0h
jb      short loc_1D9DC
cmp     al, 0FCh
ja      short loc_1D9DC

loc_1D9DA:
inc     dx
inc     si

loc_1D9DC:
inc     dx
jmp     short loc_1D9B5

loc_1D9DF:
xor     cx, cx

loc_1D9E1:
inc     cx
lodsb
cmp     al, 5Ch ; '\'
jz      short loc_1D9E1
cmp     al, 22h ; '"'
jz      short loc_1D9EF
add     dx, cx
jmp     short loc_1D9B4

loc_1D9EF:
mov     ax, cx
shr     cx, 1
adc     dx, cx
test    al, 1
jnz     short loc_1D9B5
jmp     short loc_1D9FC

loc_1D9FB:
dec     si

loc_1D9FC:
lodsb
cmp     al, 0Dh
jz      short loc_1DA3B
cmp     al, 22h ; '"'
jz      short loc_1D9B5
cmp     al, 5Ch ; '\'
jz      short loc_1DA1E
cmp     al, 80h ; '�'
jb      short loc_1DA1B
cmp     al, 0A0h
jb      short loc_1DA19
cmp     al, 0E0h
jb      short loc_1DA1B
cmp     al, 0FCh
ja      short loc_1DA1B

loc_1DA19:
inc     dx
inc     si

loc_1DA1B:
inc     dx
jmp     short loc_1D9FC

loc_1DA1E:
xor     cx, cx

loc_1DA20:
inc     cx
lodsb
cmp     al, 5Ch ; '\'
jz      short loc_1DA20
cmp     al, 22h ; '"'
jz      short loc_1DA2E
add     dx, cx
jmp     short loc_1D9FB

loc_1DA2E:
mov     ax, cx
shr     cx, 1
adc     dx, cx
test    al, 1
jz      short loc_1D9FC
jmp     loc_1D9B5

loc_1DA3B:
push    ss
pop     ds
mov     argc, di
add     dx, di
inc     di
shl     di, 1
shl     di, 1
add     dx, di
inc     dx
and     dl, 0FEh
sub     sp, dx
mov     ax, sp
mov     argv, ax
mov     word_270E9, ss
mov     bx, ax
add     di, bx
push    ss
pop     es
assume es:dseg
mov     ss:[bx], di
mov     word ptr ss:[bx+2], ss
add     bx, 4
lds     si, dword ptr word_270EF

loc_1DA6D:
lodsb
stosb
or      al, al
jnz     short loc_1DA6D
mov     ds, ss:word_270C8
mov     si, 81h
jmp     short loc_1DA80

loc_1DA7D:
xor     ax, ax
stosb

loc_1DA80:
lodsb
cmp     al, 20h ; ' '
jz      short loc_1DA80
cmp     al, 9
jz      short loc_1DA80
cmp     al, 0Dh
jnz     short loc_1DA90
jmp     loc_1DB36

loc_1DA90:
or      al, al
jnz     short loc_1DA97
jmp     loc_1DB36

loc_1DA97:
mov     ss:[bx], di
mov     word ptr ss:[bx+2], ss
add     bx, 4

loc_1DAA1:
dec     si

loc_1DAA2:
lodsb
cmp     al, 20h ; ' '
jz      short loc_1DA7D
cmp     al, 9
jz      short loc_1DA7D
cmp     al, 0Dh
jnz     short loc_1DAB2
jmp     loc_1DB33

loc_1DAB2:
cmp     al, 22h ; '"'
jz      short loc_1DAEF
cmp     al, 5Ch ; '\'
jz      short loc_1DACF
cmp     al, 80h ; '�'
jb      short loc_1DACC
cmp     al, 0A0h
jb      short loc_1DACA
cmp     al, 0E0h
jb      short loc_1DACC
cmp     al, 0FCh
ja      short loc_1DACC

loc_1DACA:
stosb
lodsb

loc_1DACC:
stosb
jmp     short loc_1DAA2

loc_1DACF:
xor     cx, cx

loc_1DAD1:
inc     cx
lodsb
cmp     al, 5Ch ; '\'
jz      short loc_1DAD1
cmp     al, 22h ; '"'
jz      short loc_1DAE1
mov     al, 5Ch ; '\'
rep stosb
jmp     short loc_1DAA1

loc_1DAE1:
mov     al, 5Ch ; '\'
shr     cx, 1
rep stosb
jnb     short loc_1DAEF
mov     al, 22h ; '"'
stosb
jmp     short loc_1DAA2

loc_1DAEE:
dec     si

loc_1DAEF:
lodsb
cmp     al, 0Dh
jz      short loc_1DB33
cmp     al, 22h ; '"'
jz      short loc_1DAA2
cmp     al, 5Ch ; '\'
jz      short loc_1DB11
cmp     al, 80h ; '�'
jb      short loc_1DB0E
cmp     al, 0A0h
jb      short loc_1DB0C
cmp     al, 0E0h
jb      short loc_1DB0E
cmp     al, 0FCh
ja      short loc_1DB0E

loc_1DB0C:
stosb
lodsb

loc_1DB0E:
stosb
jmp     short loc_1DAEF

loc_1DB11:
xor     cx, cx

loc_1DB13:
inc     cx
lodsb
cmp     al, 5Ch ; '\'
jz      short loc_1DB13
cmp     al, 22h ; '"'
jz      short loc_1DB23
mov     al, 5Ch ; '\'
rep stosb
jmp     short loc_1DAEE

loc_1DB23:
mov     al, 5Ch ; '\'
shr     cx, 1
rep stosb
jb      short loc_1DB2E
jmp     loc_1DAA2

loc_1DB2E:
mov     al, 22h ; '"'
stosb
jmp     short loc_1DAEF

loc_1DB33:
xor     ax, ax
stosb

loc_1DB36:
push    ss
pop     ds
mov     word ptr [bx], 0
mov     word ptr [bx+2], 0
jmp     dword_27106
sub_1D95A endp ; sp-analysis failed

align 2
; [000000A0 BYTES: COLLAPSED FUNCTION __setenvp. PRESS CTRL-NUMPAD+ TO EXPAND]
; [0000002B BYTES: COLLAPSED FUNCTION __NMSG_TEXT. PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000036 BYTES: COLLAPSED FUNCTION __NMSG_WRITE. PRESS CTRL-NUMPAD+ TO EXPAND]
align 2
; [00000025 BYTES: COLLAPSED FUNCTION __myalloc. PRESS CTRL-NUMPAD+ TO EXPAND]
align 2
; [00000008 BYTES: COLLAPSED CHUNK OF FUNCTION _close. PRESS CTRL-NUMPAD+ TO EXPAND]

__dosreturn:
jnb     short loc_1DC70
push    ax
call    sub_1DC96
pop     ax
xor     ah, ah
mov     sp, bp
pop     bp
retf
; [00000002 BYTES: COLLAPSED CHUNK OF FUNCTION _lseek. PRESS CTRL-NUMPAD+ TO EXPAND]
; [0000000B BYTES: COLLAPSED CHUNK OF FUNCTION _close. PRESS CTRL-NUMPAD+ TO EXPAND]

__maperror:
xor     ah, ah
call    sub_1DC96
retf



sub_1DC96 proc near
mov     byte_270CD, al
or      ah, ah
jnz     short loc_1DCBF
cmp     byte ptr word_270CA, 3
jb      short loc_1DCB0
cmp     al, 22h ; '"'
jnb     short loc_1DCB4
cmp     al, 20h ; ' '
jb      short loc_1DCB0
mov     al, 5
jmp     short loc_1DCB6

loc_1DCB0:
cmp     al, 13h
jbe     short loc_1DCB6

loc_1DCB4:
mov     al, 13h

loc_1DCB6:
mov     bx, 4DCAh
xlat

loc_1DCBA:
cbw
mov     word_270C2, ax
retn

loc_1DCBF:
mov     al, ah
jmp     short loc_1DCBA
sub_1DC96 endp

align 2
; [000000C6 BYTES: COLLAPSED FUNCTION _fclose. PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000034 BYTES: COLLAPSED FUNCTION __fsopen. PRESS CTRL-NUMPAD+ TO EXPAND]
; [0000001B BYTES: COLLAPSED FUNCTION _fopen. PRESS CTRL-NUMPAD+ TO EXPAND]
align 2
; [000000A1 BYTES: COLLAPSED FUNCTION _fread. PRESS CTRL-NUMPAD+ TO EXPAND]
; [000000D0 BYTES: COLLAPSED FUNCTION sub_1DE7B. PRESS CTRL-NUMPAD+ TO EXPAND]
align 2
; [000000A1 BYTES: COLLAPSED FUNCTION _fwrite. PRESS CTRL-NUMPAD+ TO EXPAND]
; [000000F6 BYTES: COLLAPSED FUNCTION sub_1DFED. PRESS CTRL-NUMPAD+ TO EXPAND]
align 2
; [00000043 BYTES: COLLAPSED FUNCTION _printf. PRESS CTRL-NUMPAD+ TO EXPAND]
align 2
; [0000009C BYTES: COLLAPSED FUNCTION __filbuf. PRESS CTRL-NUMPAD+ TO EXPAND]
; [000000EB BYTES: COLLAPSED FUNCTION __flsbuf. PRESS CTRL-NUMPAD+ TO EXPAND]
align 2
; [00000037 BYTES: COLLAPSED FUNCTION __freebuf. PRESS CTRL-NUMPAD+ TO EXPAND]
align 2
; [0000004B BYTES: COLLAPSED FUNCTION __getbuf. PRESS CTRL-NUMPAD+ TO EXPAND]
align 2
; [000000F7 BYTES: COLLAPSED FUNCTION __openfile. PRESS CTRL-NUMPAD+ TO EXPAND]
align 2
; [00000081 BYTES: COLLAPSED FUNCTION __stbuf. PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000048 BYTES: COLLAPSED FUNCTION __ftbuf. PRESS CTRL-NUMPAD+ TO EXPAND]
align 2
; [0000007F BYTES: COLLAPSED FUNCTION _fflush. PRESS CTRL-NUMPAD+ TO EXPAND]
align 2
; [00000008 BYTES: COLLAPSED FUNCTION _flushall. PRESS CTRL-NUMPAD+ TO EXPAND]
; [0000004B BYTES: COLLAPSED FUNCTION flsall. PRESS CTRL-NUMPAD+ TO EXPAND]
align 2
off_1E5CA dw offset loc_1E632
dw offset loc_1E63D
dw offset loc_1E653
dw offset loc_1E687
dw offset loc_1E6B3
dw offset loc_1E6BB
dw offset loc_1E6E4
dw offset loc_1E716
; [00000414 BYTES: COLLAPSED FUNCTION __output. PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000009 BYTES: COLLAPSED FUNCTION sub_1E9EE. PRESS CTRL-NUMPAD+ TO EXPAND]
; [0000000E BYTES: COLLAPSED FUNCTION sub_1E9F7. PRESS CTRL-NUMPAD+ TO EXPAND]
; [0000001D BYTES: COLLAPSED FUNCTION sub_1EA05. PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000031 BYTES: COLLAPSED FUNCTION sub_1EA22. PRESS CTRL-NUMPAD+ TO EXPAND]
; [0000001E BYTES: COLLAPSED FUNCTION sub_1EA53. PRESS CTRL-NUMPAD+ TO EXPAND]
; [0000001C BYTES: COLLAPSED FUNCTION sub_1EA71. PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000031 BYTES: COLLAPSED FUNCTION sub_1EA8D. PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED CHUNK OF FUNCTION __output. PRESS CTRL-NUMPAD+ TO EXPAND]
; [0000004E BYTES: COLLAPSED FUNCTION __getstream. PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000020 BYTES: COLLAPSED FUNCTION _close. PRESS CTRL-NUMPAD+ TO EXPAND]
; [0000007A BYTES: COLLAPSED FUNCTION _lseek. PRESS CTRL-NUMPAD+ TO EXPAND]
; [000001BB BYTES: COLLAPSED FUNCTION _sopen. PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000011 BYTES: COLLAPSED FUNCTION __cXENIXtoDOSmode. PRESS CTRL-NUMPAD+ TO EXPAND]
; [000000FE BYTES: COLLAPSED FUNCTION _read. PRESS CTRL-NUMPAD+ TO EXPAND]
; [000000C0 BYTES: COLLAPSED FUNCTION __write. PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000066 BYTES: COLLAPSED FUNCTION sub_1EF36. PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000039 BYTES: COLLAPSED CHUNK OF FUNCTION __write. PRESS CTRL-NUMPAD+ TO EXPAND]
align 2



sub_1EFD6 proc far
pop     cx
pop     dx
mov     ax, word_27104
cmp     ax, sp
jnb     short loc_1EFE6
sub     ax, sp
neg     ax

loc_1EFE3:
push    dx
push    cx
retf

loc_1EFE6:
xor     ax, ax
jmp     short loc_1EFE3
sub_1EFD6 endp ; sp-analysis failed

; [00000005 BYTES: COLLAPSED FUNCTION j___fmalloc. PRESS CTRL-NUMPAD+ TO EXPAND]
align 2
; [00000005 BYTES: COLLAPSED FUNCTION j___ffree. PRESS CTRL-NUMPAD+ TO EXPAND]
align 2
; [00000013 BYTES: COLLAPSED FUNCTION __ffree. PRESS CTRL-NUMPAD+ TO EXPAND]
; [0000007D BYTES: COLLAPSED FUNCTION __fmalloc. PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000034 BYTES: COLLAPSED FUNCTION __initseg. PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000036 BYTES: COLLAPSED FUNCTION __linkseg. PRESS CTRL-NUMPAD+ TO EXPAND]
; [0000007C BYTES: COLLAPSED FUNCTION __searchseg. PRESS CTRL-NUMPAD+ TO EXPAND]

__growseg:
push    cx
push    di
test    byte ptr [bx+2], 1
jz      short loc_1F1DA
call    __findlast
mov     di, si
mov     ax, [si]
test    al, 1
jz      short loc_1F182
sub     cx, ax
dec     cx

loc_1F182:
inc     cx
inc     cx
mov     si, [bx+4]
or      si, si
jz      short loc_1F1DA
add     cx, si
jnb     short loc_1F198
xor     ax, ax
mov     dx, 0FFF0h
jcxz    short loc_1F1C9
jmp     short loc_1F1DA

loc_1F198:
mov     ax, seg dseg
mov     es, ax
assume es:dseg
mov     ax, es:word_27386
cmp     ax, 2000h
jz      short loc_1F1BC
mov     dx, 8000h

loc_1F1A9:
cmp     dx, ax
jb      short loc_1F1B3
shr     dx, 1
jnz     short loc_1F1A9
jmp     short loc_1F1D5

loc_1F1B3:
cmp     dx, 8
jb      short loc_1F1D5
shl     dx, 1
mov     ax, dx

loc_1F1BC:
dec     ax
mov     dx, ax
add     ax, cx
jnb     short loc_1F1C5
xor     ax, ax

loc_1F1C5:
not     dx
and     ax, dx

loc_1F1C9:
push    dx
call    __incseg
pop     dx
jnb     short loc_1F1DD
cmp     dx, 0FFF0h
jz      short loc_1F1DA

loc_1F1D5:
mov     ax, 10h
jmp     short loc_1F1BC

loc_1F1DA:
stc
jmp     short loc_1F1F8

loc_1F1DD:
mov     dx, ax
sub     dx, [bx+4]
mov     [bx+4], ax
mov     [bx+8], di
mov     si, [bx+0Ah]
dec     dx
mov     [si], dx
inc     dx
add     si, dx
mov     word ptr [si], 0FFFEh
mov     [bx+0Ah], si

loc_1F1F8:
pop     di
pop     cx
retn
; [00000051 BYTES: COLLAPSED FUNCTION __incseg. PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000020 BYTES: COLLAPSED FUNCTION __findlast. PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000044 BYTES: COLLAPSED FUNCTION __newseg. PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000046 BYTES: COLLAPSED FUNCTION _strcat. PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000036 BYTES: COLLAPSED FUNCTION _strcpy. PRESS CTRL-NUMPAD+ TO EXPAND]
; [0000001C BYTES: COLLAPSED FUNCTION _itoa. PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000045 BYTES: COLLAPSED FUNCTION _stricmp. PRESS CTRL-NUMPAD+ TO EXPAND]
align 2
mov     ax, 3
jmp     short loc_1F3C5
mov     ax, 2
jmp     short loc_1F3C5
mov     ax, 1
jmp     short loc_1F3C5
mov     ah, 3
mov     al, 1
jmp     short loc_1F3C5
mov     ah, 10h
mov     al, 2
jmp     short loc_1F3C5
mov     ah, 7
mov     al, 1
jmp     short loc_1F3C5
mov     ah, 57h ; 'W'
mov     al, 3
jmp     short loc_1F3C5
mov     ah, 17h
mov     al, 3
jmp     short loc_1F3C5



sub_1F3BB proc far
mov     ax, 4
jmp     short loc_1F3C5
mov     ax, 8
jmp     short $+2

loc_1F3C5:
push    bp
mov     bp, sp
mov     bx, [bp+6]
cmp     ah, 0
jz      short loc_1F3D4
and     ah, [bx+5067h]

loc_1F3D4:
and     al, [bx+5169h]
pop     bp
retf
sub_1F3BB endp

; [0000005E BYTES: COLLAPSED FUNCTION _memcpy. PRESS CTRL-NUMPAD+ TO EXPAND]

__cltoasub:
mov     cx, [bp+0Eh]
mov     ax, [bp+6]
mov     dx, [bp+8]
push    ds
lds     di, [bp+0Ah]
; [00000056 BYTES: COLLAPSED CHUNK OF FUNCTION _itoa. PRESS CTRL-NUMPAD+ TO EXPAND]
align 2
; [0000000F BYTES: COLLAPSED FUNCTION _remove. PRESS CTRL-NUMPAD+ TO EXPAND]
align 8
seg002 ends


; Segment type: Pure code
seg003 segment byte public 'CODE' use16
assume cs:seg003
assume es:nothing, ss:nothing, ds:dseg, fs:nothing, gs:nothing
dw seg seg008


; Attributes: bp-based frame

sub_1F4B2 proc far

arg_0= dword ptr  6

push    bp
mov     bp, sp
push    si
sub     si, si
jmp     short loc_1F4DC

loc_1F4BA:
mov     al, es:[bx]
sub     ah, ah
push    ax
call    sub_1F3BB
add     sp, 2
or      ax, ax
jz      short loc_1F4D8
inc     word ptr [bp+arg_0]
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 0
jz      short loc_1F4E5

loc_1F4D8:
inc     si
inc     word ptr [bp+arg_0]

loc_1F4DC:
les     bx, [bp+arg_0]
cmp     byte ptr es:[bx], 0
jnz     short loc_1F4BA

loc_1F4E5:
mov     ax, si
pop     si
mov     sp, bp
pop     bp
retf
sub_1F4B2 endp



; Attributes: bp-based frame

sub_1F4EC proc far

arg_0= word ptr  6

push    bp
mov     bp, sp
push    si
mov     si, [bp+arg_0]
cmp     si, 20h ; ' '
jb      short loc_1F503
cmp     si, 7Eh ; '~'
ja      short loc_1F503
mov     bx, si
mov     si, [bx+si+522Ah]

loc_1F503:
cmp     si, 0DCh
jnz     short loc_1F50E
mov     ax, 838Fh
jmp     short loc_1F525

loc_1F50E:
cmp     si, 0A1h
jb      short loc_1F523
cmp     si, 0DFh
ja      short loc_1F523
mov     ax, si
call    sub_1F562
mov     si, ax

loc_1F523:
mov     ax, si

loc_1F525:
pop     si
mov     sp, bp
pop     bp
retf
sub_1F4EC endp

push    bp
mov     bp, sp
push    di
push    si
mov     si, [bp+6]
sub     di, di
jmp     short loc_1F537

loc_1F536:
inc     di

loc_1F537:
cmp     di, 5Eh ; '^'
ja      short loc_1F54A
mov     bx, di
cmp     [bx+di+526Ah], si
jnz     short loc_1F536
lea     ax, [di+20h]
jmp     short loc_1F55C
align 2

loc_1F54A:
cmp     si, 8396h
ja      short loc_1F55A
mov     ax, si
call    sub_1F594
jmp     short loc_1F55C
align 2

loc_1F55A:
mov     ax, si

loc_1F55C:
pop     si
pop     di
mov     sp, bp
pop     bp
retf


; Attributes: bp-based frame

sub_1F562 proc far

var_2= word ptr -2

push    bp
mov     bp, sp
push    ax
push    si
sub     si, si
jmp     short loc_1F56D
align 2

loc_1F56C:
inc     si

loc_1F56D:
mov     bx, si
shl     bx, 1
shl     bx, 1
cmp     byte ptr [bx+5328h], 0
jz      short loc_1F58C
mov     al, [bx+5328h]
sub     ah, ah
cmp     ax, [bp+var_2]
jnz     short loc_1F56C
mov     ax, [bx+532Ah]
jmp     short loc_1F58F
align 2

loc_1F58C:
mov     ax, [bp+var_2]

loc_1F58F:
pop     si
mov     sp, bp
pop     bp
retf
sub_1F562 endp



; Attributes: bp-based frame

sub_1F594 proc far

var_1= byte ptr -1

push    bp
mov     bp, sp
push    ax
push    di
push    si
sub     si, si
jmp     short loc_1F5BF

loc_1F59E:
mov     bx, si
shl     bx, 1
shl     bx, 1
mov     al, [bx+532Bh]
xor     al, [bp+var_1]
test    al, 0FFh
jnz     short loc_1F5BE
or      di, di
jle     short loc_1F5BE
mov     al, [bx+5329h]
cbw
mov     cx, di
sub     cx, ax
js      short loc_1F5D5

loc_1F5BE:
inc     si

loc_1F5BF:
mov     bx, si
shl     bx, 1
shl     bx, 1
cmp     byte ptr [bx+5328h], 0
jz      short loc_1F5DE
mov     di, [bp-2]
sub     di, [bx+532Ah]
jnz     short loc_1F59E

loc_1F5D5:
mov     al, [bx+5328h]
sub     ah, ah
jmp     short loc_1F5E1
align 2

loc_1F5DE:
mov     ax, [bp-2]

loc_1F5E1:
pop     si
pop     di
mov     sp, bp
pop     bp
retf
sub_1F594 endp

seg003 ends


; Segment type: Regular
seg004 segment byte public 'UNK' use16
assume cs:seg004
;org 7
assume es:nothing, ss:nothing, ds:dseg, fs:nothing, gs:nothing
db  90h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
seg004 ends


; Segment type: Pure code
seg005 segment byte public 'CODE' use16
assume cs:seg005
assume es:nothing, ss:nothing, ds:dseg, fs:nothing, gs:nothing
byte_1F5F0 db 0
word_1F5F1 dw 0


; Attributes: bp-based frame

sub_1F5F3 proc far

arg_0= word ptr  6
arg_2= word ptr  8
arg_4= word ptr  0Ah
arg_6= word ptr  0Ch

push    bp
mov     bp, sp
mov     ax, [bp+arg_0]
mov     cs:word_1F67E, ax
mov     ax, [bp+arg_2]
mov     cs:word_1F680, ax
mov     ax, [bp+arg_4]
mov     cs:word_1F682, ax
mov     ax, [bp+arg_6]
mov     cs:word_1F684, ax
pop     bp
retf
sub_1F5F3 endp




sub_1F614 proc far
mov     ax, 4000h
int     18h             ; TRANSFER TO ROM BASIC
                        ; causes transfer to ROM-based BASIC (IBM-PC)
                        ; often reboots a compatible; often has no effect at all
mov     ax, 4200h
mov     cx, 0C000h
int     18h             ; TRANSFER TO ROM BASIC
                        ; causes transfer to ROM-based BASIC (IBM-PC)
                        ; often reboots a compatible; often has no effect at all
mov     ax, 1
out     6Ah, al
retf
sub_1F614 endp




sub_1F627 proc far
mov     ax, 4100h
int     18h             ; TRANSFER TO ROM BASIC
                        ; causes transfer to ROM-based BASIC (IBM-PC)
                        ; often reboots a compatible; often has no effect at all
retf
sub_1F627 endp




sub_1F62D proc far
mov     ah, 0Dh
int     18h             ; TRANSFER TO ROM BASIC
                        ; causes transfer to ROM-based BASIC (IBM-PC)
                        ; often reboots a compatible; often has no effect at all
retf
sub_1F62D endp




sub_1F632 proc far
mov     ah, 0Ch
int     18h             ; TRANSFER TO ROM BASIC
                        ; causes transfer to ROM-based BASIC (IBM-PC)
                        ; often reboots a compatible; often has no effect at all
retf
sub_1F632 endp




sub_1F637 proc far

; FUNCTION CHUNK AT 0078 SIZE 00000003 BYTES

push    es
push    di
cld
mov     ax, 0A800h
mov     es, ax
assume es:nothing
call    sub_1F65C
mov     ax, 0B000h
mov     es, ax
assume es:nothing
call    sub_1F65C
mov     ax, 0B800h
mov     es, ax
assume es:nothing
call    sub_1F65C
mov     ax, 0E000h
mov     es, ax
assume es:nothing
call    sub_1F65C
jmp     short loc_1F668
sub_1F637 endp




sub_1F65C proc near
mov     ax, 0
mov     cx, 4000h
mov     di, 0
rep stosw
retn
sub_1F65C endp

; START OF FUNCTION CHUNK FOR sub_1F637

loc_1F668:
pop     di
pop     es
assume es:nothing
retf
; END OF FUNCTION CHUNK FOR sub_1F637
word_1F66B dw 0
word_1F66D dw 0
word_1F66F dw 0
word_1F671 dw 50h
word_1F673 dw 190h
byte_1F675 db 58h
word_1F676 dw 0A800h
word_1F678 dw 0B000h
word_1F67A dw 0B800h
word_1F67C dw 0E000h
word_1F67E dw 0
word_1F680 dw 0
word_1F682 dw 0
word_1F684 dw 0
word_1F686 dw 0
db 6 dup(0)
word_1F68E dw 0
db 4 dup(0)
word_1F694 dw 0


; Attributes: bp-based frame

sub_1F696 proc far

arg_0= word ptr  6
arg_2= dword ptr  8

push    bp
mov     bp, sp
push    ds
push    es
push    si
push    di
push    bp
mov     ax, [bp+arg_0]
mov     cs:word_1F66B, ax
lds     ax, [bp+arg_2]
mov     cs:word_1F66F, ax
mov     ax, ds
mov     cs:word_1F66D, ax
mov     cs:word_1F676, 0A800h
mov     cs:word_1F678, 0B000h
mov     cs:word_1F67A, 0B800h
mov     cs:word_1F67C, 0E000h
call    sub_1F77D
pop     bp
pop     di
pop     si
pop     es
pop     ds
pop     bp
retf
sub_1F696 endp



; Attributes: bp-based frame

sub_1F6D8 proc far

arg_0= word ptr  6
arg_2= dword ptr  8

push    bp
mov     bp, sp
push    ds
push    es
push    si
push    di
push    bp
mov     al, 1
out     0A6h, al        ; Interrupt Controller #2, 8259A
mov     ax, [bp+arg_0]
mov     cs:word_1F66B, ax
lds     ax, [bp+arg_2]
mov     cs:word_1F66F, ax
mov     ax, ds
mov     cs:word_1F66D, ax
mov     cs:word_1F676, 0A800h
mov     cs:word_1F678, 0B000h
mov     cs:word_1F67A, 0B800h
mov     cs:word_1F67C, 0E000h
call    sub_1F77D
cmp     cs:word_1F5F1, 1
jz      short loc_1F725
mov     al, 0
out     0A6h, al        ; Interrupt Controller #2, 8259A
jmp     short loc_1F729

loc_1F725:
mov     al, 1
out     0A6h, al        ; Interrupt Controller #2, 8259A

loc_1F729:
pop     bp
pop     di
pop     si
pop     es
pop     ds
pop     bp
retf
sub_1F6D8 endp

pop     bp
pop     di
pop     si
pop     es
pop     ds
pop     bp
retf


; Attributes: bp-based frame

sub_1F737 proc far

arg_0= word ptr  6
arg_2= dword ptr  8

push    bp
mov     bp, sp
push    ds
push    es
push    si
push    di
push    bp
mov     ax, [bp+arg_0]
mov     cs:word_1F66B, ax
lds     ax, [bp+arg_2]
mov     cs:word_1F66F, ax
mov     ax, ds
mov     cs:word_1F66D, ax
mov     ax, cs:word_1F67E
mov     cs:word_1F676, ax
mov     ax, cs:word_1F680
mov     cs:word_1F678, ax
mov     ax, cs:word_1F682
mov     cs:word_1F67A, ax
mov     ax, cs:word_1F684
mov     cs:word_1F67C, ax
call    sub_1F77D
pop     bp
pop     di
pop     si
pop     es
pop     ds
pop     bp
retf
sub_1F737 endp




sub_1F77D proc near

; FUNCTION CHUNK AT 03B1 SIZE 00000010 BYTES

cld
mov     ax, cs:word_1F66D
mov     ds, ax
mov     si, cs:word_1F66F
lodsw
mov     cs:byte_1F675, ah
lodsw
cmp     ax, 50h ; 'P'
jbe     short loc_1F798
jmp     loc_1F9A1

loc_1F798:
mov     cs:word_1F671, ax
lodsw
cmp     ax, 190h
jbe     short loc_1F7A5
jmp     loc_1F9A1

loc_1F7A5:
mov     cs:word_1F673, ax
mov     ax, cs:word_1F676
call    sub_1F7DF
call    sub_1F7CF
mov     ax, cs:word_1F678
call    sub_1F7DF
call    sub_1F7CF
mov     ax, cs:word_1F67A
call    sub_1F7DF
call    sub_1F7CF
mov     ax, cs:word_1F67C
call    sub_1F7DF
retn
sub_1F77D endp




sub_1F7CF proc near
mov     ax, si
mov     bx, 10h
div     bx
mov     bx, ds
add     bx, ax
mov     ds, bx
mov     si, dx
retn
sub_1F7CF endp




sub_1F7DF proc near
mov     es, ax
mov     bp, cs:word_1F66B
mov     di, bp
mov     cx, cs:word_1F673
mov     dx, cs:word_1F671

loc_1F7F2:
lodsb
cmp     al, cs:byte_1F675
jnz     short loc_1F819
lodsb
cmp     al, 1
jb      short loc_1F82D
jz      short loc_1F836
cmp     al, 3
jb      short loc_1F83D
jz      short loc_1F846
cmp     al, 28h ; '('
jb      short loc_1F871
cmp     al, 41h ; 'A'
jnb     short loc_1F812
jmp     loc_1F8E4

loc_1F812:
cmp     al, 63h ; 'c'
jnz     short loc_1F819
jmp     loc_1F99C

loc_1F819:
stosb
add     di, 4Fh ; 'O'
loop    loc_1F7F2
dec     dx
jz      short locret_1F82C
mov     cx, cs:word_1F673
inc     bp
mov     di, bp
jmp     short loc_1F7F2

locret_1F82C:
retn

loc_1F82D:
lodsb
mov     bh, 0
mov     bl, al
mov     al, 0
jmp     short loc_1F84B

loc_1F836:
lodsw
mov     bx, ax
mov     al, 0
jmp     short loc_1F84B

loc_1F83D:
lodsb
mov     bh, 0
mov     bl, al
mov     al, 0FFh
jmp     short loc_1F84B

loc_1F846:
lodsw
mov     bx, ax
mov     al, 0FFh

loc_1F84B:
stosb
add     di, 4Fh ; 'O'
dec     bx
jz      short loc_1F861
loop    loc_1F84B
mov     cx, cs:word_1F673
inc     bp
mov     di, bp
dec     dx
jz      short locret_1F82C
jmp     short loc_1F84B

loc_1F861:
dec     cx
jnz     short loc_1F7F2
mov     cx, cs:word_1F673
inc     bp
mov     di, bp
dec     dx
jz      short locret_1F82C
jmp     short loc_1F7F2

loc_1F871:
shr     al, 1
mov     ah, 0
mov     cs:word_1F694, ax
jb      short loc_1F882
lodsb
mov     bh, 0
mov     bl, al
jmp     short loc_1F885

loc_1F882:
lodsw
mov     bx, ax

loc_1F885:
mov     cs:word_1F686, si

loc_1F88A:
mov     si, cs:word_1F686
mov     ax, cs:word_1F694

loc_1F893:
movsb
add     di, 4Fh ; 'O'
dec     bx
jz      short loc_1F8BB
dec     ax
jz      short loc_1F8AC
loop    loc_1F893
mov     cx, cs:word_1F673
inc     bp
mov     di, bp
dec     dx
jz      short loc_1F8D9
jmp     short loc_1F893

loc_1F8AC:
loop    loc_1F88A
mov     cx, cs:word_1F673
inc     bp
mov     di, bp
dec     dx
jz      short loc_1F8D9
jmp     short loc_1F88A

loc_1F8BB:
mov     si, cs:word_1F686
add     si, cs:word_1F694
dec     cx
jz      short loc_1F8CB
jmp     loc_1F7F2

loc_1F8CB:
mov     cx, cs:word_1F673
inc     bp
mov     di, bp
dec     dx
jz      short loc_1F8D9
jmp     loc_1F7F2

loc_1F8D9:
mov     si, cs:word_1F686
add     si, cs:word_1F694
retn

loc_1F8E4:
push    ds
mov     bx, cs:word_1F676
mov     cs:word_1F68E, bx
cmp     al, 33h ; '3'
jb      short loc_1F927
jz      short loc_1F92E
cmp     al, 35h ; '5'
jb      short loc_1F933
jz      short loc_1F93A
mov     bx, cs:word_1F678
mov     cs:word_1F68E, bx
cmp     al, 37h ; '7'
jb      short loc_1F927
jz      short loc_1F92E
cmp     al, 39h ; '9'
jb      short loc_1F933
jz      short loc_1F93A
mov     bx, cs:word_1F67A
mov     cs:word_1F68E, bx
cmp     al, 3Bh ; ';'
jb      short loc_1F927
jz      short loc_1F92E
cmp     al, 3Dh ; '='
jb      short loc_1F933
jz      short loc_1F93A

loc_1F927:
lodsb
mov     bh, 0
mov     bl, al
jmp     short loc_1F93F

loc_1F92E:
lodsw
mov     bx, ax
jmp     short loc_1F93F

loc_1F933:
lodsb
mov     bh, 0
mov     bl, al
jmp     short loc_1F95E

loc_1F93A:
lodsw
mov     bx, ax
jmp     short loc_1F95E

loc_1F93F:
mov     ax, cs:word_1F68E
mov     ds, ax
push    si

loc_1F946:
mov     si, di
movsb
add     di, 4Fh ; 'O'
dec     bx
jz      short loc_1F980
loop    loc_1F946
mov     cx, cs:word_1F673
inc     bp
mov     di, bp
dec     dx
jz      short loc_1F999
jmp     short loc_1F946

loc_1F95E:
mov     ax, cs:word_1F68E
mov     ds, ax
push    si

loc_1F965:
mov     si, di
lodsb
not     al
stosb
add     di, 4Fh ; 'O'
dec     bx
jz      short loc_1F980
loop    loc_1F965
mov     cx, cs:word_1F673
inc     bp
mov     di, bp
dec     dx
jz      short loc_1F999
jmp     short loc_1F965

loc_1F980:
pop     si
pop     ds
dec     cx
jz      short loc_1F988
jmp     loc_1F7F2

loc_1F988:
mov     cx, cs:word_1F673
inc     bp
mov     di, bp
dec     dx
jnz     short loc_1F996
jmp     locret_1F82C

loc_1F996:
jmp     loc_1F7F2

loc_1F999:
pop     si
pop     ds
retn

loc_1F99C:
mov     al, 58h ; 'X'
jmp     loc_1F819
sub_1F7DF endp

; START OF FUNCTION CHUNK FOR sub_1F77D

loc_1F9A1:
mov     ah, 0Ch
int     18h             ; TRANSFER TO ROM BASIC
                        ; causes transfer to ROM-based BASIC (IBM-PC)
                        ; often reboots a compatible; often has no effect at all
mov     ax, cs
mov     ds, ax
assume ds:seg005
mov     dx, 3C1h
mov     ah, 9
int     21h             ; DOS - PRINT STRING
                        ; DS:DX -> string terminated by "$"
retn
; END OF FUNCTION CHUNK FOR sub_1F77D
db 83h, 4Fh, 83h, 89h, 83h, 74h, 83h, 42h
db 83h, 62h, 83h, 4Eh, 93h, 57h, 8Ah, 4Ah
db 83h, 47h, 83h, 89h, 81h, 5Bh, 20h, 24h



sub_1F9C9 proc far
call    sub_1F9CD
retf
sub_1F9C9 endp




sub_1F9CD proc near
push    ax

loc_1F9CE:
jmp     short $+2

loc_1F9D0:
jmp     short $+2

loc_1F9D2:              ; PIC 2  same as 0020 for PIC 1
in      al, 0A0h
test    al, 20h
jnz     short loc_1F9CE

loc_1F9D8:              ; PIC 2  same as 0020 for PIC 1
in      al, 0A0h
test    al, 20h
jnz     short loc_1F9E0
jmp     short loc_1F9D8

loc_1F9E0:
pop     ax
retn
sub_1F9CD endp



; Attributes: bp-based frame

sub_1F9E2 proc far

arg_0= word ptr  6

push    bp
mov     bp, sp
mov     cx, [bp+arg_0]
call    sub_1F9ED
pop     bp
retf
sub_1F9E2 endp




sub_1F9ED proc near
jcxz    short locret_1FA05
push    ax

loc_1F9F0:
jmp     short $+2

loc_1F9F2:
jmp     short $+2

loc_1F9F4:              ; PIC 2  same as 0020 for PIC 1
in      al, 0A0h
test    al, 20h
jnz     short loc_1F9F0

loc_1F9FA:              ; PIC 2  same as 0020 for PIC 1
in      al, 0A0h
test    al, 20h
jnz     short loc_1FA02
jmp     short loc_1F9FA

loc_1FA02:
loop    loc_1F9F0
pop     ax

locret_1FA05:
retn
sub_1F9ED endp



; Attributes: bp-based frame

sub_1FA06 proc far

arg_0= dword ptr  6

push    bp
mov     bp, sp
push    ds
push    si
lds     ax, [bp+arg_0]
assume ds:dseg
mov     si, ax
mov     cx, 10h

loc_1FA13:
lodsw
call    sub_1FA2C
loop    loc_1FA13
pop     si
pop     ds
pop     bp
retf
sub_1FA06 endp



; Attributes: bp-based frame

sub_1FA1D proc far

arg_0= word ptr  6

push    bp
mov     bp, sp
push    ds
push    si
mov     ax, [bp+arg_0]
call    sub_1FA2C
pop     si
pop     ds
pop     bp
retf
sub_1FA1D endp




sub_1FA2C proc near
push    cx
mov     dx, ax
mov     al, dh
and     al, 0F0h
mov     cl, 4
shr     al, cl
out     0A8h, al        ; Interrupt Controller #2, 8259A
mov     al, dh
and     al, 0Fh
out     0AAh, al        ; Interrupt Controller #2, 8259A
mov     al, dl
and     al, 0F0h
mov     cl, 4
shr     al, cl
out     0ACh, al        ; Interrupt Controller #2, 8259A
mov     al, dl
and     al, 0Fh
out     0AEh, al        ; Interrupt Controller #2, 8259A
pop     cx
retn
sub_1FA2C endp



; Attributes: bp-based frame

sub_1FA51 proc far

arg_0= dword ptr  6

push    bp
mov     bp, sp
push    ds
push    es
push    si
push    di
push    bp
lds     ax, [bp+arg_0]
mov     si, ax
call    sub_1FA68
pop     bp
pop     di
pop     si
pop     es
pop     ds
pop     bp
retf
sub_1FA51 endp




sub_1FA68 proc near
mov     di, 57Ah
mov     cx, 10h

loc_1FA6E:
mov     ax, [si]
mov     cs:[di], ax
add     si, 2
add     di, 2
loop    loc_1FA6E
mov     bp, 10h

loc_1FA7E:
mov     cx, 10h
mov     si, 57Ah
mov     dx, 0

loc_1FA87:
mov     ax, cs:[si]
mov     bx, ax
and     ax, 0Fh
cmp     ax, 0
jz      short loc_1FA99
sub     ax, 1
or      dx, ax

loc_1FA99:
mov     ax, bx
and     ax, 0F0h
cmp     ax, 0
jz      short loc_1FAA8
sub     ax, 10h
or      dx, ax

loc_1FAA8:
mov     ax, bx
and     ax, 0F00h
cmp     ax, 0
jz      short loc_1FAB7
sub     ax, 100h
or      dx, ax

loc_1FAB7:
mov     cs:[si], dx
add     si, 2
and     dx, 0F000h
add     dx, 1000h
loop    loc_1FA87
call    sub_1F9CD
push    ds
mov     ax, cs
mov     ds, ax
assume ds:seg005
mov     cx, 10h
mov     si, 57Ah

loc_1FAD5:
lodsw
call    sub_1FA2C
loop    loc_1FAD5
pop     ds
assume ds:dseg
dec     bp
jnz     short loc_1FA7E
retn
sub_1FA68 endp

push    bp
mov     bp, sp
push    ds
push    es
push    si
push    di
push    bp
lds     ax, [bp+6]
mov     si, ax
call    sub_1FAF7
pop     bp
pop     di
pop     si
pop     es
pop     ds
pop     bp
retf



sub_1FAF7 proc near
mov     di, 57Ah
mov     cx, 10h

loc_1FAFD:
mov     ax, [si]
mov     cs:[di], ax
add     si, 2
add     di, 2
loop    loc_1FAFD
mov     bp, 10h
mov     dx, 0
mov     si, 57Ah

loc_1FB13:
mov     cx, 10h

loc_1FB16:
mov     ax, cs:[si]
mov     bx, ax
and     ax, 0Fh
cmp     ax, 0
jz      short loc_1FB28
sub     ax, 1
or      dx, ax

loc_1FB28:
mov     ax, bx
and     ax, 0F0h
cmp     ax, 0
jz      short loc_1FB37
sub     ax, 10h
or      dx, ax

loc_1FB37:
mov     ax, bx
and     ax, 0F00h
cmp     ax, 0
jz      short loc_1FB46
sub     ax, 100h
or      dx, ax

loc_1FB46:
mov     cs:[si], dx
mov     ax, dx
push    dx
push    di
call    sub_1F9CD
call    sub_1FA2C
pop     di
pop     dx
and     dx, 0F000h
loop    loc_1FB16
and     dx, 0F000h
add     dx, 1000h
add     si, 2
dec     bp
jnz     short loc_1FB13
retn
sub_1FAF7 endp

db 3 dup(0), 10h, 0, 20h, 0, 30h, 0, 40h
db 0, 50h, 0, 60h, 0, 70h, 0, 80h, 0, 90h
db 0, 0A0h, 0, 0B0h, 0, 0C0h, 0, 0D0h, 0
db 0E0h, 0, 0F0h


; Attributes: bp-based frame

sub_1FB8A proc far

arg_0= dword ptr  6

push    bp
mov     bp, sp
push    ds
push    es
push    si
push    di
push    bp
lds     ax, [bp+arg_0]
mov     si, ax
mov     cs:word_1FBA5, ax
call    sub_1FBA7
pop     bp
pop     di
pop     si
pop     es
pop     ds
pop     bp
retf
sub_1FB8A endp

word_1FBA5 dw 0



sub_1FBA7 proc near
mov     si, cs:word_1FBA5
mov     di, 57Ah
mov     cx, 10h

loc_1FBB2:
mov     word ptr cs:[di], 0
add     di, 2
loop    loc_1FBB2
mov     bp, 10h

loc_1FBBF:
mov     cx, 10h
mov     di, 57Ah
mov     si, cs:word_1FBA5
mov     dx, 0

loc_1FBCD:
mov     ax, cs:[di]
mov     bx, [si]
and     ax, 0Fh
and     bx, 0Fh
cmp     ax, bx
jz      short loc_1FBDF
add     ax, 1

loc_1FBDF:
or      dx, ax
mov     ax, cs:[di]
mov     bx, [si]
and     ax, 0F0h
and     bx, 0F0h
cmp     ax, bx
jz      short loc_1FBF4
add     ax, 10h

loc_1FBF4:
or      dx, ax
mov     ax, cs:[di]
mov     bx, [si]
and     ax, 0F00h
and     bx, 0F00h
cmp     ax, bx
jz      short loc_1FC09
add     ax, 100h

loc_1FC09:
or      dx, ax
mov     cs:[di], dx
add     si, 2
add     di, 2
and     dx, 0F000h
add     dx, 1000h
loop    loc_1FBCD
call    sub_1F9CD
push    ds
mov     ax, cs
mov     ds, ax
assume ds:seg005
mov     cx, 10h
mov     si, 57Ah

loc_1FC2C:
lodsw
call    sub_1FA2C
loop    loc_1FC2C
pop     ds
assume ds:dseg
dec     bp
jnz     short loc_1FBBF
retn
sub_1FBA7 endp

push    bp
mov     bp, sp
push    ds
push    es
push    si
push    di
push    bp
lds     ax, [bp+6]
mov     si, ax
mov     cs:word_1FBA5, ax
call    sub_1FC52
pop     bp
pop     di
pop     si
pop     es
pop     ds
pop     bp
retf



sub_1FC52 proc near
mov     si, cs:word_1FBA5
mov     di, 57Ah
mov     cx, 10h

loc_1FC5D:
mov     word ptr cs:[di], 0
add     di, 2
loop    loc_1FC5D
mov     bp, 10h
mov     di, 57Ah
mov     si, cs:word_1FBA5
mov     dx, 0

loc_1FC75:
mov     cx, 10h

loc_1FC78:
mov     ax, cs:[di]
mov     bx, [si]
and     ax, 0Fh
and     bx, 0Fh
cmp     ax, bx
jz      short loc_1FC8A
add     ax, 1

loc_1FC8A:
or      dx, ax
mov     ax, cs:[di]
mov     bx, [si]
and     ax, 0F0h
and     bx, 0F0h
cmp     ax, bx
jz      short loc_1FC9F
add     ax, 10h

loc_1FC9F:
or      dx, ax
mov     ax, cs:[di]
mov     bx, [si]
and     ax, 0F00h
and     bx, 0F00h
cmp     ax, bx
jz      short loc_1FCB4
add     ax, 100h

loc_1FCB4:
or      dx, ax
mov     cs:[di], dx
mov     ax, dx
call    sub_1F9CD
call    sub_1FA2C
and     dx, 0F000h
loop    loc_1FC78
add     si, 2
add     di, 2
and     dx, 0F000h
add     dx, 1000h
dec     bp
jnz     short loc_1FC75
retn
sub_1FC52 endp



; Attributes: bp-based frame

sub_1FCD9 proc far

arg_0= word ptr  6
arg_2= word ptr  8
arg_4= word ptr  0Ah
arg_6= byte ptr  0Ch

push    bp
mov     bp, sp
push    ds
push    es
push    si
push    di
push    bp
mov     ax, [bp+arg_0]
mov     cs:word_1FD35, ax
mov     ax, [bp+arg_2]
mov     cs:word_1FD37, ax
mov     ax, [bp+arg_4]
mov     cs:word_1FD39, ax
mov     al, [bp+arg_6]
mov     cs:byte_1FD3B, al
call    sub_1FD3C
pop     bp
pop     di
pop     si
pop     es
pop     ds
pop     bp
retf
sub_1FCD9 endp



; Attributes: bp-based frame

sub_1FD07 proc far

arg_0= word ptr  6
arg_2= word ptr  8
arg_4= word ptr  0Ah
arg_6= byte ptr  0Ch

push    bp
mov     bp, sp
push    ds
push    es
push    si
push    di
push    bp
mov     ax, [bp+arg_0]
mov     cs:word_1FD35, ax
mov     ax, [bp+arg_2]
mov     cs:word_1FD37, ax
mov     ax, [bp+arg_4]
mov     cs:word_1FD39, ax
mov     al, [bp+arg_6]
mov     cs:byte_1FD3B, al
call    sub_1FD87
pop     bp
pop     di
pop     si
pop     es
pop     ds
pop     bp
retf
sub_1FD07 endp

word_1FD35 dw 64Ah
word_1FD37 dw 1Eh
word_1FD39 dw 50h
byte_1FD3B db 0Dh



sub_1FD3C proc near
cld
mov     bp, cs:word_1FD35
mov     bx, cs:word_1FD39

loc_1FD47:
mov     dl, cs:byte_1FD3B
mov     ax, 0A800h
mov     es, ax
assume es:nothing
call    sub_1FD73
mov     ax, 0B000h
mov     es, ax
assume es:nothing
call    sub_1FD73
mov     ax, 0B800h
mov     es, ax
assume es:nothing
call    sub_1FD73
mov     ax, 0E000h
mov     es, ax
assume es:nothing
call    sub_1FD73
add     bp, 50h ; 'P'
dec     bx
jnz     short loc_1FD47
retn
sub_1FD3C endp




sub_1FD73 proc near
mov     ax, 0FFFFh
shr     dl, 1
jb      short loc_1FD7D
mov     ax, 0

loc_1FD7D:
mov     cx, cs:word_1FD37
mov     di, bp
rep stosw
retn
sub_1FD73 endp




sub_1FD87 proc near
cld
mov     bp, cs:word_1FD35
mov     bx, cs:word_1FD39

loc_1FD92:
mov     dl, cs:byte_1FD3B
mov     ax, cs:word_1F67E
mov     es, ax
assume es:nothing
call    sub_1FDC2
mov     ax, cs:word_1F680
mov     es, ax
call    sub_1FDC2
mov     ax, cs:word_1F682
mov     es, ax
call    sub_1FDC2
mov     ax, cs:word_1F684
mov     es, ax
call    sub_1FDC2
add     bp, 50h ; 'P'
dec     bx
jnz     short loc_1FD92
retn
sub_1FD87 endp




sub_1FDC2 proc near
mov     ax, 0FFFFh
shr     dl, 1
jb      short loc_1FDCC
mov     ax, 0

loc_1FDCC:
mov     cx, cs:word_1FD37
mov     di, bp
rep stosw
retn
sub_1FDC2 endp



; Attributes: bp-based frame

sub_1FDD6 proc far

arg_0= word ptr  6
arg_2= word ptr  8
arg_4= word ptr  0Ah
arg_6= byte ptr  0Ch

push    bp
mov     bp, sp
push    ds
push    es
push    si
push    di
push    bp
mov     ax, [bp+arg_0]
mov     cs:word_1FE04, ax
mov     ax, [bp+arg_2]
mov     cs:word_1FE06, ax
mov     ax, [bp+arg_4]
mov     cs:word_1FE08, ax
mov     al, [bp+arg_6]
mov     cs:byte_1FE0A, al
call    sub_1FE0D
pop     bp
pop     di
pop     si
pop     es
pop     ds
pop     bp
retf
sub_1FDD6 endp

word_1FE04 dw 0
word_1FE06 dw 28h
word_1FE08 dw 190h
byte_1FE0A db 0
word_1FE0B dw 5555h



sub_1FE0D proc near
mov     ax, cs:word_1FE0B
mov     bp, cs:word_1FE04
mov     dx, cs:word_1FE08
call    sub_1FE1F
retn
sub_1FE0D endp




sub_1FE1F proc near
mov     bl, cs:byte_1FE0A
mov     cx, 0A800h
mov     ds, cx
assume ds:nothing
call    sub_1FE51
mov     cx, 0B000h
mov     ds, cx
assume ds:nothing
call    sub_1FE51
mov     cx, 0B800h
mov     ds, cx
assume ds:nothing
call    sub_1FE51
mov     cx, 0E000h
mov     ds, cx
assume ds:nothing
call    sub_1FE51
ror     ax, 1
mov     cs:word_1FE0B, ax
add     bp, 50h ; 'P'
dec     dx
jnz     short sub_1FE1F
retn
sub_1FE1F endp




sub_1FE51 proc near
shr     bl, 1
push    bx
jb      short loc_1FE5B
call    sub_1FE60
jmp     short loc_1FE5E

loc_1FE5B:
call    sub_1FE6F

loc_1FE5E:
pop     bx
retn
sub_1FE51 endp




sub_1FE60 proc near
mov     cx, cs:word_1FE06
mov     bx, bp

loc_1FE67:
and     [bx], ax
add     bx, 2
loop    loc_1FE67
retn
sub_1FE60 endp




sub_1FE6F proc near
mov     cx, cs:word_1FE06
mov     bx, bp

loc_1FE76:
not     ax
or      [bx], ax
not     ax
add     bx, 2
loop    loc_1FE76
retn
sub_1FE6F endp



; Attributes: bp-based frame

sub_1FE82 proc far

arg_0= word ptr  6
arg_2= word ptr  8
arg_4= word ptr  0Ah
arg_6= word ptr  0Ch

push    bp
mov     bp, sp
push    ds
push    es
push    si
push    di
push    bp
mov     ax, [bp+arg_0]
mov     cs:word_1FEB0, ax
mov     ax, [bp+arg_2]
mov     cs:word_1FEB2, ax
mov     ax, [bp+arg_4]
mov     cs:word_1FEB4, ax
mov     ax, [bp+arg_6]
mov     cs:word_1FEB6, ax
call    sub_1FEB8
pop     bp
pop     di
pop     si
pop     es
pop     ds
assume ds:dseg
pop     bp
retf
sub_1FE82 endp

word_1FEB0 dw 8EAh
word_1FEB2 dw 9
word_1FEB4 dw 6Eh
word_1FEB6 dw 0



sub_1FEB8 proc near
cld
mov     si, cs:word_1FEB6
mov     di, cs:word_1FEB0
mov     bp, cs:word_1FEB2
shl     bp, 1
mov     bx, cs:word_1FEB4

loc_1FECF:
mov     ax, cs:word_1F67E
mov     ds, ax
mov     ax, 0A800h
mov     es, ax
assume es:nothing
call    sub_1FF11
mov     ax, cs:word_1F680
mov     ds, ax
mov     ax, 0B000h
mov     es, ax
assume es:nothing
call    sub_1FF11
mov     ax, cs:word_1F682
mov     ds, ax
mov     ax, 0B800h
mov     es, ax
assume es:nothing
call    sub_1FF11
mov     ax, cs:word_1F684
mov     ds, ax
mov     ax, 0E000h
mov     es, ax
assume es:nothing
call    sub_1FF11
add     si, 50h ; 'P'
add     di, 50h ; 'P'
dec     bx
jnz     short loc_1FECF
retn
sub_1FEB8 endp




sub_1FF11 proc near
mov     cx, cs:word_1FEB2
rep movsw
sub     si, bp
sub     di, bp
retn
sub_1FF11 endp



; Attributes: bp-based frame

sub_1FF1D proc far

arg_0= word ptr  6
arg_2= word ptr  8
arg_4= word ptr  0Ah
arg_6= word ptr  0Ch

push    bp
mov     bp, sp
push    ds
push    es
push    si
push    di
push    bp
mov     ax, [bp+arg_0]
mov     cs:word_1FEB0, ax
mov     ax, [bp+arg_2]
mov     cs:word_1FEB2, ax
mov     ax, [bp+arg_4]
mov     cs:word_1FEB4, ax
mov     ax, [bp+arg_6]
mov     cs:word_1FEB6, ax
call    sub_1FF4B
pop     bp
pop     di
pop     si
pop     es
assume es:nothing
pop     ds
pop     bp
retf
sub_1FF1D endp




sub_1FF4B proc near
cld
mov     si, cs:word_1FEB6
mov     di, cs:word_1FEB0
mov     bp, cs:word_1FEB2
shl     bp, 1
mov     bx, cs:word_1FEB4

loc_1FF62:
mov     ax, cs:word_1F67E
mov     ds, ax
mov     es, ax
call    sub_1FF98
mov     ax, cs:word_1F680
mov     ds, ax
mov     es, ax
call    sub_1FF98
mov     ax, cs:word_1F682
mov     ds, ax
mov     es, ax
call    sub_1FF98
mov     ax, cs:word_1F684
mov     ds, ax
mov     es, ax
call    sub_1FF98
add     si, 50h ; 'P'
add     di, 50h ; 'P'
dec     bx
jnz     short loc_1FF62
retn
sub_1FF4B endp




sub_1FF98 proc near
mov     cx, cs:word_1FEB2
rep movsw
sub     si, bp
sub     di, bp
retn
sub_1FF98 endp



; Attributes: bp-based frame

sub_1FFA4 proc far

arg_0= word ptr  6
arg_2= word ptr  8
arg_4= word ptr  0Ah
arg_6= word ptr  0Ch

push    bp
mov     bp, sp
push    ds
push    es
push    si
push    di
push    bp
mov     ax, [bp+arg_0]
mov     cs:word_1FEB0, ax
mov     ax, [bp+arg_2]
mov     cs:word_1FEB2, ax
mov     ax, [bp+arg_4]
mov     cs:word_1FEB4, ax
mov     ax, [bp+arg_6]
mov     cs:word_1FEB6, ax
call    sub_1FFD2
pop     bp
pop     di
pop     si
pop     es
pop     ds
pop     bp
retf
sub_1FFA4 endp




sub_1FFD2 proc near
cld
mov     si, cs:word_1FEB6
mov     di, cs:word_1FEB0
mov     bp, cs:word_1FEB2
shl     bp, 1
mov     bx, cs:word_1FEB4

loc_1FFE9:
mov     ax, 0A800h
mov     ds, ax
assume ds:nothing
mov     ax, cs:word_1F67E
mov     es, ax
call    sub_2002B
mov     ax, 0B000h
mov     ds, ax
assume ds:nothing
mov     ax, cs:word_1F680
mov     es, ax
call    sub_2002B
mov     ax, 0B800h
mov     ds, ax
assume ds:nothing
mov     ax, cs:word_1F682
mov     es, ax
call    sub_2002B
mov     ax, 0E000h
mov     ds, ax
assume ds:nothing
mov     ax, cs:word_1F684
mov     es, ax
call    sub_2002B
add     si, 50h ; 'P'
add     di, 50h ; 'P'
dec     bx
jnz     short loc_1FFE9
retn
sub_1FFD2 endp




sub_2002B proc near
mov     cx, cs:word_1FEB2
rep movsw
sub     si, bp
sub     di, bp
retn
sub_2002B endp

push    bp
mov     bp, sp
push    ds
push    es
push    si
push    di
push    bp
mov     ax, [bp+6]
mov     cs:word_1FEB0, ax
mov     ax, [bp+8]
mov     cs:word_1FEB2, ax
mov     ax, [bp+0Ah]
mov     cs:word_1FEB4, ax
mov     ax, [bp+0Ch]
mov     cs:word_1FEB6, ax
call    sub_20065
pop     bp
pop     di
pop     si
pop     es
pop     ds
assume ds:dseg
pop     bp
retf



sub_20065 proc near
cld
mov     si, cs:word_1FEB6
mov     di, cs:word_1FEB0
mov     bp, cs:word_1FEB2
shl     bp, 1
mov     bx, cs:word_1FEB4

loc_2007C:
mov     ax, 0A800h
mov     ds, ax
assume ds:nothing
mov     ax, 0A800h
mov     es, ax
assume es:nothing
call    sub_200BA
mov     ax, 0B000h
mov     ds, ax
assume ds:nothing
mov     ax, 0B000h
mov     es, ax
assume es:nothing
call    sub_200BA
mov     ax, 0B800h
mov     ds, ax
assume ds:nothing
mov     ax, 0B800h
mov     es, ax
assume es:nothing
call    sub_200BA
mov     ax, 0E000h
mov     ds, ax
assume ds:nothing
mov     ax, 0E000h
mov     es, ax
assume es:nothing
call    sub_200BA
add     si, 50h ; 'P'
add     di, 50h ; 'P'
dec     bx
jnz     short loc_2007C
retn
sub_20065 endp




sub_200BA proc near
mov     cx, cs:word_1FEB2
rep movsw
sub     si, bp
sub     di, bp
retn
sub_200BA endp



; Attributes: bp-based frame

sub_200C6 proc far

arg_0= word ptr  6
arg_2= word ptr  8
arg_4= word ptr  0Ah
arg_6= word ptr  0Ch

push    bp
mov     bp, sp
push    ds
push    es
push    si
push    di
push    bp
mov     ax, [bp+arg_0]
mov     cs:word_1FEB0, ax
mov     ax, [bp+arg_2]
mov     cs:word_1FEB2, ax
mov     ax, [bp+arg_4]
mov     cs:word_1FEB4, ax
mov     ax, [bp+arg_6]
mov     cs:word_1FEB6, ax
call    sub_2010D
cmp     cs:word_1F5F1, 1
jz      short loc_200FB
mov     al, 0
out     0A6h, al        ; Interrupt Controller #2, 8259A
jmp     short loc_200FF

loc_200FB:
mov     al, 1
out     0A6h, al        ; Interrupt Controller #2, 8259A

loc_200FF:
pop     bp
pop     di
pop     si
pop     es
assume es:nothing
pop     ds
assume ds:dseg
pop     bp
retf
sub_200C6 endp

pop     bp
pop     di
pop     si
pop     es
pop     ds
pop     bp
retf



sub_2010D proc near
cld
mov     si, cs:word_1FEB6
mov     di, cs:word_1FEB0
mov     bp, cs:word_1FEB2
shl     bp, 1
mov     bx, cs:word_1FEB4

loc_20124:
mov     dx, 0A800h
mov     ds, dx
assume ds:nothing
call    sub_2014E
mov     dx, 0B000h
mov     ds, dx
assume ds:nothing
call    sub_2014E
mov     dx, 0B800h
mov     ds, dx
assume ds:nothing
call    sub_2014E
mov     dx, 0E000h
mov     ds, dx
assume ds:nothing
call    sub_2014E
add     si, 50h ; 'P'
add     di, 50h ; 'P'
dec     bx
jnz     short loc_20124
retn
sub_2010D endp




sub_2014E proc near
mov     cx, cs:word_1FEB2

loc_20153:
mov     al, 1
out     0A6h, al        ; Interrupt Controller #2, 8259A
mov     dx, [si]
xor     al, al
out     0A6h, al        ; Interrupt Controller #2, 8259A
mov     [di], dx
add     di, 2
add     si, 2
loop    loc_20153
sub     si, bp
sub     di, bp
retn
sub_2014E endp



; Attributes: bp-based frame

sub_2016C proc far

arg_0= word ptr  6
arg_2= word ptr  8
arg_4= word ptr  0Ah
arg_6= word ptr  0Ch

push    bp
mov     bp, sp
push    ds
push    es
push    si
push    di
push    bp
mov     ax, [bp+arg_0]
mov     cs:word_1FEB0, ax
mov     ax, [bp+arg_2]
mov     cs:word_1FEB2, ax
mov     ax, [bp+arg_4]
mov     cs:word_1FEB4, ax
mov     ax, [bp+arg_6]
mov     cs:word_1FEB6, ax
call    sub_201B3
cmp     cs:word_1F5F1, 1
jz      short loc_201A1
mov     al, 0
out     0A6h, al        ; Interrupt Controller #2, 8259A
jmp     short loc_201A5

loc_201A1:
mov     al, 1
out     0A6h, al        ; Interrupt Controller #2, 8259A

loc_201A5:
pop     bp
pop     di
pop     si
pop     es
pop     ds
assume ds:dseg
pop     bp
retf
sub_2016C endp

pop     bp
pop     di
pop     si
pop     es
pop     ds
pop     bp
retf



sub_201B3 proc near
cld
mov     si, cs:word_1FEB6
mov     di, cs:word_1FEB0
mov     bp, cs:word_1FEB2
shl     bp, 1
mov     bx, cs:word_1FEB4

loc_201CA:
mov     dx, 0A800h
mov     ds, dx
assume ds:nothing
call    sub_201F4
mov     dx, 0B000h
mov     ds, dx
assume ds:nothing
call    sub_201F4
mov     dx, 0B800h
mov     ds, dx
assume ds:nothing
call    sub_201F4
mov     dx, 0E000h
mov     ds, dx
assume ds:nothing
call    sub_201F4
add     si, 50h ; 'P'
add     di, 50h ; 'P'
dec     bx
jnz     short loc_201CA
retn
sub_201B3 endp




sub_201F4 proc near
mov     cx, cs:word_1FEB2

loc_201F9:
xor     al, al
out     0A6h, al        ; Interrupt Controller #2, 8259A
mov     dx, [si]
mov     al, 1
out     0A6h, al        ; Interrupt Controller #2, 8259A
mov     [di], dx
add     di, 2
add     si, 2
loop    loc_201F9
sub     si, bp
sub     di, bp
retn
sub_201F4 endp



; Attributes: bp-based frame

sub_20212 proc far

arg_0= byte ptr  6

push    bp
mov     bp, sp
cmp     [bp+arg_0], 1
jz      short loc_20228
mov     al, 0
out     0A6h, al        ; Interrupt Controller #2, 8259A
mov     cs:word_1F5F1, 0
jmp     short loc_20233

loc_20228:
mov     al, 1
out     0A6h, al        ; Interrupt Controller #2, 8259A
mov     cs:word_1F5F1, 1

loc_20233:
pop     bp
retf
sub_20212 endp



; Attributes: bp-based frame

sub_20235 proc far

arg_0= byte ptr  6

push    bp
mov     bp, sp
cmp     [bp+arg_0], 1
jz      short loc_2024A
mov     al, 0
out     0A4h, al        ; Interrupt Controller #2, 8259A
mov     cs:byte_1F5F0, 1
jmp     short loc_20254

loc_2024A:
mov     al, 1
out     0A4h, al        ; Interrupt Controller #2, 8259A
mov     cs:byte_1F5F0, 0

loc_20254:
pop     bp
retf
sub_20235 endp



; Attributes: bp-based frame

sub_20256 proc far

arg_0= word ptr  6
arg_2= word ptr  8
arg_4= word ptr  0Ah
arg_6= word ptr  0Ch
arg_8= byte ptr  0Eh

push    bp
mov     bp, sp
push    ds
push    es
push    si
push    di
push    bp
mov     ax, [bp+arg_0]
mov     cs:word_2028B, ax
mov     ax, [bp+arg_2]
mov     cs:word_2028D, ax
mov     ax, [bp+arg_4]
mov     cs:word_2028F, ax
mov     ax, [bp+arg_6]
mov     cs:word_20291, ax
mov     al, [bp+arg_8]
mov     cs:byte_20293, al
call    sub_20296
pop     bp
pop     di
pop     si
pop     es
pop     ds
assume ds:dseg
pop     bp
retf
sub_20256 endp

word_2028B dw 1C4Dh
word_2028D dw 0Fh
word_2028F dw 136h
word_20291 dw 0
byte_20293 db 0Ch
word_20294 dw 0



sub_20296 proc near
push    ds
mov     ax, cs:word_2028D
shl     ax, 1
mov     cs:word_20294, 50h ; 'P'
sub     cs:word_20294, ax
mov     si, cs:word_20291
mov     di, cs:word_2028B
mov     bp, cs:word_2028F

loc_202B8:
mov     cx, cs:word_2028D

loc_202BD:
call    sub_202DD
call    sub_20321
call    sub_2033E
add     si, 2
add     di, 2
loop    loc_202BD
add     si, cs:word_20294
add     di, cs:word_20294
dec     bp
jnz     short loc_202B8
pop     ds
retn
sub_20296 endp




sub_202DD proc near
mov     ax, cs:word_1F67E
mov     ds, ax
mov     bx, [si]
mov     dl, cs:byte_20293
shr     dl, 1
jb      short loc_202F0
not     bx

loc_202F0:
mov     ax, cs:word_1F680
mov     ds, ax
mov     ax, [si]
shr     dl, 1
jb      short loc_202FE
not     ax

loc_202FE:
and     bx, ax
mov     ax, cs:word_1F682
mov     ds, ax
mov     ax, [si]
shr     dl, 1
jb      short loc_2030E
not     ax

loc_2030E:
and     bx, ax
mov     ax, cs:word_1F684
mov     ds, ax
mov     ax, [si]
shr     dl, 1
jb      short loc_2031E
not     ax

loc_2031E:
and     bx, ax
retn
sub_202DD endp




sub_20321 proc near
mov     ax, 0A800h
mov     ds, ax
assume ds:nothing
and     [di], bx
mov     ax, 0B000h
mov     ds, ax
assume ds:nothing
and     [di], bx
mov     ax, 0B800h
mov     ds, ax
assume ds:nothing
and     [di], bx
mov     ax, 0E000h
mov     ds, ax
assume ds:nothing
and     [di], bx
retn
sub_20321 endp




sub_2033E proc near
not     bx
mov     ax, cs:word_1F67E
mov     ds, ax
assume ds:dseg
mov     dx, [si]
and     dx, bx
mov     ax, 0A800h
mov     ds, ax
assume ds:nothing
or      [di], dx
mov     ax, cs:word_1F680
mov     ds, ax
assume ds:dseg
mov     dx, [si]
and     dx, bx
mov     ax, 0B000h
mov     ds, ax
assume ds:nothing
or      [di], dx
mov     ax, cs:word_1F682
mov     ds, ax
assume ds:dseg
mov     dx, [si]
and     dx, bx
mov     ax, 0B800h
mov     ds, ax
assume ds:nothing
or      [di], dx
mov     ax, cs:word_1F684
mov     ds, ax
assume ds:dseg
mov     dx, [si]
and     dx, bx
mov     ax, 0E000h
mov     ds, ax
assume ds:nothing
or      [di], dx
retn
sub_2033E endp



; Attributes: bp-based frame

sub_20385 proc far

arg_0= word ptr  6
arg_2= word ptr  8
arg_4= word ptr  0Ah
arg_6= word ptr  0Ch
arg_8= byte ptr  0Eh

push    bp
mov     bp, sp
push    ds
push    es
push    si
push    di
push    bp
mov     ax, [bp+arg_0]
mov     cs:word_2028B, ax
mov     ax, [bp+arg_2]
mov     cs:word_2028D, ax
mov     ax, [bp+arg_4]
mov     cs:word_2028F, ax
mov     ax, [bp+arg_6]
mov     cs:word_20291, ax
mov     al, [bp+arg_8]
mov     cs:byte_20293, al
call    sub_203BA
pop     bp
pop     di
pop     si
pop     es
pop     ds
assume ds:dseg
pop     bp
retf
sub_20385 endp




sub_203BA proc near
push    ds
mov     ax, cs:word_2028D
shl     ax, 1
mov     cs:word_20294, 50h ; 'P'
sub     cs:word_20294, ax
mov     si, cs:word_20291
mov     di, cs:word_2028B
mov     bp, cs:word_2028F

loc_203DC:
mov     cx, cs:word_2028D

loc_203E1:
call    sub_20401
call    sub_20445
call    sub_20466
add     si, 2
add     di, 2
loop    loc_203E1
add     si, cs:word_20294
add     di, cs:word_20294
dec     bp
jnz     short loc_203DC
pop     ds
retn
sub_203BA endp




sub_20401 proc near
mov     ax, cs:word_1F67E
mov     ds, ax
mov     bx, [si]
mov     dl, cs:byte_20293
shr     dl, 1
jb      short loc_20414
not     bx

loc_20414:
mov     ax, cs:word_1F680
mov     ds, ax
mov     ax, [si]
shr     dl, 1
jb      short loc_20422
not     ax

loc_20422:
and     bx, ax
mov     ax, cs:word_1F682
mov     ds, ax
mov     ax, [si]
shr     dl, 1
jb      short loc_20432
not     ax

loc_20432:
and     bx, ax
mov     ax, cs:word_1F684
mov     ds, ax
mov     ax, [si]
shr     dl, 1
jb      short loc_20442
not     ax

loc_20442:
and     bx, ax
retn
sub_20401 endp




sub_20445 proc near
mov     ax, cs:word_1F67E
mov     ds, ax
and     [di], bx
mov     ax, cs:word_1F680
mov     ds, ax
and     [di], bx
mov     ax, cs:word_1F682
mov     ds, ax
and     [di], bx
mov     ax, cs:word_1F684
mov     ds, ax
and     [di], bx
retn
sub_20445 endp




sub_20466 proc near
not     bx
mov     ax, cs:word_1F67E
mov     ds, ax
mov     dx, [si]
and     dx, bx
or      [di], dx
mov     ax, cs:word_1F680
mov     ds, ax
mov     dx, [si]
and     dx, bx
or      [di], dx
mov     ax, cs:word_1F682
mov     ds, ax
mov     dx, [si]
and     dx, bx
or      [di], dx
mov     ax, cs:word_1F684
mov     ds, ax
mov     dx, [si]
and     dx, bx
or      [di], dx
retn
sub_20466 endp



; Attributes: bp-based frame

sub_20499 proc far

arg_0= word ptr  6
arg_2= word ptr  8
arg_4= word ptr  0Ah
arg_6= word ptr  0Ch
arg_8= byte ptr  0Eh

push    bp
mov     bp, sp
push    ds
push    es
push    si
push    di
push    bp
mov     ax, [bp+arg_0]
mov     cs:word_2028B, ax
mov     ax, [bp+arg_2]
mov     cs:word_2028D, ax
mov     ax, [bp+arg_4]
mov     cs:word_2028F, ax
mov     ax, [bp+arg_6]
mov     cs:word_20291, ax
mov     al, [bp+arg_8]
mov     cs:byte_20293, al
call    sub_204E7
cmp     cs:word_1F5F1, 1
jz      short loc_204D5
mov     al, 0
out     0A6h, al        ; Interrupt Controller #2, 8259A
jmp     short loc_204D9

loc_204D5:
mov     al, 1
out     0A6h, al        ; Interrupt Controller #2, 8259A

loc_204D9:
pop     bp
pop     di
pop     si
pop     es
pop     ds
pop     bp
retf
sub_20499 endp

pop     bp
pop     di
pop     si
pop     es
pop     ds
pop     bp
retf



sub_204E7 proc near
push    ds
mov     ax, cs:word_2028D
shl     ax, 1
mov     cs:word_20294, 50h ; 'P'
sub     cs:word_20294, ax
mov     si, cs:word_20291
mov     di, cs:word_2028B
mov     bp, cs:word_2028F

loc_20509:
mov     cx, cs:word_2028D

loc_2050E:
call    sub_2052E
call    sub_20572
call    sub_20593
add     si, 2
add     di, 2
loop    loc_2050E
add     si, cs:word_20294
add     di, cs:word_20294
dec     bp
jnz     short loc_20509
pop     ds
retn
sub_204E7 endp




sub_2052E proc near
mov     al, 1
out     0A6h, al        ; Interrupt Controller #2, 8259A
mov     ax, 0A800h
mov     ds, ax
assume ds:nothing
mov     bx, [si]
mov     dl, cs:byte_20293
shr     dl, 1
jb      short loc_20544
not     bx

loc_20544:
mov     ax, 0B000h
mov     ds, ax
assume ds:nothing
mov     ax, [si]
shr     dl, 1
jb      short loc_20551
not     ax

loc_20551:
and     bx, ax
mov     ax, 0B800h
mov     ds, ax
assume ds:nothing
mov     ax, [si]
shr     dl, 1
jb      short loc_20560
not     ax

loc_20560:
and     bx, ax
mov     ax, 0E000h
mov     ds, ax
assume ds:nothing
mov     ax, [si]
shr     dl, 1
jb      short loc_2056F
not     ax

loc_2056F:
and     bx, ax
retn
sub_2052E endp




sub_20572 proc near
xor     al, al
out     0A6h, al        ; Interrupt Controller #2, 8259A
mov     ax, 0A800h
mov     ds, ax
assume ds:nothing
and     [di], bx
mov     ax, 0B000h
mov     ds, ax
assume ds:nothing
and     [di], bx
mov     ax, 0B800h
mov     ds, ax
assume ds:nothing
and     [di], bx
mov     ax, 0E000h
mov     ds, ax
assume ds:nothing
and     [di], bx
retn
sub_20572 endp




sub_20593 proc near
not     bx
mov     ax, 0A800h
mov     ds, ax
assume ds:nothing
mov     al, 1
out     0A6h, al        ; Interrupt Controller #2, 8259A
mov     dx, [si]
and     dx, bx
xor     al, al
out     0A6h, al        ; Interrupt Controller #2, 8259A
or      [di], dx
mov     ax, 0B000h
mov     ds, ax
assume ds:nothing
mov     al, 1
out     0A6h, al        ; Interrupt Controller #2, 8259A
mov     dx, [si]
and     dx, bx
xor     al, al
out     0A6h, al        ; Interrupt Controller #2, 8259A
or      [di], dx
mov     ax, 0B800h
mov     ds, ax
assume ds:nothing
mov     al, 1
out     0A6h, al        ; Interrupt Controller #2, 8259A
mov     dx, [si]
and     dx, bx
xor     al, al
out     0A6h, al        ; Interrupt Controller #2, 8259A
or      [di], dx
mov     ax, 0E000h
mov     ds, ax
assume ds:nothing
mov     al, 1
out     0A6h, al        ; Interrupt Controller #2, 8259A
mov     dx, [si]
and     dx, bx
xor     al, al
out     0A6h, al        ; Interrupt Controller #2, 8259A
or      [di], dx
retn
sub_20593 endp

push    bp
mov     bp, sp
push    ds
push    es
push    si
push    di
push    bp
mov     ax, [bp+6]
mov     cs:word_2028B, ax
mov     ax, [bp+8]
mov     cs:word_2028D, ax
mov     ax, [bp+0Ah]
mov     cs:word_2028F, ax
mov     ax, [bp+0Ch]
mov     cs:word_20291, ax
mov     al, [bp+0Eh]
mov     cs:byte_20293, al
call    sub_20617
pop     bp
pop     di
pop     si
pop     es
pop     ds
assume ds:dseg
pop     bp
retf



sub_20617 proc near
push    ds
mov     ax, cs:word_2028D
shl     ax, 1
mov     cs:word_20294, 50h ; 'P'
sub     cs:word_20294, ax
mov     si, cs:word_20291
mov     di, cs:word_2028B
mov     bp, cs:word_2028F

loc_20639:
mov     cx, cs:word_2028D

loc_2063E:
call    sub_2065E
call    sub_2069E
call    sub_206BB
add     si, 2
add     di, 2
loop    loc_2063E
add     si, cs:word_20294
add     di, cs:word_20294
dec     bp
jnz     short loc_20639
pop     ds
retn
sub_20617 endp




sub_2065E proc near
mov     ax, 0A800h
mov     ds, ax
assume ds:nothing
mov     bx, [si]
mov     dl, cs:byte_20293
shr     dl, 1
jb      short loc_20670
not     bx

loc_20670:
mov     ax, 0B000h
mov     ds, ax
assume ds:nothing
mov     ax, [si]
shr     dl, 1
jb      short loc_2067D
not     ax

loc_2067D:
and     bx, ax
mov     ax, 0B800h
mov     ds, ax
assume ds:nothing
mov     ax, [si]
shr     dl, 1
jb      short loc_2068C
not     ax

loc_2068C:
and     bx, ax
mov     ax, 0E000h
mov     ds, ax
assume ds:nothing
mov     ax, [si]
shr     dl, 1
jb      short loc_2069B
not     ax

loc_2069B:
and     bx, ax
retn
sub_2065E endp




sub_2069E proc near
mov     ax, 0A800h
mov     ds, ax
assume ds:nothing
and     [di], bx
mov     ax, 0B000h
mov     ds, ax
assume ds:nothing
and     [di], bx
mov     ax, 0B800h
mov     ds, ax
assume ds:nothing
and     [di], bx
mov     ax, 0E000h
mov     ds, ax
assume ds:nothing
and     [di], bx
retn
sub_2069E endp




sub_206BB proc near
not     bx
mov     ax, 0A800h
mov     ds, ax
assume ds:nothing
mov     dx, [si]
and     dx, bx
or      [di], dx
mov     ax, 0B000h
mov     ds, ax
assume ds:nothing
mov     dx, [si]
and     dx, bx
or      [di], dx
mov     ax, 0B800h
mov     ds, ax
assume ds:nothing
mov     dx, [si]
and     dx, bx
or      [di], dx
mov     ax, 0E000h
mov     ds, ax
assume ds:nothing
mov     dx, [si]
and     dx, bx
or      [di], dx
retn
sub_206BB endp

push    bp
mov     bp, sp
push    ds
push    es
push    si
push    di
push    bp
mov     ax, [bp+6]
mov     cs:word_20738, ax
mov     ax, [bp+8]
mov     cs:word_2073A, ax
mov     ax, [bp+0Ah]
mov     cs:word_2073C, ax
call    sub_2073E
pop     bp
pop     di
pop     si
pop     es
pop     ds
assume ds:dseg
pop     bp
retf


; Attributes: bp-based frame

sub_20711 proc far

arg_0= word ptr  6
arg_2= word ptr  8
arg_4= word ptr  0Ah

push    bp
mov     bp, sp
push    ds
push    es
push    si
push    di
push    bp
mov     ax, [bp+arg_0]
mov     cs:word_20738, ax
mov     ax, [bp+arg_2]
mov     cs:word_2073A, ax
mov     ax, [bp+arg_4]
mov     cs:word_2073C, ax
call    sub_20788
pop     bp
pop     di
pop     si
pop     es
pop     ds
pop     bp
retf
sub_20711 endp

word_20738 dw 0
word_2073A dw 28h
word_2073C dw 32h



sub_2073E proc near
push    ds
mov     ax, 0A800h
mov     ds, ax
assume ds:nothing
call    sub_20761
mov     ax, 0B000h
mov     ds, ax
assume ds:nothing
call    sub_20761
mov     ax, 0B800h
mov     ds, ax
assume ds:nothing
call    sub_20761
mov     ax, 0E000h
mov     ds, ax
assume ds:nothing
call    sub_20761
pop     ds
assume ds:dseg
retn
sub_2073E endp




sub_20761 proc near
mov     bp, cs:word_20738
mov     dx, cs:word_2073C

loc_2076B:
mov     cx, cs:word_2073A
dec     cx
mov     bx, bp
mov     al, [bx]
inc     bx
shr     al, 1

loc_20778:
rcr     byte ptr [bx], 1
inc     bx
loop    loc_20778
mov     bx, bp
rcr     byte ptr [bx], 1
add     bp, 50h ; 'P'
dec     dx
jnz     short loc_2076B
retn
sub_20761 endp




sub_20788 proc near
push    ds
mov     ax, cs:word_1F67E
mov     ds, ax
call    sub_207AF
mov     ax, cs:word_1F680
mov     ds, ax
call    sub_207AF
mov     ax, cs:word_1F684
mov     ds, ax
call    sub_207AF
mov     ax, cs:word_1F682
mov     ds, ax
call    sub_207AF
pop     ds
retn
sub_20788 endp




sub_207AF proc near
mov     bp, cs:word_20738
mov     dx, cs:word_2073C

loc_207B9:
mov     cx, cs:word_2073A
dec     cx
mov     bx, bp
mov     al, [bx]
inc     bx
shr     al, 1

loc_207C6:
rcr     byte ptr [bx], 1
inc     bx
loop    loc_207C6
mov     bx, bp
rcr     byte ptr [bx], 1
add     bp, 50h ; 'P'
dec     dx
jnz     short loc_207B9
retn
sub_207AF endp

align 10h
seg005 ends


; Segment type: Pure code
seg006 segment byte public 'CODE' use16
assume cs:seg006
assume es:nothing, ss:nothing, ds:dseg, fs:nothing, gs:nothing


; Attributes: bp-based frame

sub_207E0 proc far

arg_0= word ptr  6
arg_2= word ptr  8
arg_4= byte ptr  0Ah
arg_6= byte ptr  0Ch

push    bp
mov     bp, sp
mov     ax, [bp+arg_0]
mov     cs:word_2087B, ax
mov     ax, [bp+arg_2]
mov     cs:word_2087D, ax
mov     al, [bp+arg_4]
mov     cs:byte_2087F, al
mov     al, [bp+arg_6]
mov     cs:byte_20880, al
pop     bp
retf
sub_207E0 endp



; Attributes: bp-based frame

sub_20801 proc far

arg_0= word ptr  6
arg_2= word ptr  8
arg_4= byte ptr  0Ah
arg_6= dword ptr  0Ch

push    bp
mov     bp, sp
push    ds
push    es
push    si
push    di
push    bp
lds     ax, [bp+arg_6]
mov     cs:word_20872, ax
mov     ax, ds
mov     cs:word_20870, ax
mov     ax, [bp+arg_0]
mov     cs:word_20874, ax
mov     ax, [bp+arg_2]
mov     cs:word_20876, ax
mov     al, [bp+arg_4]
mov     cs:byte_20878, al
call    sub_20883
pop     bp
pop     di
pop     si
pop     es
pop     ds
pop     bp
retf
sub_20801 endp



; Attributes: bp-based frame

sub_20835 proc far

arg_0= word ptr  6
arg_2= word ptr  8
arg_4= byte ptr  0Ah
arg_6= dword ptr  0Ch
arg_A= word ptr  10h

push    bp
mov     bp, sp
push    ds
push    es
push    si
push    di
push    bp
lds     ax, [bp+arg_6]
mov     cs:word_20872, ax
mov     ax, ds
mov     cs:word_20870, ax
mov     ax, [bp+arg_0]
mov     cs:word_20874, ax
mov     ax, [bp+arg_2]
mov     cs:word_20876, ax
mov     al, [bp+arg_4]
mov     cs:byte_20878, al
mov     ax, [bp+arg_A]
mov     cs:word_20879, ax
call    sub_20915
pop     bp
pop     di
pop     si
pop     es
pop     ds
pop     bp
retf
sub_20835 endp

word_20870 dw 0
word_20872 dw 0
word_20874 dw 8
word_20876 dw 320h
byte_20878 db 0FDh
word_20879 dw 0
word_2087B dw 14h
word_2087D dw 0
byte_2087F db 0
byte_20880 db 0
word_20881 dw 0



sub_20883 proc near
mov     ax, cs:word_20870
mov     es, ax
mov     ds, ax
mov     di, cs:word_20872
mov     si, di
mov     ax, cs:word_20876
mov     bx, 50h ; 'P'
mul     bx
add     ax, cs:word_20874
mov     cs:word_20881, ax

loc_208A4:
lodsw
xchg    al, ah
cmp     ah, 0
jz      short locret_20914
cmp     ah, 0Ah
jnz     short loc_208CF
mov     ax, cs:word_20876
add     ax, cs:word_2087B
mov     cs:word_20876, ax
mov     bx, 50h ; 'P'
mul     bx
add     ax, cs:word_20874
mov     cs:word_20881, ax
dec     si
jmp     short loc_208A4

loc_208CF:
cmp     ah, 9
jnz     short loc_208D7
dec     si
jmp     short loc_208A4

loc_208D7:
cmp     ah, 20h ; ' '
jnz     short loc_208E4
inc     cs:word_20881
dec     si
jmp     short loc_208A4

loc_208E4:
call    sub_209D4
cmp     cs:byte_20880, 0
jnz     short loc_208F4
call    sub_209F8
jmp     short loc_208F7

loc_208F4:
call    sub_20AA6

loc_208F7:
add     cs:word_20881, 2
cmp     cs:byte_2087F, 0
jnz     short loc_20912
mov     cx, cs:word_2087D
cmp     cx, 0
jz      short loc_20912
call    sub_20BAE

loc_20912:
jmp     short loc_208A4

locret_20914:
retn
sub_20883 endp




sub_20915 proc near
mov     ax, cs:word_20870
mov     es, ax
mov     ds, ax
mov     di, cs:word_20872
mov     si, di
mov     ax, cs:word_20876
mov     bx, 50h ; 'P'
mul     bx
add     ax, cs:word_20874
mov     cs:word_20881, ax
mov     cx, 0
mov     al, 0
cld

loc_2093C:
scasb
jnz     short loc_2093C
inc     cx
cmp     cs:word_20879, cx
jnz     short loc_2093C
mov     si, di

loc_20949:
lodsb
or      al, al
jnz     short loc_20953
jmp     locret_209D3
jmp     short loc_209A5

loc_20953:
cmp     al, 1
jnz     short loc_20976
mov     ax, cs:word_20876
add     ax, cs:word_2087B
mov     cs:word_20876, ax
mov     bx, 50h ; 'P'
mul     bx
add     ax, cs:word_20874
mov     cs:word_20881, ax
jmp     short loc_20949
jmp     short loc_209A5

loc_20976:
cmp     al, 10h
jb      short loc_20984
cmp     al, 64h ; 'd'
ja      short loc_20984
mov     ah, 24h ; '$'
add     al, 10h
jmp     short loc_209A5

loc_20984:
cmp     al, 65h ; 'e'
jb      short loc_20992
cmp     al, 0BFh
ja      short loc_20992
mov     ah, 25h ; '%'
sub     al, 45h ; 'E'
jmp     short loc_209A5

loc_20992:
cmp     al, 0C0h
jb      short loc_209A0
cmp     al, 0CFh
ja      short loc_209A0
mov     ah, 21h ; '!'
sub     al, 0A0h
jmp     short loc_209A5

loc_209A0:
sub     al, 0B0h
mov     ah, al
lodsb

loc_209A5:
cmp     cs:byte_20880, 0
jnz     short loc_209B2
call    sub_209F8
jmp     short loc_209B5

loc_209B2:
call    sub_20AA6

loc_209B5:
add     cs:word_20881, 2
cmp     cs:byte_2087F, 0
jnz     short loc_209D0
mov     cx, cs:word_2087D
cmp     cx, 0
jz      short loc_209D0
call    sub_20BAE

loc_209D0:
jmp     loc_20949

locret_209D3:
retn
sub_20915 endp




sub_209D4 proc near
cmp     ah, 0A0h
jnb     short loc_209DE
sub     ah, 71h ; 'q'
jmp     short loc_209E1

loc_209DE:
sub     ah, 0B1h

loc_209E1:
shl     ah, 1
inc     ah
cmp     al, 80h ; '�'
jb      short loc_209EB
dec     al

loc_209EB:
cmp     al, 9Eh
jnb     short loc_209F3
sub     al, 1Fh
jmp     short locret_209F7

loc_209F3:
sub     al, 7Dh ; '}'
inc     ah

locret_209F7:
retn
sub_209D4 endp




sub_209F8 proc near
push    ds
push    es
push    si
push    di
mov     bl, cs:byte_20878
mov     dx, cs:word_20881
call    sub_20A12
mov     al, 0Ah
out     68h, al
pop     di
pop     si
pop     es
pop     ds
retn
sub_209F8 endp




sub_20A12 proc near
sub     ax, 2000h
push    ax
mov     al, 0Bh
out     68h, al
pop     ax
out     0A1h, al        ; Interrupt Controller #2, 8259A
xchg    ah, al
out     0A3h, al        ; Interrupt Controller #2, 8259A
mov     ax, 0A400h
mov     ds, ax
assume ds:nothing
mov     si, 0
mov     ax, 0A800h
call    sub_20A5A
mov     ax, 0B000h
call    sub_20A5A
mov     ax, 0B800h
call    sub_20A5A
mov     ax, 0E000h
call    sub_20A5A
mov     ax, 0A800h
call    sub_20A7C
mov     ax, 0B000h
call    sub_20A7C
mov     ax, 0B800h
call    sub_20A7C
mov     ax, 0E000h
call    sub_20A7C
retn
sub_20A12 endp




sub_20A5A proc near
mov     es, ax
mov     di, dx
mov     cx, 10h
cld
shr     bl, 1
jnb     short loc_20A70

loc_20A66:
lodsw
or      es:[di], ax
add     di, 50h ; 'P'
loop    loc_20A66
retn

loc_20A70:
lodsw
not     ax
and     es:[di], ax
add     di, 50h ; 'P'
loop    loc_20A70
retn
sub_20A5A endp




sub_20A7C proc near
mov     es, ax
mov     di, dx
mov     cx, 10h
cld
shr     bl, 1
jnb     short loc_20A96

loc_20A88:
lodsw
shl     ah, 1
rcl     al, 1
or      es:[di], ax
add     di, 50h ; 'P'
loop    loc_20A88
retn

loc_20A96:
lodsw
shl     ah, 1
rcl     al, 1
not     ax
and     es:[di], ax
add     di, 50h ; 'P'
loop    loc_20A96
retn
sub_20A7C endp




sub_20AA6 proc near
push    es
push    si
push    di
mov     bl, cs:byte_20878
mov     bp, cs:word_20881
call    sub_20ABA
pop     di
pop     si
pop     es
retn
sub_20AA6 endp




sub_20ABA proc near
pushf
cli
call    sub_20BC5
sub     ax, 2000h
push    ax
mov     al, 0Ah
out     68h, al
pop     ax
out     0A1h, al        ; Interrupt Controller #2, 8259A
xchg    ah, al
out     0A3h, al        ; Interrupt Controller #2, 8259A
call    sub_20B67
popf
mov     ax, 0A800h
call    sub_20B03
mov     ax, 0B000h
call    sub_20B03
mov     ax, 0B800h
call    sub_20B03
mov     ax, 0E000h
call    sub_20B03
mov     ax, 0A800h
call    sub_20B31
mov     ax, 0B000h
call    sub_20B31
mov     ax, 0B800h
call    sub_20B31
mov     ax, 0E000h
call    sub_20B31
retn
sub_20ABA endp




sub_20B03 proc near
mov     es, ax
mov     di, bp
mov     si, 3AEh
mov     cx, 10h
shr     bl, 1
jnb     short loc_20B20

loc_20B11:
mov     ax, cs:[si]
add     si, 2
or      es:[di], ax
add     di, 50h ; 'P'
loop    loc_20B11
retn

loc_20B20:
mov     ax, cs:[si]
add     si, 2
not     ax
and     es:[di], ax
add     di, 50h ; 'P'
loop    loc_20B20
retn
sub_20B03 endp




sub_20B31 proc near
mov     es, ax
mov     di, bp
mov     si, 3AEh
mov     cx, 10h
shr     bl, 1
jnb     short loc_20B52

loc_20B3F:
mov     ax, cs:[si]
add     si, 2
shl     ah, 1
rcl     al, 1
or      es:[di], ax
add     di, 50h ; 'P'
loop    loc_20B3F
retn

loc_20B52:
mov     ax, cs:[si]
add     si, 2
shl     ah, 1
rcl     al, 1
not     ax
and     es:[di], ax
add     di, 50h ; 'P'
loop    loc_20B52
retn
sub_20B31 endp




sub_20B67 proc near
mov     di, 3AEh
mov     bh, 20h ; ' '
mov     cx, 10h

loc_20B6F:
mov     al, bh
out     0A5h, al        ; Interrupt Controller #2, 8259A
in      al, 0A9h        ; Interrupt Controller #2, 8259A
mov     cs:[di], al
inc     di
and     bh, 0DFh
mov     al, bh
out     0A5h, al        ; Interrupt Controller #2, 8259A
in      al, 0A9h        ; Interrupt Controller #2, 8259A
mov     cs:[di], al
inc     di
or      bh, 20h
inc     bh
loop    loc_20B6F
retn
sub_20B67 endp

db 20h dup(0)



sub_20BAE proc near
push    ax

loc_20BAF:
jmp     short $+2

loc_20BB1:
jmp     short $+2

loc_20BB3:              ; PIC 2  same as 0020 for PIC 1
in      al, 0A0h
test    al, 20h
jnz     short loc_20BAF

loc_20BB9:              ; PIC 2  same as 0020 for PIC 1
in      al, 0A0h
test    al, 20h
jnz     short loc_20BC1
jmp     short loc_20BB9

loc_20BC1:
loop    loc_20BAF
pop     ax
retn
sub_20BAE endp




sub_20BC5 proc near
push    ax

loc_20BC6:
jmp     short $+2

loc_20BC8:
jmp     short $+2

loc_20BCA:              ; PIC 2  same as 0020 for PIC 1
in      al, 0A0h
test    al, 20h
jnz     short loc_20BC6

loc_20BD0:              ; PIC 2  same as 0020 for PIC 1
in      al, 0A0h
test    al, 20h
jnz     short loc_20BD8
jmp     short loc_20BD0

loc_20BD8:
pop     ax
retn
sub_20BC5 endp



; Attributes: bp-based frame

sub_20BDA proc far

arg_0= word ptr  6

push    bp
mov     bp, sp
mov     dx, [bp+arg_0]
inc     cs:word_20C04
mov     ax, cs:word_20C04
mov     bx, cs:word_20C06
add     ax, bx
mov     cs:word_20C04, bx
mov     cs:word_20C06, ax
and     ax, 0FFFh

loc_20BFC:
sub     ax, dx
jnb     short loc_20BFC
add     ax, dx
pop     bp
retf
sub_20BDA endp

word_20C04 dw 5858h
word_20C06 dw 5858h
word_20C08 dw 0
word_20C0A dw 0
byte_20C0C db 0FFh
db 80h dup(0), 9Ch, 50h, 53h, 0E4h, 43h
db 0A8h, 38h, 75h, 3Ch, 0B0h, 16h, 0E6h
db 43h, 0E4h, 41h, 2Eh, 8Ah, 26h, 2Ch, 4
db 2Eh, 0A2h, 2Ch, 4, 0A8h, 80h, 74h, 1Eh
db 2Eh, 0C6h, 6, 2Ch, 4, 0FFh, 24h, 7Fh
db 3Ah, 0C4h, 74h, 5, 2Eh, 88h, 26h, 2Ch
db 4, 0BBh, 2Dh, 4, 0B4h, 0, 3, 0D8h, 2Eh
db 0C6h, 7, 0, 0EBh, 0Bh, 0BBh, 2Dh, 4, 0B4h
db 0, 3, 0D8h, 2Eh, 0C6h, 7, 1, 0B0h, 20h
db 0E6h, 0, 5Bh, 58h, 9Dh, 0CFh



sub_20CDA proc far
mov     cs:byte_20C0C, 0FFh

loc_20CE0:
inc     cs:word_20C04
cmp     cs:byte_20C0C, 0FFh
jz      short loc_20CE0
xor     ax, ax
mov     al, cs:byte_20C0C
retf
sub_20CDA endp


loc_20CF4:
inc     cs:word_20C04
cmp     cs:byte_20C0C, 0FFh
jz      short loc_20CF4
xor     ax, ax
mov     al, cs:byte_20C0C
retf



sub_20D08 proc far
inc     cs:word_20C04
xor     ax, ax
mov     al, cs:byte_20C0C
test    al, 80h
jz      short locret_20D44
mov     dx, 5Fh ; '_'
mov     cx, 300h

loc_20D1D:
out     dx, al
loop    loc_20D1D
mov     al, cs:byte_20C0C
mov     bx, 42Dh
mov     al, 0

loc_20D29:
inc     bx
inc     al
cmp     al, 80h ; '�'
jz      short loc_20D3C
cmp     byte ptr cs:[bx], 1
jnz     short loc_20D29
mov     cs:byte_20C0C, al
jmp     short locret_20D44

loc_20D3C:
mov     cs:byte_20C0C, 0FFh
jmp     short $+2

locret_20D44:
retf
sub_20D08 endp




sub_20D45 proc far
mov     cs:byte_20C0C, 0FFh
retf
sub_20D45 endp




sub_20D4C proc far
cli
xor     ax, ax
mov     es, ax
assume es:nothing
mov     ax, es:24h
mov     cs:word_20C0A, ax
mov     ax, es:26h
mov     cs:word_20C08, ax
mov     ax, 4ADh
mov     es:24h, ax
mov     word ptr es:26h, cs
sti
retf
sub_20D4C endp




sub_20D6F proc far
cli
xor     ax, ax
mov     es, ax
mov     ax, cs:word_20C0A
mov     es:24h, ax
mov     ax, cs:word_20C08
mov     es:26h, ax
sti
mov     ah, 3
int     18h             ; TRANSFER TO ROM BASIC
                        ; causes transfer to ROM-based BASIC (IBM-PC)
                        ; often reboots a compatible; often has no effect at all
cli
in      al, 2           ; DMA controller, 8237A-5.
                        ; channel 1 current address
and     al, 0FDh
out     2, al           ; DMA controller, 8237A-5.
                        ; channel 1 base address
                        ; (also sets current address)
sti
retf
sub_20D6F endp

align 10h
seg006 ends


; Segment type: Pure code
seg007 segment byte public 'CODE' use16
assume cs:seg007
assume es:nothing, ss:nothing, ds:dseg, fs:nothing, gs:nothing


; Attributes: bp-based frame

sub_20DA0 proc far

arg_0= byte ptr  6

push    bp
mov     bp, sp
push    ax
push    bx
push    cx
push    dx
mov     al, [bp+arg_0]
mov     cs:byte_20FAA, al
cmp     cs:byte_20FAA, 0
jnz     short loc_20DCA
push    ds
push    dx
push    ax
mov     ax, cs
mov     ds, ax
assume ds:seg007
mov     dx, 17Bh
mov     ah, 9
int     21h             ; DOS - PRINT STRING
                        ; DS:DX -> string terminated by "$"
pop     ax
pop     dx
pop     ds
assume ds:dseg
jmp     loc_20E9C

loc_20DCA:
mov     cx, 100h

loc_20DCD:
mov     dx, 188h
in      al, dx
cmp     al, 0FFh
jnz     short loc_20DF1
loop    loc_20DCD
mov     cs:byte_20FAA, 0
push    ds
push    dx
push    ax
mov     ax, cs
mov     ds, ax
assume ds:seg007
mov     dx, 125h
mov     ah, 9
int     21h             ; DOS - PRINT STRING
                        ; DS:DX -> string terminated by "$"
pop     ax
pop     dx
pop     ds
assume ds:dseg
jmp     loc_20E9C

loc_20DF1:
cmp     cs:byte_20FAA, 2
jz      short loc_20E42
push    ds
push    dx
push    ax
mov     ax, cs
mov     ds, ax
assume ds:seg007
mov     dx, 102h
mov     ah, 9
int     21h             ; DOS - PRINT STRING
                        ; DS:DX -> string terminated by "$"
pop     ax
pop     dx
pop     ds
assume ds:dseg
cli
in      al, 0Ah         ; DMA controller, 8237A-5.
                        ; single mask bit register
                        ; 0-1: select channel (00=0; 01=1; 10=2; 11=3)
                        ; 2: 1=set mask for channel; 0=clear mask (enable)
mov     cs:byte_21750, al
push    es
mov     ah, 35h ; '5'
mov     al, 14h
int     21h             ; DOS - 2+ - GET INTERRUPT VECTOR
                        ; AL = interrupt number
                        ; Return: ES:BX = value of interrupt vector
mov     cs:word_2174C, bx
mov     cs:word_2174E, es
pop     es
push    ds
mov     ax, cs
mov     ds, ax
assume ds:seg007
mov     dx, 0A49h
mov     ah, 25h ; '%'
mov     al, 14h
int     21h             ; DOS - SET INTERRUPT VECTOR
                        ; AL = interrupt number
                        ; DS:DX = new vector to be used for specified interrupt
pop     ds
assume ds:dseg
in      al, 0Ah         ; DMA controller, 8237A-5.
                        ; single mask bit register
                        ; 0-1: select channel (00=0; 01=1; 10=2; 11=3)
                        ; 2: 1=set mask for channel; 0=clear mask (enable)
and     al, 0EFh
out     0Ah, al         ; DMA controller, 8237A-5.
                        ; single mask bit register
                        ; 0-1: select channel (00=0; 01=1; 10=2; 11=3)
                        ; 2: 1=set mask for channel; 0=clear mask (enable)
mov     al, 35h ; '5'
mov     cl, 27h ; '''
call    sub_21D10
sti
jmp     short loc_20E9C

loc_20E42:
push    ds
push    dx
push    ax
mov     ax, cs
mov     ds, ax
assume ds:seg007
mov     dx, 102h
mov     ah, 9
int     21h             ; DOS - PRINT STRING
                        ; DS:DX -> string terminated by "$"
pop     ax
pop     dx
pop     ds
assume ds:dseg
push    ds
push    dx
push    ax
mov     ax, cs
mov     ds, ax
assume ds:seg007
mov     dx, 14Ah
mov     ah, 9
int     21h             ; DOS - PRINT STRING
                        ; DS:DX -> string terminated by "$"
pop     ax
pop     dx
pop     ds
assume ds:dseg
cli
in      al, 2           ; DMA controller, 8237A-5.
                        ; channel 1 current address
mov     cs:byte_21750, al
push    es
mov     ah, 35h ; '5'
mov     al, 0Bh
int     21h             ; DOS - 2+ - GET INTERRUPT VECTOR
                        ; AL = interrupt number
                        ; Return: ES:BX = value of interrupt vector
mov     cs:word_21748, bx
mov     cs:word_2174A, es
pop     es
push    ds
mov     ax, cs
mov     ds, ax
assume ds:seg007
mov     dx, 0A49h
mov     ah, 25h ; '%'
mov     al, 0Bh
int     21h             ; DOS - SET INTERRUPT VECTOR
                        ; AL = interrupt number
                        ; DS:DX = new vector to be used for specified interrupt
pop     ds
assume ds:dseg
in      al, 2           ; DMA controller, 8237A-5.
                        ; channel 1 current address
and     al, 0F7h
out     2, al           ; DMA controller, 8237A-5.
                        ; channel 1 base address
                        ; (also sets current address)
mov     al, 35h ; '5'
mov     cl, 27h ; '''
call    sub_21D10
sti
jmp     short $+2

loc_20E9C:
pop     dx
pop     cx
pop     bx
pop     ax
pop     bp
retf
sub_20DA0 endp

or      ax, 810Ah
inc     ax
and     byte ptr [di-7Eh], 6Ch
mov     [bx+di-4674h], di
cmp     word ptr [bp+di-7Fh], 5Bh ; '['
sub     word ptr [bx+si-76h], 6Dh ; 'm'
xchg    ax, sp
inc     si
xor     byte ptr [di-237Eh], 82h
mov     ch, 82h
mov     bp, 4281h
or      ax, 240Ah
or      ax, 810Ah
inc     ax
and     byte ptr [di-7Eh], 6Ch
mov     [bx+di-4674h], di
cmp     word ptr [bp+di-7Fh], 5Bh ; '['
sub     word ptr [bx+si-7Eh], 0FFCDh
xchg    ax, cx
mov     dh, 8Dh
fld     qword ptr [bp+si-7D4Bh]
fadd    qword ptr [bp+si-7D47h]
icebp
add     word ptr [bp+si+0Dh], 240Ah
add     word ptr [bx+si-7Eh], 8265h
insb
mov     [bx+di-4674h], di
cmp     word ptr [bp+di-7Fh], 5Bh ; '['
sub     word ptr [bx+si-7Eh], 0FFCCh
mov     al, [si-177Eh]
lea     bx, [bp-227Eh]
xor     al, 82h
push    6D82h
xor     byte ptr [bp+di-7Eh], 4Fh
or      cl, 82h
mov     ch, 82h
fadd    qword ptr [bp+si-7E49h]
inc     dx
or      ax, 240Ah
or      ax, 810Ah
inc     ax
and     byte ptr [di-7Eh], 6Ch
mov     [bx+di-4674h], di
sub     word ptr [bx+si-7Dh], 0FF89h
add     word ptr [bp+di-7Dh], 6Fh ; 'o'
xor     al, 90h
fadd    dword ptr [bp+si-6818h]
mov     ds:0B582h, ax
sbb     ah, 82h
mov     bh, 81h
inc     dx
or      ax, 240Ah



sub_20F42 proc far
push    ax
push    bx
push    cx
push    dx
mov     cx, 100h

loc_20F49:
mov     dx, 188h
in      al, dx
cmp     al, 0FFh
jnz     short loc_20F55
loop    loc_20F49
jmp     short loc_20FA5

loc_20F55:
cmp     cs:byte_20FAA, 0
jz      short loc_20FA5
cmp     cs:byte_20FAA, 2
jz      short loc_20F85
push    cs
call    near ptr sub_21121
cli
push    ds
mov     dx, cs:word_2174C
mov     ds, cs:word_2174E
mov     ah, 25h ; '%'
mov     al, 14h
int     21h             ; DOS - SET INTERRUPT VECTOR
                        ; AL = interrupt number
                        ; DS:DX = new vector to be used for specified interrupt
pop     ds
mov     al, cs:byte_21750
out     0Ah, al         ; DMA controller, 8237A-5.
                        ; single mask bit register
                        ; 0-1: select channel (00=0; 01=1; 10=2; 11=3)
                        ; 2: 1=set mask for channel; 0=clear mask (enable)
sti
jmp     short loc_20FA5

loc_20F85:
push    cs
call    near ptr sub_21121
cli
push    ds
mov     dx, cs:word_21748
mov     ds, cs:word_2174A
mov     ah, 25h ; '%'
mov     al, 0Bh
int     21h             ; DOS - SET INTERRUPT VECTOR
                        ; AL = interrupt number
                        ; DS:DX = new vector to be used for specified interrupt
pop     ds
mov     al, cs:byte_21750
out     2, al           ; DMA controller, 8237A-5.
                        ; channel 1 base address
                        ; (also sets current address)
sti
jmp     short $+2

loc_20FA5:
pop     dx
pop     cx
pop     bx
pop     ax
retf
sub_20F42 endp

byte_20FAA db 0


; Attributes: bp-based frame

sub_20FAB proc far

arg_0= word ptr  6

push    bp
mov     bp, sp
push    ax
push    bx
push    ds
push    es
mov     bx, [bp+arg_0]
cmp     cs:byte_20FAA, 0
jnz     short loc_20FC0
jmp     loc_2111A

loc_20FC0:
mov     ax, cs
mov     ds, ax
assume ds:seg007
mov     es, ax
assume es:seg007
cli
cmp     bx, 1
jnz     short loc_20FFF
mov     bx, 438h
mov     word_216AC, bx
mov     bx, 474h
mov     word_216C5, bx
mov     bx, 4EEh
mov     word_216F7, bx
mov     bx, 1
mov     word_216F9, bx
mov     bx, 526h
mov     word_21712, bx
mov     bx, 1
mov     word_21714, bx
mov     bx, 8F0h
mov     byte ptr [bx], 1Bh
jmp     loc_2111A

loc_20FFF:
cmp     bx, 2
jnz     short loc_21037
mov     bx, 568h
mov     word_216AC, bx
mov     bx, 5CBh
mov     word_216C5, bx
mov     bx, 6A9h
mov     word_216F7, bx
mov     bx, 1
mov     word_216F9, bx
mov     bx, 70Ch
mov     word_21712, bx
mov     bx, 1
mov     word_21714, bx
mov     bx, 8F0h
mov     byte ptr [bx], 1Bh
jmp     loc_2111A

loc_21037:
cli
cmp     bx, 6
jnz     short loc_21054
mov     bx, 7EFh
mov     word_216DE, bx
mov     bx, 1
mov     word_216E0, bx
mov     bx, 8F0h
or      byte ptr [bx], 4
jmp     loc_2111A

loc_21054:
cli
cmp     bx, 7
jnz     short loc_21071
mov     bx, 7FFh
mov     word_216DE, bx
mov     bx, 1
mov     word_216E0, bx
mov     bx, 8F0h
or      byte ptr [bx], 4
jmp     loc_2111A

loc_21071:
cli
cmp     bx, 8
jnz     short loc_2108E
mov     bx, 810h
mov     word_216DE, bx
mov     bx, 1
mov     word_216E0, bx
mov     bx, 8F0h
or      byte ptr [bx], 4
jmp     loc_2111A

loc_2108E:
cli
cmp     bx, 9
jnz     short loc_210AA
mov     bx, 826h
mov     word_216DE, bx
mov     bx, 1
mov     word_216E0, bx
mov     bx, 8F0h
or      byte ptr [bx], 4
jmp     short loc_2111A

loc_210AA:
cli
cmp     bx, 0Ah
jnz     short loc_210C6
mov     bx, 833h
mov     word_216DE, bx
mov     bx, 1
mov     word_216E0, bx
mov     bx, 8F0h
or      byte ptr [bx], 4
jmp     short loc_2111A

loc_210C6:
cli
cmp     bx, 0Bh
jnz     short loc_210E2
mov     bx, 840h
mov     word_216DE, bx
mov     bx, 1
mov     word_216E0, bx
mov     bx, 8F0h
or      byte ptr [bx], 4
jmp     short loc_2111A

loc_210E2:
cli
cmp     bx, 0Ch
jnz     short loc_210FE
mov     bx, 7ECh
mov     word_216DE, bx
mov     bx, 1
mov     word_216E0, bx
mov     bx, 8F0h
or      byte ptr [bx], 4
jmp     short loc_2111A

loc_210FE:
cli
cmp     bx, 0Dh
jnz     short loc_2111A
mov     bx, 84Bh
mov     word_216DE, bx
mov     bx, 1
mov     word_216E0, bx
mov     bx, 8F0h
or      byte ptr [bx], 4
jmp     short $+2

loc_2111A:
pop     es
assume es:nothing
pop     ds
assume ds:dseg
pop     bx
pop     ax
sti
pop     bp
retf
sub_20FAB endp




sub_21121 proc far
push    ax
cmp     cs:byte_20FAA, 0
jz      short loc_21137
xor     al, al
mov     cs:byte_21692, al
mov     cs:byte_21693, al
call    sub_2114D

loc_21137:
pop     ax
retf
sub_21121 endp




sub_21139 proc far
push    ax
cmp     cs:byte_20FAA, 0
jz      short loc_2114B
mov     al, 14h
mov     cs:byte_21693, al
call    sub_2114D

loc_2114B:
pop     ax
retf
sub_21139 endp




sub_2114D proc near
mov     al, cs:byte_21690
or      al, 0
jz      short locret_21163
mov     cs:byte_21691, 80h ; '�'

loc_2115B:
mov     al, cs:byte_21690
or      al, 0
jnz     short loc_2115B

locret_21163:
retn
sub_2114D endp

db 6Ah, 11h, 8, 2, 1Ch, 28h, 2Dh, 0, 11h
db 0Dh, 11h, 0Dh, 5, 2, 2 dup(8), 2, 1, 2 dup(3)
db 0A8h, 2 dup(18h), 19h, 4 dup(0), 38h
db 0Ch, 1, 1Fh, 73h, 20h, 1Eh, 3Ah, 0, 2 dup(1Ch)
db 0DCh, 9Ch, 2 dup(0Ch), 3, 5, 3 dup(4)
db 7, 1Ah, 7, 0F6h, 27h, 4 dup(0), 3Ah, 7
db 1, 2 dup(0), 5, 3 dup(0), 4 dup(1Fh)
db 0, 15h, 0Fh, 11h, 2 dup(0), 0Ch, 2 dup(0Ah)
db 0FAh, 2 dup(0EFh), 4 dup(0), 3Ch, 1Eh
db 26h, 3Ah, 4, 23h, 7, 15h, 0, 1Dh, 13h
db 0Dh, 1Dh, 8 dup(0Bh), 3 dup(0FAh), 0FBh
db 2, 0, 2, 0, 3Eh, 70h, 82h, 71h, 7, 63h
db 0C4h, 3, 60h, 4, 58h, 40h, 58h, 30h, 54h
db 10h, 58h, 30h, 58h, 10h, 61h, 48h, 40h
db 62h, 58h, 40h, 58h, 30h, 54h, 10h, 58h
db 30h, 58h, 10h, 61h, 48h, 40h, 62h, 46h
db 20h, 4Eh, 20h, 4Ch, 20h, 54h, 10h, 52h
db 10h, 61h, 42h, 30h, 62h, 58h, 10h, 56h
db 20h, 54h, 20h, 6Ah, 3Fh, 4, 71h, 5, 63h
db 0E1h, 3, 60h, 3, 50h, 10h, 4Ch, 10h, 4Ah
db 8, 48h, 8, 6Eh, 10h, 46h, 8, 4Ah, 8, 4Ah
db 8, 4Eh, 8, 54h, 10h, 6Eh, 10h, 50h, 10h
db 4Ch, 10h, 4Ah, 8, 48h, 8, 6Eh, 10h, 62h
db 58h, 8, 54h, 8, 56h, 8, 58h, 8, 61h, 42h
db 10h, 6Eh, 10h, 50h, 10h, 4Ch, 10h, 4Ah
db 8, 48h, 8, 6Eh, 10h, 46h, 8, 4Ah, 8, 4Ah
db 8, 4Eh, 8, 54h, 10h, 6Eh, 10h, 50h, 10h
db 4Ch, 10h, 4Ah, 8, 48h, 8, 6Eh, 10h, 62h
db 58h, 8, 54h, 8, 56h, 8, 58h, 8, 61h, 42h
db 10h, 6Eh, 10h, 4Eh, 20h, 58h, 20h, 56h
db 20h, 61h, 46h, 10h, 42h, 10h, 4Ah, 30h
db 4Ah, 10h, 48h, 20h, 46h, 20h, 62h, 6Ah
db 79h, 4, 59h, 3Eh, 71h, 8, 63h, 62h, 5
db 60h, 4, 46h, 40h, 52h, 30h, 4Ah, 10h
db 46h, 30h, 46h, 10h, 4Eh, 40h, 46h, 40h
db 52h, 30h, 4Ah, 10h, 46h, 30h, 46h, 10h
db 4Eh, 40h, 46h, 20h, 4Eh, 20h, 4Ch, 20h
db 54h, 10h, 52h, 10h, 61h, 42h, 30h, 62h
db 58h, 10h, 56h, 20h, 54h, 20h, 6Ah, 0F5h
db 4, 59h, 3Dh, 71h, 8, 63h, 62h, 5, 60h
db 4, 58h, 40h, 58h, 30h, 54h, 10h, 58h
db 30h, 58h, 10h, 61h, 48h, 40h, 62h, 58h
db 40h, 58h, 30h, 54h, 10h, 58h, 30h, 58h
db 10h, 61h, 48h, 40h, 62h, 46h, 20h, 4Eh
db 20h, 4Ch, 20h, 54h, 10h, 52h, 10h, 61h
db 42h, 30h, 62h, 58h, 10h, 56h, 20h, 54h
db 20h, 6Ah, 2Dh, 5, 6 dup(0), 70h, 6Ch
db 71h, 7, 63h, 0C4h, 3, 60h, 4, 73h, 61h
db 46h, 30h, 72h, 46h, 20h, 4Ah, 10h, 50h
db 18h, 4Ch, 8, 4Ah, 8, 4Ch, 8, 46h, 20h
db 42h, 8, 62h, 58h, 8, 54h, 20h, 61h, 42h
db 10h, 62h, 58h, 18h, 54h, 8, 50h, 10h
db 54h, 30h, 41h, 54h, 20h, 6Eh, 10h, 73h
db 61h, 46h, 30h, 72h, 46h, 20h, 4Ah, 10h
db 50h, 18h, 4Ch, 8, 4Ah, 8, 4Ch, 8, 46h
db 20h, 42h, 8, 62h, 58h, 8, 54h, 20h, 61h
db 42h, 10h, 62h, 58h, 18h, 61h, 42h, 8
db 46h, 10h, 4Ah, 30h, 41h, 4Ah, 20h, 6Eh
db 10h, 6Ah, 6Fh, 5, 71h, 3, 63h, 0E1h, 3
db 60h, 4, 42h, 8, 46h, 8, 4Ch, 8, 54h, 8
db 4Ch, 8, 46h, 8, 62h, 58h, 8, 61h, 46h
db 8, 4Ch, 8, 50h, 8, 4Ch, 8, 46h
db 8, 42h, 8, 46h, 8, 4Ch, 8, 54h, 8, 4Ch
db 8, 46h, 8, 62h, 58h, 8, 61h, 46h, 8, 4Ch
db 8, 50h, 8, 4Ch, 8, 46h, 8, 62h, 54h, 8
db 61h, 42h, 8, 46h, 8, 4Ch, 8, 46h, 8, 42h
db 8, 62h, 50h, 8, 58h, 8, 61h, 46h, 8, 4Ch
db 8, 46h, 8, 62h, 58h, 8, 54h, 8, 58h, 8
db 61h, 44h, 8, 4Ah, 8, 42h, 8, 62h, 58h
db 8, 54h, 8, 58h, 8, 61h, 44h, 8, 4Ah, 8
db 54h, 10h, 42h, 8, 46h, 8, 4Ch, 8, 54h
db 8, 4Ch, 8, 46h, 8, 62h, 58h, 8, 61h, 46h
db 8, 4Ch, 8, 50h, 8, 4Ch, 8, 46h, 8, 42h
db 8, 46h, 8, 4Ch, 8, 54h, 8, 4Ch, 8, 46h
db 8, 62h, 58h, 8, 61h, 46h, 8, 4Ch, 8, 50h
db 8, 4Ch, 8, 46h, 8, 62h, 54h, 8, 61h, 42h
db 8, 46h, 8, 4Ch, 8, 46h, 8, 42h, 8, 62h
db 50h, 8, 58h, 8, 61h, 46h, 8, 4Ch, 8, 46h
db 8, 62h, 58h, 8, 54h, 8, 58h, 8, 61h, 44h
db 8, 4Ah, 8, 42h, 8, 62h, 58h, 8, 54h, 8
db 58h, 8, 61h, 44h, 8, 4Ah, 8, 54h, 10h
db 6Ah, 0D0h, 5, 59h, 3Eh, 71h, 8, 63h, 62h
db 5, 60h, 4, 73h, 61h, 46h, 30h, 72h, 46h
db 20h, 4Ah, 10h, 50h, 18h, 4Ch, 8, 4Ah
db 8, 4Ch, 8, 46h, 20h, 42h, 8, 62h, 58h
db 8, 54h, 20h, 61h, 42h, 10h, 62h, 58h
db 18h, 54h, 8, 50h, 10h, 54h, 30h, 41h
db 54h, 20h, 6Eh, 10h, 73h, 61h, 46h, 30h
db 72h, 46h, 20h, 4Ah, 10h, 50h, 18h, 4Ch
db 8, 4Ah, 8, 4Ch, 8, 46h, 20h, 42h, 8, 62h
db 58h, 8, 54h, 20h, 61h, 42h, 10h, 62h
db 58h, 18h, 61h, 42h, 8, 46h, 10h, 4Ah
db 30h, 41h, 4Ah, 20h, 6Eh, 10h, 6Ah, 0B0h
db 6, 59h, 3Dh, 71h, 5, 63h, 62h, 5, 60h
db 4, 42h, 8, 46h, 8, 4Ch, 8, 54h, 8, 4Ch
db 8, 46h, 8, 62h, 58h, 8, 61h, 46h, 8, 4Ch
db 8, 50h, 8, 4Ch, 8, 46h, 8, 42h, 8, 46h
db 8, 4Ch, 8, 54h, 8, 4Ch, 8, 46h, 8, 62h
db 58h, 8, 61h, 46h, 8, 4Ch, 8, 50h, 8, 4Ch
db 8, 46h, 8, 62h, 54h, 8, 61h, 42h, 8, 46h
db 8, 4Ch, 8, 46h, 8, 42h, 8, 62h, 50h, 8
db 58h, 8, 61h, 46h, 8, 4Ch, 8, 46h, 8, 62h
db 58h, 8, 54h, 8, 58h, 8, 61h, 44h, 8, 4Ah
db 8, 42h, 8, 62h, 58h, 8, 54h, 8, 58h, 8
db 61h, 44h, 8, 4Ah, 8, 54h, 10h, 42h, 8
db 46h, 8, 4Ch, 8, 54h, 8, 4Ch, 8, 46h, 8
db 62h, 58h, 8, 61h, 46h, 8, 4Ch, 8, 50h
db 8, 4Ch, 8, 46h, 8, 42h, 8, 46h, 8, 4Ch
db 8, 54h, 8, 4Ch, 8, 46h, 8, 62h, 58h, 8
db 61h, 46h, 8, 4Ch, 8, 50h, 8, 4Ch, 8, 46h
db 8, 62h, 54h, 8, 61h, 42h, 8, 46h, 8, 4Ch
db 8, 46h, 8, 42h, 8, 62h, 50h, 8, 58h, 8
db 61h, 46h, 8, 4Ch, 8, 46h, 8, 62h, 58h
db 8, 54h, 8, 58h, 8, 61h, 44h, 8, 4Ah, 8
db 42h, 8, 62h, 58h, 8, 54h, 8, 58h, 8, 61h
db 44h, 8, 4Ah, 8, 54h, 10h, 6Ah, 13h
db 7, 70h, 82h, 69h, 60h, 4, 71h, 0Ah, 63h
db 1Bh, 4, 60h, 4, 42h, 2, 46h, 2, 4Ah, 4
db 69h, 60h, 4, 71h, 0Ch, 63h, 0FEh, 3, 3 dup(62h)
db 42h, 4, 2 dup(61h), 42h, 10h, 69h, 60h
db 4, 71h, 0Ah, 63h, 0FEh, 3, 2 dup(62h)
db 42h, 4, 61h, 42h, 4, 61h, 42h, 4, 42h
db 4, 42h, 4, 69h, 60h, 4, 71h, 0Ah, 63h
db 0E1h, 3, 62h, 42h, 2, 46h, 2, 69h, 60h
db 4, 71h, 0Ah, 63h, 0E1h, 3, 62h, 42h, 2
db 4Ah, 2, 69h, 60h, 4, 71h, 0Ch, 63h, 0FEh
db 3, 62h, 42h, 10h, 69h, 60h, 4, 71h, 0Ah
db 63h, 0E1h, 3, 62h, 42h, 2, 46h, 2, 6Eh
db 8, 42h, 2, 46h, 2, 6Eh, 8, 71h, 9, 42h
db 2, 46h, 2, 6Eh, 8, 71h, 9, 42h, 2, 46h
db 2, 6Eh, 8, 71h, 8, 42h, 2, 46h, 2, 6Eh
db 8, 71h, 8, 42h, 2, 46h, 2, 6Eh, 8, 71h
db 7, 42h, 2, 46h, 2, 6Eh, 8, 71h, 7, 42h
db 2, 46h, 2, 6Eh, 8, 71h, 6, 42h, 2, 46h
db 2, 6Eh, 8, 71h, 6, 42h, 2, 46h, 2, 6Eh
db 8, 71h, 5, 42h, 2, 46h, 2, 6Eh, 8, 71h
db 5, 42h, 2, 46h, 2, 6Eh, 8, 71h, 4, 42h
db 2, 46h, 2, 6Eh, 8, 71h, 4, 42h, 2, 46h
db 2, 6Eh, 8, 71h, 3, 42h, 2, 46h, 2, 6Eh
db 8, 71h, 3, 42h, 2, 46h, 2, 6Eh, 8, 71h
db 2, 42h, 2, 46h, 2, 6Eh, 8, 71h, 2, 42h
db 2, 46h, 2, 6Eh, 8, 71h, 1, 42h, 2, 46h
db 2, 6Eh, 8, 71h, 1, 42h, 2, 46h, 2, 6Eh
db 8, 69h
byte_21690 db 0
byte_21691 db 0
byte_21692 db 0
byte_21693 db 0
db 2, 1, 3 dup(0), 0Fh, 5 dup(0), 1, 6, 4
db 4 dup(0), 0F0h, 8, 4 dup(0)
word_216AC dw 0
db 1, 4 dup(0), 80h, 4 dup(0), 8, 0Ah dup(0)
db 18h, 0C0h
word_216C5 dw 0
db 1, 4 dup(0), 80h, 4 dup(0), 8, 0Ah dup(0)
db 18h, 0C0h
word_216DE dw 0
word_216E0 dw 1
db 3 dup(0), 80h, 4 dup(0), 8, 0Ah dup(0)
db 18h, 0C0h
word_216F7 dw 0
word_216F9 dw 1
db 3 dup(0), 80h, 3 dup(0), 3Fh, 8, 0Ah dup(0)
db 2, 3 dup(0)
word_21712 dw 0
word_21714 dw 1
db 3 dup(0), 80h, 3 dup(0), 3Fh, 8, 0Ah dup(0)
db 2, 5 dup(0), 1, 4 dup(0), 80h, 3 dup(0)
db 3Fh, 8, 0Ah dup(0), 2, 3 dup(0)
word_21748 dw 0
word_2174A dw 0
word_2174C dw 0
word_2174E dw 0
byte_21750 db 0
db 6Ah, 2, 8Fh, 2, 0B6h, 2, 0DFh, 2, 0Bh
db 3, 39h, 3, 6Ah, 3, 9Eh, 3, 0D5h, 3, 10h
db 4, 4Eh, 4, 8Fh, 4, 0D0h, 1Dh, 24h, 1Ch
db 90h, 1Ah, 12h, 19h, 0AAh, 17h, 56h, 16h
db 14h, 15h, 0E6h, 13h, 0C8h, 12h, 0BAh
db 11h, 0BCh, 10h, 0CCh, 0Fh, 2 dup(0), 0DFh
db 0Ch, 0D3h, 0Ch, 0D9h, 0Ch, 35h, 0Ch, 45h
db 0Ch, 49h, 0Ch, 56h, 0Ch, 0E5h, 0Ch, 0EBh
db 0Ch, 0BBh, 0Ch, 0F1h, 0Ch, 0C4h, 0Ch
db 2Ah, 0Dh, 1Fh, 0Dh, 12h, 0Dh, 16h, 0Dh
db 24h, 0Dh, 76h, 13h, 0CDh, 0Ch, 0F3h, 0Bh
db 5, 0Ch, 0FCh, 0Bh, 0F8h, 0Bh, 2 dup(0)
db 0B8h, 0Eh, 0A6h, 0Eh, 0C1h, 0Eh, 9Dh
db 0Eh, 0DBh, 0Dh, 0D1h, 0Dh, 0D6h, 0Dh
db 88h, 0Eh, 91h, 0Eh, 97h, 0Eh, 55h, 0Eh
db 0E0h, 0Dh, 0E5h, 0Dh, 0BCh, 0Dh, 0EAh
db 0Dh, 0C4h, 0Dh, 0CAh, 0Eh, 16h, 0Eh, 9
db 0Eh, 0Dh, 0Eh, 1Ah, 0Eh, 76h, 13h, 0CCh
db 0Dh, 0B7h, 0Dh, 32h, 0Eh, 24h, 0Eh, 20h
db 0Eh, 50h, 53h, 51h, 52h, 56h, 57h, 1Eh
db 6, 9Ch, 0B8h
dw seg seg007
mov     ds, ax
mov     es, ax
mov     al, byte_22C31
or      al, al
jz      short loc_21820
mov     bx, 8F2h
ror     al, 1
jb      short loc_2180A
mov     bx, 8F3h

loc_2180A:
mov     al, byte_22C37
inc     al
cmp     al, [bx]
jb      short loc_2181D
mov     bx, 8F6h
inc     byte ptr [bx]
or      byte ptr [bx], 80h
xor     al, al

loc_2181D:
mov     byte_22C37, al

loc_21820:
mov     al, byte_22C30
mov     bx, 8F0h
mov     word_22C46, bx
mov     cl, 0
mov     di, 90Ch
call    sub_21896
mov     cl, 1
mov     di, 925h
call    sub_21896
mov     cl, 2
mov     di, 93Eh
call    sub_21896
mov     byte_22C3A, 1
mov     cl, 0
mov     di, 957h
call    sub_218FC
mov     cl, 1
mov     di, 972h
call    sub_218FC
mov     cl, 2
mov     di, 98Dh
call    sub_218FC
mov     ch, al
mov     byte_22C3A, 0
mov     bx, 8F6h
and     byte ptr [bx], 7Fh
mov     al, byte_22C35
dec     al
jnz     short loc_2187D
mov     al, byte_22C30
or      al, 0
jz      short loc_21880
mov     al, byte_22C34

loc_2187D:
mov     byte_22C35, al

loc_21880:
cli
mov     al, 15h
mov     cl, 27h ; '''
call    sub_21D10
sti
call    sub_2225B
popf
pop     es
pop     ds
pop     di
pop     si
pop     dx
pop     cx
pop     bx
pop     ax
iret



sub_21896 proc near
ror     al, 1
jnb     short locret_218FB
push    ax
call    sub_22053
jb      short loc_218FA
cmp     byte_22C35, 1
jnz     short loc_218EE
dec     byte ptr [di+2]
jnz     short loc_218EE
mov     bl, [di]
mov     bh, [di+1]
mov     al, [di+3]
sub     al, 1
jnb     short loc_218BD
call    sub_2196E
jmp     short loc_218FA

loc_218BD:
jnz     short loc_218CE
mov     byte ptr [di+2], 1
mov     [di+3], al
mov     al, [bx]
cmp     al, 41h ; 'A'
jnz     short loc_218F7
jmp     short loc_218FA

loc_218CE:
mov     [di+2], al
mov     byte ptr [di+3], 1
mov     al, [di+0Ch]
and     al, 30h
jz      short loc_218F3
or      byte ptr [di+0Ch], 40h
and     al, 20h
jz      short loc_218EE
mov     al, [di+8]
add     al, 0Fh
mov     dl, al
call    sub_22162

loc_218EE:
call    sub_21E10
jmp     short loc_218FA

loc_218F3:
or      byte ptr [di+0Ch], 80h

loc_218F7:
call    sub_21D99

loc_218FA:
pop     ax

locret_218FB:
retn
sub_21896 endp




sub_218FC proc near
ror     al, 1
jnb     short locret_2196D
push    ax
call    sub_2209E
jb      short loc_2196C
cmp     byte_22C35, 1
jnz     short loc_21960
dec     byte ptr [di+2]
jnz     short loc_21960
mov     al, [di+3]
or      al, al
jnz     short loc_2192E
mov     bx, [di]
mov     al, [bx]
inc     bx
mov     byte_22C3C, al
cmp     al, 41h ; 'A'
jz      short loc_21929
dec     bx
call    sub_21DA3

loc_21929:
call    sub_21B3C
jmp     short loc_2196C

loc_2192E:
mov     [di+2], al
mov     byte ptr [di+3], 0
mov     al, [di+0Ch]
and     al, 30h
jz      short loc_21965
or      byte ptr [di+0Ch], 40h
cmp     al, 10h
jz      short loc_21960
mov     byte ptr [di+19h], 0FFh
mov     byte ptr [di+15h], 0FFh
mov     dl, cl
add     cl, 8
mov     al, [di+1Ah]
sub     al, 5
jb      short loc_2195B
call    sub_21D50

loc_2195B:
mov     [di+1Ah], al
mov     cl, dl

loc_21960:
call    sub_21E66
jmp     short loc_2196C

loc_21965:
or      byte ptr [di+0Ch], 80h
call    sub_21DA3

loc_2196C:
pop     ax

locret_2196D:
retn
sub_218FC endp




sub_2196E proc near
mov     al, [bx]
inc     bx
mov     byte_22C3B, al
cmp     al, 41h ; 'A'
jnz     short loc_2197B
mov     al, [bx]
inc     bx

loc_2197B:
cmp     al, 5Ch ; '\'
jnb     short loc_21982
jmp     loc_21ACF

loc_21982:
mov     dx, 929h
xor     ah, ah
add     ax, ax
add     dx, ax
xchg    dx, bx
mov     ax, [bx]
xchg    dx, bx
jmp     ax
call    sub_22190
jmp     short sub_2196E
mov     al, 3
jmp     short loc_2199E
mov     al, 0FDh

loc_2199E:
add     al, [di+8]
jns     short loc_219B4
jmp     short sub_2196E
mov     al, [bx]
inc     bx
sub     al, byte_22C39
neg     al
mov     dl, al
rol     al, 1
add     al, dl

loc_219B4:
mov     dl, al
mov     [di+16h], al
mov     al, byte_22C31
or      al, al
jz      short loc_219CD
rol     al, 1
jb      short loc_219D3
cmp     byte_22C36, 0
jnz     short loc_219D3
mov     dl, 2Dh ; '-'

loc_219CD:
mov     [di+8], dl
call    sub_22162

loc_219D3:
jmp     short sub_2196E
mov     al, [bx]
inc     bx
dec     al
rol     al, 1
rol     al, 1
rol     al, 1
mov     [di+17h], al
jmp     short sub_2196E
mov     al, 8
jmp     short loc_219EB
mov     al, 38h ; '8'

loc_219EB:
add     al, [di+17h]
and     al, 38h
mov     [di+17h], al
jmp     sub_2196E
mov     dx, [bx]
add     bx, 2
add     cl, 30h ; '0'
mov     ch, 1Ch

loc_21A00:
xchg    di, dx
mov     al, [di]
xchg    di, dx
inc     dx
call    sub_21D2C
add     cl, 4
dec     ch
jnz     short loc_21A00
add     cl, 10h
xchg    di, dx
mov     al, [di]
xchg    di, dx
call    sub_21D2C
mov     [di+0Bh], al
rol     al, 1
rol     al, 1
and     al, 3
mov     [di+0Eh], al
jz      short loc_21A30
mov     al, byte_22C34
inc     al

loc_21A30:
mov     [di+10h], al
sub     cl, 0B0h
mov     dl, [di+8]
call    sub_22162
add     cl, 0B4h
mov     al, [di+18h]
and     al, 0C0h
mov     [di+18h], al
call    sub_21D2C
mov     cl, dh
mov     byte ptr [di+12h], 0
mov     byte ptr [di+0Ch], 8
mov     byte ptr [di+0Dh], 0
jmp     sub_2196E
mov     al, [bx]
inc     bx
mov     [di+0Ch], al
jmp     sub_2196E
mov     al, [bx]
inc     bx
mov     [di+7], al
jmp     sub_2196E
call    sub_221EA
jmp     sub_2196E
call    sub_221F5
jmp     sub_2196E
call    sub_22202
jmp     sub_2196E
call    sub_2220F
jmp     sub_2196E
call    sub_22232
jmp     sub_2196E
call    sub_22240
jmp     sub_2196E
mov     dx, [bx]
add     bx, 2
push    bx
mov     bx, word_22C46
test    byte ptr [bx], 4
jnz     short loc_21AAE
mov     [di+32h], dx
mov     byte ptr [di+34h], 1
mov     byte ptr [di+35h], 0
or      byte ptr [bx], 4

loc_21AAE:
pop     bx
jmp     sub_2196E
mov     al, 1
jmp     short loc_21AB9
mov     al, [bx]
inc     bx

loc_21AB9:
mov     [di+4], bx
mov     [di+6], al
mov     bx, [bx]
jmp     sub_2196E
call    sub_22249
jmp     sub_2196E
call    sub_21DCD
jmp     short locret_21B3B

loc_21ACF:
push    bx
mov     dh, 0
mov     dl, al
mov     ch, [di+17h]
mov     al, [di+0Dh]
add     al, dl
cmp     al, 42h ; 'B'
jb      short loc_21AF0
cmp     al, 59h ; 'Y'
mov     dl, al
jb      short loc_21AFA
sub     al, 18h
mov     dl, al
mov     al, ch
add     al, 8
jmp     short loc_21AF8

loc_21AF0:
add     al, 18h
mov     dl, al
mov     al, ch
sub     al, 8

loc_21AF8:
mov     ch, al

loc_21AFA:
mov     bx, 96Fh
add     bx, dx
mov     dl, [bx]
mov     [di+9], dl
inc     bx
mov     al, [bx]
or      al, ch
mov     [di+0Ah], al
mov     bh, al
mov     bl, dl
call    sub_21D71
mov     cl, dh
pop     bx
cmp     byte_22C3B, 41h ; 'A'
jz      short loc_21B2F
call    sub_21F42
mov     al, [di+13h]
and     al, 7Fh
call    sub_21F6F
mov     al, cl
add     al, 0F0h
call    sub_21D67

loc_21B2F:
call    sub_22122
jnz     short locret_21B3B
dec     byte ptr [di+2]
mov     byte ptr [di+3], 1

locret_21B3B:
retn
sub_2196E endp




sub_21B3C proc near
mov     al, [bx]
inc     bx
cmp     al, 59h ; 'Y'
jnb     short loc_21B46
jmp     loc_21C70

loc_21B46:
mov     dx, 961h
xor     ah, ah
add     al, al
add     dx, ax
xchg    dx, bx
mov     ax, [bx]
xchg    dx, bx
jmp     ax
call    sub_22190
jmp     short sub_21B3C
mov     al, [bx]
inc     bx
mov     [di+0Ch], al
jmp     short sub_21B3C
mov     al, [bx]
inc     bx
mov     [di+7], al
jmp     short sub_21B3C
call    sub_221EA
jmp     short sub_21B3C
call    sub_221F5
jmp     short sub_21B3C
call    sub_22202
jmp     short sub_21B3C
call    sub_2220F
jmp     short sub_21B3C
call    sub_22232
jmp     short sub_21B3C
call    sub_22240
jmp     short sub_21B3C
mov     dx, [bx]
add     bx, 2
push    bx
mov     bx, 8F0h
test    byte ptr [bx], 20h
jnz     short loc_21BA6
mov     word ptr aSavec4Dat+4, dx ; "C4.DAT"
mov     dx, 1
mov     word ptr aSavec4Dat+6, dx ; ".DAT"
or      byte ptr [bx], 20h

loc_21BA6:
pop     bx
jmp     short sub_21B3C
mov     al, 1
jmp     short loc_21BB0
mov     al, [bx]
inc     bx

loc_21BB0:
mov     [di+4], bx
mov     [di+6], al
mov     bx, [bx]
jmp     short sub_21B3C
call    sub_22249
jmp     sub_21B3C
mov     al, 0FFh
jmp     short loc_21BC6
mov     al, 1

loc_21BC6:
add     al, [di+8]
cmp     al, 10h
mov     dl, al
jb      short loc_21BD5
jmp     sub_21B3C
mov     dl, [bx]
inc     bx

loc_21BD5:
mov     [di+16h], dl
mov     al, byte_22C31
or      al, al
jz      short loc_21BEC
rol     al, 1
jb      short loc_21BF2
cmp     byte_22C36, 0
jnz     short loc_21BF2
mov     dl, 1

loc_21BEC:
mov     [di+8], dl
mov     [di+1Ah], dl

loc_21BF2:
jmp     sub_21B3C
mov     dx, [bx]
add     bx, 2
xchg    dx, bx
mov     al, [bx]
mov     [di+0Eh], al
inc     bx
mov     al, [bx]
mov     [di+10h], al
inc     bx
mov     al, [bx]
mov     [di+12h], al
inc     bx
mov     al, [bx]
mov     [di+14h], al
inc     bx
mov     al, [bx]
mov     [di+18h], al
inc     bx
mov     al, [bx]
xchg    dx, bx
mov     [di+0Ch], al
mov     byte ptr [di+0Dh], 0
jmp     sub_21B3C
mov     al, [bx]
inc     bx
mov     [di+17h], al
jmp     sub_21B3C
inc     byte ptr [di+17h]
jmp     sub_21B3C
dec     byte ptr [di+17h]
jmp     sub_21B3C
mov     al, [bx]
inc     bx
mov     [di+18h], al
jmp     sub_21B3C
mov     al, [bx]
inc     bx
mov     byte_22C3D, al
mov     dl, cl
mov     cl, 6
call    sub_21D50
mov     cl, dl
jmp     sub_21B3C
mov     al, [bx]
inc     bx
mov     [di+0Bh], al
jmp     sub_21B3C
mov     al, [bx]
inc     bx
mov     byte_22C3E, al
jmp     sub_21B3C
call    sub_21DF0
jmp     locret_21D0F

loc_21C70:
push    bx
mov     dh, 0
mov     dl, al
mov     ch, [di+17h]
mov     al, [di+0Dh]
add     al, dl
cmp     al, 42h ; 'B'
jb      short loc_21C8F
cmp     al, 59h ; 'Y'
mov     dl, al
jb      short loc_21C99
sub     al, 18h
mov     dl, al
inc     ch
jmp     short loc_21C99

loc_21C8F:
add     al, 18h
mov     dl, al
dec     ch
jnz     short loc_21C99
inc     ch

loc_21C99:
mov     bx, 987h
add     bx, dx
mov     dx, [bx]

loc_21CA0:
shr     dx, 1
dec     ch
jnz     short loc_21CA0
mov     [di+9], dx
mov     bl, cl
shl     cl, 1
mov     al, dl
call    sub_21D50
inc     cl
mov     al, dh
call    sub_21D50
cmp     byte_22C3C, 41h ; 'A'
jz      short loc_21D09
call    sub_21F42
mov     byte ptr [di+19h], 0
test    byte ptr [di+0Bh], 20h
jnz     short loc_21CD5
mov     al, byte_22C3D
mov     cl, 6
call    sub_21D50

loc_21CD5:
mov     al, 7
call    sub_21D8A
and     al, [di+0Bh]
mov     cl, 7
call    sub_21D50
mov     al, [di+8]
mov     [di+1Ah], al
mov     ch, al
mov     al, 8
add     al, bl
mov     cl, al
mov     al, [di+13h]
and     al, 7Fh
call    sub_21F7E
test    ch, 10h
jz      short loc_21D09
and     byte ptr [di+1Ah], 0EFh
mov     al, byte_22C3E
mov     cl, 0Dh
call    sub_21D50

loc_21D09:
mov     cl, bl
pop     bx
call    sub_22122

locret_21D0F:
retn
sub_21B3C endp




sub_21D10 proc near
push    dx
mov     ah, al
mov     dx, 188h

loc_21D16:
in      al, dx
test    al, 80h
jnz     short loc_21D16
mov     al, cl
out     dx, al
out     5Fh, al
out     5Fh, al
out     5Fh, al
mov     dx, 18Ah
mov     al, ah
out     dx, al
pop     dx
retn
sub_21D10 endp




sub_21D2C proc near
push    dx
mov     ah, al
mov     dx, 188h
add     dx, word_22C44

loc_21D36:
in      al, dx
test    al, 80h
jnz     short loc_21D36
mov     al, cl
out     dx, al
out     5Fh, al
out     5Fh, al
out     5Fh, al
mov     dx, 18Ah
add     dx, word_22C44
mov     al, ah
out     dx, al
pop     dx
retn
sub_21D2C endp




sub_21D50 proc near
push    dx
mov     ah, al
mov     dx, 188h
mov     al, cl
out     dx, al
out     5Fh, al
out     5Fh, al
out     5Fh, al
mov     dx, 18Ah
mov     al, ah
out     dx, al
pop     dx
retn
sub_21D50 endp




sub_21D67 proc near
mov     cl, 28h ; '('
add     al, byte_22C38
call    sub_21D10
retn
sub_21D67 endp




sub_21D71 proc near
mov     dh, cl
mov     al, 0A4h
add     al, dh
mov     cl, al
mov     al, bh
call    sub_21D2C
mov     al, 0A0h
add     al, dh
mov     cl, al
mov     al, bl
call    sub_21D2C
retn
sub_21D71 endp




sub_21D8A proc near
mov     dx, 188h
out     dx, al
out     5Fh, al
out     5Fh, al
out     5Fh, al
mov     dx, 18Ah
in      al, dx
retn
sub_21D8A endp




sub_21D99 proc near
mov     al, cl
mov     dl, cl
call    sub_21D67
mov     cl, dl
retn
sub_21D99 endp




sub_21DA3 proc near
mov     ch, cl
inc     ch
mov     al, 84h

loc_21DA9:
rol     al, 1
dec     ch
jnz     short loc_21DA9
mov     ch, al
mov     al, 7
call    sub_21D8A
or      al, ch
mov     ch, cl
mov     cl, 7
call    sub_21D50
mov     al, 8
add     al, ch
mov     cl, al
xor     al, al
call    sub_21D50
mov     cl, ch
retn
sub_21DA3 endp




sub_21DCD proc near
inc     cl
mov     al, 7Fh

loc_21DD1:
rol     al, 1
dec     cl
jnz     short loc_21DD1
mov     bx, word_22C46
and     al, [bx]
mov     [bx], al
mov     byte ptr [di+18h], 0C0h
mov     byte ptr [di+2], 1
mov     byte ptr [di+3], 0
mov     byte ptr [di+6], 0
retn
sub_21DCD endp




sub_21DF0 proc near
mov     ch, cl
inc     ch
mov     al, 0FBh

loc_21DF6:
rol     al, 1
dec     ch
jnz     short loc_21DF6
and     byte_22C30, al
call    sub_21DA3
mov     byte ptr [di+2], 1
mov     byte ptr [di+3], 0
mov     byte ptr [di+6], 0
retn
sub_21DF0 endp




sub_21E10 proc near
mov     al, [di+0Ch]
rol     al, 1
jb      short locret_21E65
rol     al, 1
jb      short loc_21E21
rol     al, 1
rol     al, 1
jb      short locret_21E65

loc_21E21:
call    sub_21F8B
jb      short loc_21E40
call    sub_21FA1
call    sub_2200F
xor     al, bh
and     al, 8
jz      short loc_21E3B
or      byte ptr [di+0Ch], 80h
call    sub_21D99
jmp     short locret_21E65

loc_21E3B:
call    sub_21D71
mov     cl, dh

loc_21E40:
mov     al, [di+0Ch]
test    al, 40h
jnz     short loc_21E4B
and     al, 30h
jnz     short locret_21E65

loc_21E4B:
mov     al, [di+12h]
and     al, 0BFh
jz      short locret_21E65
mov     ch, al
inc     byte ptr [di+15h]
mov     al, [di+15h]
cmp     al, [di+14h]
jb      short locret_21E65
call    sub_22020
call    sub_21F67

locret_21E65:
retn
sub_21E10 endp




sub_21E66 proc near
mov     al, [di+0Ch]
rol     al, 1
jnb     short loc_21E70
jmp     locret_21F41

loc_21E70:
rol     al, 1
jb      short loc_21E7D
and     al, 0C0h
cmp     al, 0C0h
jnz     short loc_21E7D
jmp     locret_21F41

loc_21E7D:
call    sub_21F8B
jb      short loc_21ED5
call    sub_21FA1
test    byte ptr [di+0Bh], 20h
jnz     short loc_21EB1
mov     al, byte_22C3D
test    byte ptr [di+0Eh], 80h
jz      short loc_21E99
mov     al, 6
call    sub_21D8A

loc_21E99:
sub     al, dl
cmp     al, 20h ; ' '
jb      short loc_21EA6
mov     al, 40h ; '@'
xor     [di+0Fh], al
jmp     short loc_21ED5

loc_21EA6:
mov     ch, cl
mov     cl, 6
call    sub_21D50
mov     cl, ch
jmp     short loc_21ED5

loc_21EB1:
call    sub_2200F
mov     al, bh
and     al, 0F0h
jz      short loc_21EC3
or      byte ptr [di+0Ch], 80h
call    sub_21DA3
jmp     short locret_21F41

loc_21EC3:
mov     dl, cl
shl     cl, 1
mov     al, bl
call    sub_21D50
inc     cl
mov     al, bh
call    sub_21D50
mov     cl, dl

loc_21ED5:
mov     bl, cl
add     cl, 8
mov     al, [di+0Ch]
test    al, 40h
jnz     short loc_21EE5
and     al, 20h
jnz     short loc_21EFF

loc_21EE5:
mov     al, [di+12h]
and     al, 0BFh
jz      short loc_21EFF
mov     ch, al
inc     byte ptr [di+15h]
mov     al, [di+15h]
cmp     al, [di+14h]
jb      short loc_21EFF
call    sub_22020
call    sub_21F7E

loc_21EFF:
mov     al, [di+18h]
mov     ch, al
or      al, al
jz      short loc_21F3F
mov     al, [di+0Ch]
test    al, 40h
jnz     short loc_21F13
and     al, 30h
jnz     short loc_21F3F

loc_21F13:
inc     byte ptr [di+19h]
mov     al, ch
cmp     al, [di+19h]
jnz     short loc_21F3F
mov     byte ptr [di+19h], 0
mov     al, [di+1Ah]
dec     al
jnz     short loc_21F2E
or      byte ptr [di+0Ch], 80h
jmp     short loc_21F3F

loc_21F2E:
mov     [di+1Ah], al
mov     ch, al
mov     al, [di+12h]
or      al, al
mov     al, ch
jnz     short loc_21F3F
call    sub_21D50

loc_21F3F:
mov     cl, bl

locret_21F41:
retn
sub_21E66 endp




sub_21F42 proc near
test    byte ptr [di+0Ch], 8
jz      short loc_21F4E
test    byte ptr [di+12h], 40h
jnz     short loc_21F56

loc_21F4E:
mov     byte ptr [di+13h], 0
mov     byte ptr [di+15h], 0

loc_21F56:
mov     byte ptr [di+0Fh], 0C0h
mov     byte ptr [di+11h], 0
and     byte ptr [di+0Ch], 7Fh
and     byte ptr [di+0Ch], 0BFh
retn
sub_21F42 endp




sub_21F67 proc near
test    byte ptr [di+0Ch], 20h
jz      short sub_21F6F
add     al, 5
sub_21F67 endp




sub_21F6F proc near
mov     dl, al
add     al, al
add     al, dl
add     al, [di+8]
mov     dl, al
call    sub_22162
retn
sub_21F6F endp




sub_21F7E proc near
neg     al
add     al, [di+1Ah]
jns     short loc_21F87
xor     al, al

loc_21F87:
call    sub_21D50
retn
sub_21F7E endp




sub_21F8B proc near
mov     al, [di+0Eh]
mov     dl, al
and     al, 3Fh
stc
jz      short locret_21FA0
mov     ch, al
inc     byte ptr [di+11h]
mov     al, [di+11h]
cmp     al, [di+10h]

locret_21FA0:
retn
sub_21F8B endp




sub_21FA1 proc near
mov     dh, 0
mov     [di+11h], dh
mov     al, dl
rol     al, 1
jnb     short loc_21FC1
mov     dl, ch
cmp     byte_22C3A, 0
jnz     short loc_21FBB
rol     al, 1
jb      short loc_21FF6
jmp     short locret_2200E

loc_21FBB:
rol     al, 1
jnb     short loc_21FF6
jmp     short locret_2200E

loc_21FC1:
rol     al, 1
jb      short loc_22002
mov     al, [di+0Fh]
mov     bh, al
and     al, 3Fh
mov     dl, al
mov     bl, 0C0h
jz      short loc_21FD8
cmp     al, ch
jnz     short loc_21FDE
mov     bl, 40h ; '@'

loc_21FD8:
mov     al, bh
xor     al, bl
mov     bh, al

loc_21FDE:
test    bh, 40h
jz      short loc_21FE7
dec     dl
dec     dl

loc_21FE7:
inc     dl
mov     al, bh
and     al, 0C0h
or      al, dl
mov     [di+0Fh], al
rol     al, 1
jnb     short locret_2200E

loc_21FF6:
mov     al, dl
neg     al
jz      short locret_2200E
mov     dl, al
dec     dh
jmp     short locret_2200E

loc_22002:
mov     dl, ch
mov     al, [di+0Fh]
xor     al, 0C0h
mov     [di+0Fh], al
jz      short loc_21FF6

locret_2200E:
retn
sub_21FA1 endp




sub_2200F proc near
mov     bx, [di+9]
mov     al, bh
add     bx, dx
test    byte ptr [di+0Eh], 80h
jz      short locret_2201F
mov     [di+9], bx

locret_2201F:
retn
sub_2200F endp




sub_22020 proc near
mov     byte ptr [di+15h], 0
mov     dh, ch
and     dh, 7Fh
shl     ch, 1
jb      short loc_2202F
mov     ch, 2

loc_2202F:
shr     ch, 1
mov     al, [di+13h]
mov     dl, al
and     al, 7Fh
add     al, ch
test    dl, 80h
jz      short loc_22047
sub     al, ch
sub     al, ch
jnz     short loc_2204B
jmp     short loc_2204D

loc_22047:
cmp     al, dh
jnz     short loc_2204D

loc_2204B:
or      al, 80h

loc_2204D:
mov     [di+13h], al
and     al, 7Fh
retn
sub_22020 endp




sub_22053 proc near
test    byte_22C36, 80h
jz      short locret_2209D
cmp     byte_22C31, 1
jz      short loc_22076
mov     al, [di+8]
add     al, 3
cmp     al, 2Dh ; '-'
jb      short loc_2208C
call    sub_21D99
call    sub_21DCD
call    sub_220FD
stc
jmp     short locret_2209D

loc_22076:
mov     al, byte_22C36
and     al, 0Fh
jnz     short loc_22082
call    sub_2210D
jmp     short loc_2209B

loc_22082:
mov     al, [di+8]
cmp     al, [di+16h]
jz      short locret_2209D
sub     al, 3

loc_2208C:
mov     dl, al
mov     [di+8], dl
mov     al, [di+12h]
or      al, al
jnz     short locret_2209D
call    sub_22162

loc_2209B:
xor     al, al

locret_2209D:
retn
sub_22053 endp




sub_2209E proc near
test    byte_22C36, 80h
jz      short locret_220FC
cmp     byte_22C31, 1
jz      short loc_220C9
mov     al, [di+8]
sub     al, 1
jbe     short loc_220C0
mov     [di+8], al
cmp     al, [di+1Ah]
jnb     short loc_220E5
mov     [di+1Ah], al
jmp     short loc_220E5

loc_220C0:
call    sub_21DF0
call    sub_220FD
stc
jmp     short locret_220FC

loc_220C9:
mov     al, byte_22C36
and     al, 0Fh
jnz     short loc_220D5
call    sub_2210D
jmp     short loc_220FA

loc_220D5:
mov     al, [di+8]
cmp     al, [di+16h]
jnb     short loc_220FA
inc     al
mov     [di+8], al
inc     byte ptr [di+1Ah]

loc_220E5:
mov     al, [di+12h]
or      al, [di+18h]
jnz     short loc_220FA
mov     dl, cl
add     cl, 8
mov     al, [di+8]
call    sub_21D50
mov     cl, dl

loc_220FA:
xor     al, al

locret_220FC:
retn
sub_2209E endp




sub_220FD proc near
mov     al, byte_22C30
or      al, 0
jnz     short locret_2210C
mov     byte_22C35, 1
call    sub_2210D

locret_2210C:
retn
sub_220FD endp




sub_2210D proc near
xor     al, al
mov     byte_22C31, al
mov     byte_22C36, al
retn
sub_2210D endp

or      byte ptr [di+0Ch], 80h
and     byte ptr [di+0Ch], 0BFh
call    sub_22122
retn



sub_22122 proc near
mov     dh, [di+7]
mov     al, [bx]
cmp     al, 41h ; 'A'
jnb     short loc_22132
rol     al, 1
add     al, [bx]
mov     dh, al
inc     bx

loc_22132:
mov     [di], bx
mov     al, [di+0Ch]
and     al, 7
jz      short loc_2215E
mov     ch, al
mov     al, dh
mov     dl, 0
shr     dx, 1
shr     dx, 1
shr     dx, 1
mov     bx, 0

loc_2214A:
add     bx, dx
dec     ch
jnz     short loc_2214A
cmp     bh, 0
jnz     short loc_22157
inc     bh

loc_22157:
sub     al, bh
mov     [di+3], al
mov     dh, bh

loc_2215E:
mov     [di+2], dh
retn
sub_22122 endp




sub_22162 proc near
mov     dh, cl
mov     al, [di+0Bh]
and     al, 7
cmp     al, 4
jb      short loc_22182
jz      short loc_2217D
cmp     al, 7
jb      short loc_22178
mov     al, 40h ; '@'
call    sub_22184

loc_22178:
mov     al, 44h ; 'D'
call    sub_22184

loc_2217D:
mov     al, 48h ; 'H'
call    sub_22184

loc_22182:
mov     al, 4Ch ; 'L'
sub_22162 endp




sub_22184 proc near
add     al, dh
mov     cl, al
mov     al, dl
call    sub_21D2C
mov     cl, dh
retn
sub_22184 endp




sub_22190 proc near
push    cx
mov     ch, 0
mov     cl, [bx]
inc     bx
push    bx
mov     bx, 43D1h
mov     dx, 0FFFFh

loc_2219D:
sub     bx, cx
inc     dx
jnb     short loc_2219D
xchg    dx, bx
mov     ch, 4
cmp     cl, 29h ; ')'
jb      short loc_221B8
add     bx, bx
mov     ch, 2
cmp     cl, 76h ; 'v'
jb      short loc_221B8
add     bx, bx
dec     ch

loc_221B8:
mov     dx, 400h
xchg    dx, bx
sub     bx, dx
mov     al, bl
mov     cl, 25h ; '%'
call    sub_21D10
rcr     bh, 1
rcr     al, 1
rcr     bh, 1
rcr     al, 1
dec     cl
call    sub_21D10
mov     byte_22C34, ch
cmp     byte_22C39, 0Fh
jnz     short loc_221E7
mov     al, ch
add     al, al
add     al, ch
mov     byte_22C41, al

loc_221E7:
pop     bx
pop     cx
retn
sub_22190 endp




sub_221EA proc near
mov     al, [bx]
add     al, al
add     al, [bx]
mov     [di+7], al
inc     bx
retn
sub_221EA endp




sub_221F5 proc near
mov     al, [bx]
inc     bx
mov     [di+0Eh], al
mov     al, [bx]
inc     bx
mov     [di+10h], al
retn
sub_221F5 endp




sub_22202 proc near
mov     al, [bx]
inc     bx
mov     [di+12h], al
mov     al, [bx]
inc     bx
mov     [di+14h], al
retn
sub_22202 endp




sub_2220F proc near
mov     dx, [bx]
mov     word ptr dword_22C48, dx
add     bx, 2
mov     dx, [bx]
mov     word ptr dword_22C48+2, dx
add     bx, 2
push    di
push    si
push    ds
push    es
push    bx
push    cx
call    dword_22C48
pop     cx
pop     bx
pop     es
pop     ds
pop     si
pop     di
retn
sub_2220F endp




sub_22232 proc near
mov     dl, cl
mov     cl, [bx]
inc     bx
mov     al, [bx]
inc     bx
call    sub_21D2C
mov     cl, dl
retn
sub_22232 endp




sub_22240 proc near
mov     al, [bx]
inc     bx
add     al, al
mov     [di+0Dh], al
retn
sub_22240 endp




sub_22249 proc near
mov     bx, [di+4]
dec     byte ptr [di+6]
jnz     short loc_22258
add     bx, 2
mov     [di], bx
jmp     short locret_2225A

loc_22258:
mov     bx, [bx]

locret_2225A:
retn
sub_22249 endp




sub_2225B proc near
mov     al, 0Bh
out     0, al
jmp     short $+2

loc_22261:
jmp     short $+2

loc_22263:
jmp     short $+2

loc_22265:
in      al, 0
and     al, 80h
jz      short loc_2227F
mov     al, 20h ; ' '
out     8, al           ; DMA 8237A-5. cmd reg bits:
                        ; 0: enable mem-to-mem DMA
                        ; 1: enable Ch0 address hold
                        ; 2: disable controller
                        ; 3: compressed timing mode
                        ; 4: enable rotating priority
                        ; 5: extended write mode; 0=late write
                        ; 6: DRQ sensing - active high
                        ; 7: DACK sensing - active high
mov     al, 0Bh
out     8, al           ; DMA 8237A-5. cmd reg bits:
                        ; 0: enable mem-to-mem DMA
                        ; 1: enable Ch0 address hold
                        ; 2: disable controller
                        ; 3: compressed timing mode
                        ; 4: enable rotating priority
                        ; 5: extended write mode; 0=late write
                        ; 6: DRQ sensing - active high
                        ; 7: DACK sensing - active high
jmp     short $+2

loc_22275:
jmp     short $+2

loc_22277:
jmp     short $+2

loc_22279:              ; DMA 8237A-5. status register bits:
in      al, 8           ; 0-3: channel 0-3 has reached terminal count
                        ; 4-7: channel 0-3 has a request pending
and     al, al
jnz     short locret_22283

loc_2227F:
mov     al, 20h ; ' '
out     0, al

locret_22283:
retn
sub_2225B endp

align 10h
seg007 ends


; Segment type: Regular
seg008 segment byte public 'UNK' use16
assume cs:seg008
assume es:nothing, ss:nothing, ds:dseg, fs:nothing, gs:nothing
word_22290 dw 0
word_22292 dw 0
word_22294 dw 0
; void far *word_22296
word_22296 dw 0
word_22298 dw 0
; void far *word_2229A
word_2229A dw 0
word_2229C dw 0
; void far *word_2229E
word_2229E dw 0
word_222A0 dw 0
; void *dword_222A2
dword_222A2 dd 0
word_222A6 dw 0
; void far *word_222A8
word_222A8 dw 0
word_222AA dw 0
word_222AC dw 0
db    0
byte_222AF db 0
byte_222B0 db 0
byte_222B1 db 0
byte_222B2 db 0
byte_222B3 db 0
byte_222B4 db 0
byte_222B5 db 0
byte_222B6 db 0
byte_222B7 db 0
byte_222B8 db 0
byte_222B9 db 0
byte_222BA db 0
byte_222BB db 0
byte_222BC db 0
byte_222BD db 0
byte_222BE db 0
byte_222BF db 0
byte_222C0 db 0
byte_222C1 db 0
byte_222C2 db 0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
byte_222E7 db 0
byte_222E8 db 0
byte_222E9 db 0
byte_222EA db 0
byte_222EB db 0
byte_222EC db 0
byte_222ED db 0
byte_222EE db 0
byte_222EF db 0
byte_222F0 db 0
byte_222F1 db 0
byte_222F2 db 0
byte_222F3 db 0
byte_222F4 db 0
byte_222F5 db 0
byte_222F6 db 0
byte_222F7 db 0
byte_222F8 db 0
byte_222F9 db 0
byte_222FA db 0
byte_222FB db 0
byte_222FC db 0
byte_222FD db 0
byte_222FE db 0
byte_222FF db 0
byte_22300 db 0
byte_22301 db 0
byte_22302 db 0
byte_22303 db 0
byte_22304 db 0
byte_22305 db 0
byte_22306 db 0
byte_22307 db 0
byte_22308 db 0
byte_22309 db 0
byte_2230A db 0
byte_2230B db 0
byte_2230C db 0
byte_2230D db 0
byte_2230E db 0
byte_2230F db 0
byte_22310 db 0
byte_22311 db 0
byte_22312 db 0
byte_22313 db 0
byte_22314 db 0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
word_22326 dw 0
word_22328 dw 0
word_2232A dw 0
word_2232C dw 0
word_2232E dw 0
word_22330 dw 0
word_22332 dw 0
align 10h
seg008 ends


; Segment type: Pure data
dseg segment para public 'DATA' use16
assume cs:dseg
db    0
db    0
word_22342 dw 0
db    0
db    0
unk_22346 db    0
db    0
db  4Dh ; M
db  53h ; S
db  20h
db  52h ; R
db  75h ; u
db  6Eh ; n
db  2Dh ; -
db  54h ; T
db  69h ; i
db  6Dh ; m
db  65h ; e
db  20h
db  4Ch ; L
db  69h ; i
db  62h ; b
db  72h ; r
db  61h ; a
db  72h ; r
db  79h ; y
db  20h
db  2Dh ; -
db  20h
db  43h ; C
db  6Fh ; o
db  70h ; p
db  79h ; y
db  72h ; r
db  69h ; i
db  67h ; g
db  68h ; h
db  74h ; t
db  20h
db  28h ; (
db  63h ; c
db  29h ; )
db  20h
db  31h ; 1
db  39h ; 9
db  39h ; 9
db  30h ; 0
db  2Ch ; ,
db  20h
db  4Dh ; M
db  69h ; i
db  63h ; c
db  72h ; r
db  6Fh ; o
db  73h ; s
db  6Fh ; o
db  66h ; f
db  74h ; t
db  20h
db  43h ; C
db  6Fh ; o
db  72h ; r
db  70h ; p
db  18h
db    0
aLcgP58 db 'LCG.P58',0
unk_2238A db    0
aGroundP58 db 'GROUND.P58',0
aObjectP58 db 'OBJECT.P58',0
aItemP58 db 'ITEM.P58',0
aWeaponP58 db 'WEAPON.P58',0
aPlayer1P58 db 'PLAYER1.P58',0
aPlayer2P58 db 'PLAYER2.P58',0
aMonsterP58 db 'MONSTER.P58',0
aPictureP58 db 'PICTURE.P58',0
unk_223E5 db    0
unk_223E6 db  20h
db  82h
db  66h ; f
db  83h
db  58h ; X
db  83h
db  89h
db  83h
db  43h ; C
db  83h
db  80h ; �
db    0
unk_223F2 db  20h
db  82h
db  71h ; q
db  83h
db  58h ; X
db  83h
db  89h
db  83h
db  43h ; C
db  83h
db  80h ; �
db    0
unk_223FE db  81h
db  40h ; @
db  20h
db  83h
db  6Fh ; o
db  83h
db  62h ; b
db  83h
db  67h ; g
db    0
unk_22408 db  81h
db  40h ; @
db  81h
db  40h ; @
db  91h
db  6Dh ; m
db  97h
db 0B5h
db    0
unk_22411 db  83h
db  58h ; X
db  83h
db  50h ; P
db  83h
db  8Bh
db  83h
db  67h ; g
db  83h
db  93h
db  82h
db  62h ; b
db    0
unk_2241E db  83h
db  58h ; X
db  83h
db  50h ; P
db  83h
db  8Bh
db  83h
db  67h ; g
db  83h
db  93h
db  82h
db  61h ; a
db    0
unk_2242B db  81h
db  40h ; @
db  20h
db  96h
db 0E5h
db  94h
db 0D4h
db  82h
db  62h ; b
db    0
unk_22435 db  83h
db  58h ; X
db  83h
db  50h ; P
db  83h
db  8Bh
db  83h
db  67h ; g
db  83h
db  93h
db  82h
db  60h ; `
db    0
unk_22442 db  20h
db  82h
db  61h ; a
db  83h
db  58h ; X
db  83h
db  89h
db  83h
db  43h ; C
db  83h
db  80h ; �
db    0
unk_2244E db  81h
db  40h ; @
db  91h
db 0E5h
db  83h
db  6Fh ; o
db  83h
db  62h ; b
db  83h
db  67h ; g
db    0
unk_22459 db  81h
db  40h ; @
db  8Fh
db 0E3h
db  8Bh
db  89h
db  91h
db  6Dh ; m
db  97h
db 0B5h
db    0
unk_22464 db  81h
db  40h ; @
db  83h
db  5Dh ; ]
db  83h
db  93h
db  83h
db  72h ; r
db    0
unk_2246D db  83h
db  5Dh ; ]
db  83h
db  93h
db  83h
db  72h ; r
db  83h
db  69h ; i
db  83h
db  43h ; C
db  83h
db  67h ; g
db    0
unk_2247A db  81h
db  40h ; @
db  20h
db  83h
db  8Dh
db  83h
db  62h ; b
db  83h
db  4Eh ; N
db    0
unk_22484 db  20h
db  83h
db  6Fh ; o
db  83h
db  93h
db  83h
db  70h ; p
db  83h
db  43h ; C
db  83h
db  41h ; A
db    0
unk_22490 db  81h
db  40h ; @
db  20h
db  96h
db 0E5h
db  94h
db 0D4h
db  82h
db  61h ; a
db    0
unk_2249A db  81h
db  40h ; @
db  20h
db  91h
db 0E5h
db  83h
db  5Fh ; _
db  83h
db  52h ; R
db    0
unk_224A4 db  81h
db  40h ; @
db  83h
db  68h ; h
db  83h
db  89h
db  83h
db  53h ; S
db  83h
db  93h
db    0
unk_224AF db  81h
db  40h ; @
db  20h
db  8Bh
db 0E0h
db  8Bh
db  52h ; R
db  8Eh
db  6Dh ; m
db    0
unk_224B9 db  81h
db  40h ; @
db  81h
db  40h ; @
db  8Bh
db  52h ; R
db  8Eh
db  6Dh ; m
db    0
unk_224C2 db  81h
db  40h ; @
db  81h
db  40h ; @
db  8Ch
db  95h
db  8Eh
db  6Dh ; m
db    0
unk_224CB db  81h
db  40h ; @
db  81h
db  40h ; @
db  95h
db 0BAh
db  8Eh
db  6Dh ; m
db    0
unk_224D4 db  81h
db  40h ; @
db  8Eh
db  80h ; �
db  97h
db 0ECh
db  95h
db 0BAh
db  8Eh
db  6Dh ; m
db    0
unk_224DF db  83h
db  58h ; X
db  83h
db  89h
db  83h
db  43h ; C
db  83h
db  80h ; �
db  83h
db  7Dh ; }
db  83h
db  93h
db    0
unk_224EC db  91h
db 0E5h
db  96h
db  82h
db  93h
db 0B1h
db  8Eh
db  74h ; t
db    0
unk_224F5 db  96h
db  82h
db  93h
db 0B1h
db  8Eh
db  74h ; t
db  83h
db  5Bh ; [
db  83h
db  6Dh ; m
db    0
unk_22500 db  96h
db  82h
db  93h
db 0B1h
db  8Eh
db  74h ; t
db    0
unk_22507 db  8Bh
db  7Ah ; z
db  8Ch
db  8Ch
db  83h
db  52h ; R
db  83h
db  45h ; E
db  83h
unk_22510 db  82h
db  83h
db  8Ah
db    0
unk_22514 db  82h
db  6Ah ; j
db  83h
db  58h ; X
db  83h
db  89h
db  83h
db  43h ; C
db  83h
db  80h ; �
db    0
unk_2251F db  96h
db  82h
db  8Fh
db  70h ; p
db  8Eh
db  6Dh ; m
db  82h
db  60h ; `
db    0
unk_22528 db  96h
db  82h
db  8Fh
db  70h ; p
db  8Eh
db  6Dh ; m
db  82h
db  61h ; a
db    0
unk_22531 db  8Dh
db  95h
db  8Bh
db  52h ; R
db  8Eh
db  6Dh ; m
db    0
unk_22538 db  96h
db 0E5h
db  94h
db 0D4h
db  82h
db  60h ; `
db    0
db  0Ah
db  20h
db  57h ; W
db  41h ; A
db  52h ; R
db  4Eh ; N
db  49h ; I
db  4Eh ; N
db  47h ; G
db  20h
db  21h ; !
db  21h ; !
db  21h ; !
db  20h
db 0BCh
db 0DEh
db 0B2h
db 0BBh
db 0DDh
db  20h
db 0CAh
db 0DEh
db 0DDh
db 0BAh
db 0DEh
db 0B3h
db  20h
db 0B6h
db 0DEh
db 0D0h
db 0C2h
db 0B6h
db 0D8h
db 0CFh
db 0BEh
db 0DDh
db  20h
db  21h ; !
db  21h ; !
db  21h ; !
db    0
db  82h
db 0E0h
db  82h
db 0A4h
db  81h
db  41h ; A
db  98h
db  62h ; b
db  82h
db 0CDh
db  8Fh
db  49h ; I
db  82h
db 0EDh
db  82h
db 0E8h
db  82h
db 0B6h
db  82h
db 0E1h
db  81h
db  42h ; B
db    0
db    0
dd aLcgP58              ; "LCG.P58"
word_22584 dw 0
dd unk_2238A
db 0FFh
db 0FFh
dd aGroundP58           ; "GROUND.P58"
word_22590 dw 0
dd aObjectP58           ; "OBJECT.P58"
db  40h ; @
db  1Fh
dd aItemP58             ; "ITEM.P58"
db  50h ; P
db  46h ; F
dd aWeaponP58           ; "WEAPON.P58"
db 0B4h
db  5Fh ; _
dd aPlayer1P58          ; "PLAYER1.P58"
db    0
db  7Dh ; }
dd aPlayer2P58          ; "PLAYER2.P58"
db  90h
db  7Eh ; ~
dd aMonsterP58          ; "MONSTER.P58"
db 0D0h
db  84h
dd aPictureP58          ; "PICTURE.P58"
db 0F4h
db 0FBh
dd unk_223E5
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  12h
db    9
db    1
db    0
db    1
db    0
db  90h
db    1
db    1
db    0
db    2
db    0
db  8Fh
db    2
db    1
db    0
db    3
db    0
db  6Dh ; m
db    3
db    2
db    0
db    4
db    0
db  64h ; d
db    4
db    5
db    0
db    5
db    0
db  7Dh ; }
db    5
db    3
db    0
db    6
db    0
word_225EA dw 0
db    3
db    0
db    7
db    0
db    0
db    0
db    4
db    0
db    8
db    0
db  91h
db    0
db    4
db    0
db    9
db    0
db  91h
db    0
db    4
db    0
db  0Ah
db    0
db  91h
db    0
db    5
db    0
db  0Bh
db    0
db  9Fh
db    6
db    5
db    0
db  0Ch
db    0
db  7Dh ; }
db    7
db    3
db    0
db  0Dh
db    0
db  21h ; !
db    8
db    3
db    0
db  0Eh
db    0
db 0D6h
db    9
db    5
db    0
db  0Fh
db    0
db  40h ; @
db  1Fh
db    7
db    0
db  10h
db    0
db  65h ; e
db  20h
db    5
db    0
db  11h
db    0
db 0D1h
db  21h ; !
db    7
db    0
db  12h
db    0
db 0F0h
db  22h ; "
db    7
db    0
db  13h
db    0
db  14h
db  24h ; $
db    7
db    0
db  14h
db    0
db  6Fh ; o
db  25h ; %
db    7
db    0
db  15h
db    0
db 0CFh
db  26h ; &
db    7
db    0
db  16h
db    0
db  46h ; F
db  28h ; (
db    7
db    0
db  17h
db    0
db 0AEh
db  29h ; )
db    7
db    0
db  18h
db    0
db 0B9h
db  2Ah ; *
db    7
db    0
db  19h
db    0
db 0C8h
db  2Bh ; +
db    7
db    0
db  1Ah
db    0
db  42h ; B
db  2Dh ; -
db    7
db    0
db  1Bh
db    0
db 0CCh
db  2Eh ; .
db    7
db    0
db  1Ch
db    0
db  5Fh ; _
db  30h ; 0
db    5
db    0
db  1Dh
db    0
db  50h ; P
db  46h ; F
db    5
db    0
db  1Eh
db    0
db  31h ; 1
db  47h ; G
db    5
db    0
db  1Fh
db    0
db  13h
db  48h ; H
db    5
db    0
db  20h
db    0
db  23h ; #
db  49h ; I
db    5
db    0
db  20h
db    0
db  1Ah
db  4Ah ; J
db    5
db    0
db  22h ; "
db    0
db  19h
db  4Bh ; K
db    5
db    0
db  23h ; #
db    0
db 0E2h
db  4Bh ; K
db    6
db    0
db  24h ; $
db    0
db 0BFh
db  4Ch ; L
db    6
db    0
db  25h ; %
db    0
db 0EAh
db  4Dh ; M
db    6
db    0
db  26h ; &
db    0
db  20h
db  4Fh ; O
db    5
db    0
db  27h ; '
db    0
db  58h ; X
db  50h ; P
db    5
db    0
db  28h ; (
db    0
db  70h ; p
db  51h ; Q
db    6
db    0
db  29h ; )
db    0
db 0B1h
db  52h ; R
db    5
db    0
db  2Ah ; *
db    0
db 0DCh
db  53h ; S
db    6
db    0
db  2Bh ; +
db    0
db 0D5h
db  54h ; T
db    6
db    0
db  2Ch ; ,
db    0
db 0FDh
db  55h ; U
db    6
db    0
db  2Dh ; -
db    0
db  37h ; 7
db  57h ; W
db    5
db    0
db  2Eh ; .
db    0
db  69h ; i
db  58h ; X
db    5
db    0
db  2Fh ; /
db    0
db  8Fh
db  59h ; Y
db    5
db    0
db  30h ; 0
db    0
db  7Ch ; |
db  5Ah ; Z
db    6
db    0
db  31h ; 1
db    0
db  97h
db  5Bh ; [
db    5
db    0
db  32h ; 2
db    0
db 0CEh
db  5Ch ; \
db    5
db    0
db  33h ; 3
db    0
db 0B4h
db  5Fh ; _
db    5
db    0
db  34h ; 4
db    0
db 0A9h
db  60h ; `
db    5
db    0
db  35h ; 5
db    0
db 0AEh
db  61h ; a
db    5
db    0
db  36h ; 6
db    0
db 0ADh
db  62h ; b
db    5
db    0
db  37h ; 7
db    0
db 0A3h
db  63h ; c
db    5
db    0
db  38h ; 8
db    0
db 0DEh
db  64h ; d
db    5
db    0
db  39h ; 9
db    0
db 0EFh
db  65h ; e
db    5
db    0
db  3Ah ; :
db    0
db  0Bh
db  67h ; g
db    5
db    0
db  3Bh ; ;
db    0
db  4Ah ; J
db  68h ; h
db    5
db    0
db  3Ch ; <
db    0
db 0E9h
db  69h ; i
db    8
db    0
db  3Dh ; =
db    0
db 0D0h
db  84h
db    9
db    0
db  3Eh ; >
db    0
db  58h ; X
db  85h
db    8
db    0
db  3Fh ; ?
db    0
db 0E3h
db  85h
db    9
db    0
db  40h ; @
db    0
db  9Ah
db  86h
db    8
db    0
db  41h ; A
db    0
db  59h ; Y
db  87h
db    9
db    0
db  42h ; B
db    0
db  35h ; 5
db  88h
db    8
db    0
db  43h ; C
db    0
db  17h
db  89h
db    9
db    0
db  44h ; D
db    0
db 0DDh
db  89h
db    8
db    0
db  45h ; E
db    0
db  87h
db  8Ah
db    9
db    0
db  46h ; F
db    0
db 0F1h
db  8Bh
db    8
db    0
db  47h ; G
db    0
db  4Fh ; O
db  8Dh
db    9
db    0
db  48h ; H
db    0
db  81h
db  8Eh
db    8
db    0
db  49h ; I
db    0
db 0AAh
db  8Fh
db    9
db    0
db  4Ah ; J
db    0
db  14h
db  91h
db    8
db    0
db  4Bh ; K
db    0
db  86h
db  92h
db    9
db    0
db  4Ch ; L
db    0
db  0Eh
db  94h
db    8
db    0
db  4Dh ; M
db    0
db  9Ah
db  95h
db    9
db    0
db  4Eh ; N
db    0
db 0C1h
db  96h
db    8
db    0
db  4Fh ; O
db    0
db 0E1h
db  97h
db    9
db    0
db  50h ; P
db    0
db  38h ; 8
db  99h
db    8
db    0
db  51h ; Q
db    0
db  93h
db  9Ah
db    9
db    0
db  52h ; R
db    0
db 0F3h
db  9Bh
db    8
db    0
db  53h ; S
db    0
db  55h ; U
db  9Dh
db    9
db    0
db  54h ; T
db    0
db  84h
db  9Eh
db  0Ah
db    0
db  55h ; U
db    0
db 0A7h
db  9Fh
db  0Bh
db    0
db  56h ; V
db    0
db  50h ; P
db 0A1h
db  0Ah
db    0
db  57h ; W
db    0
db 0D3h
db 0A2h
db  0Bh
db    0
db  58h ; X
db    0
db  87h
db 0A4h
db  0Ah
db    0
db  59h ; Y
db    0
db  2Ch ; ,
db 0A6h
db  0Bh
db    0
db  5Ah ; Z
db    0
db  54h ; T
db 0A7h
db  0Ah
db    0
db  5Bh ; [
db    0
db  51h ; Q
db 0F4h
db  0Bh
db    0
db  5Ch ; \
db    0
db 0D7h
db 0F5h
db  0Ah
db    0
db  5Dh ; ]
db    0
db  56h ; V
db 0ABh
db  0Bh
db    0
db  5Eh ; ^
db    0
db  8Bh
db 0ACh
db    8
db    0
db  5Fh ; _
db    0
db 0D7h
db 0ADh
db    9
db    0
db  60h ; `
db    0
db 0F5h
db 0AEh
db    7
db    0
db  61h ; a
db    0
db  11h
db 0B0h
db    7
db    0
db  62h ; b
db    0
db  0Ch
db 0B1h
db    7
db    0
db  63h ; c
db    0
db  70h ; p
db 0B1h
db    7
db    0
db  64h ; d
db    0
db  32h ; 2
db 0B2h
db    7
db    0
db  65h ; e
db    0
db 0E4h
db 0B2h
db    7
db    0
db  66h ; f
db    0
db  1Bh
db 0B3h
db    7
db    0
db  67h ; g
db    0
db 0B4h
db 0B3h
db  0Ah
db    0
db  68h ; h
db    0
db 0AAh
db 0B4h
db    7
db    0
db  69h ; i
db    0
db 0CAh
db 0B5h
db    7
db    0
db  6Ah ; j
db    0
db 0C8h
db 0B6h
db    7
db    0
db  6Bh ; k
db    0
db  9Ah
db 0B7h
db    7
db    0
db  6Ch ; l
db    0
db    3
db 0B8h
db    7
db    0
db  6Dh ; m
db    0
db 0C7h
db 0B8h
db    7
db    0
db  6Eh ; n
db    0
db  76h ; v
db 0B9h
db    7
db    0
db  6Fh ; o
db    0
db 0ADh
db 0B9h
db    7
db    0
db  70h ; p
db    0
db  42h ; B
db 0BAh
db  0Bh
db    0
db  71h ; q
db    0
db  32h ; 2
db 0BBh
db    7
db    0
db  72h ; r
db    0
db  5Bh ; [
db 0BCh
db    7
db    0
db  73h ; s
db    0
db  4Ah ; J
db 0BDh
db    7
db    0
db  74h ; t
db    0
db  37h ; 7
db 0BEh
db    7
db    0
db  75h ; u
db    0
db  48h ; H
db 0BFh
db    7
db    0
db  76h ; v
db    0
db  30h ; 0
db 0C0h
db    7
db    0
db  77h ; w
db    0
db  1Dh
db 0C1h
db    7
db    0
db  78h ; x
db    0
db  37h ; 7
db 0C2h
db    7
db    0
db  79h ; y
db    0
db  1Eh
db 0C3h
db  0Ah
db    0
db  7Ah ; z
db    0
db  3Bh ; ;
db 0C4h
db    7
db    0
db  7Bh ; {
db    0
db 0BFh
db 0C5h
db    7
db    0
db  7Ch ; |
db    0
db 0D1h
db 0C6h
db    7
db    0
db  7Dh ; }
db    0
db 0DCh
db 0C7h
db    7
db    0
db  7Eh ; ~
db    0
db 0EEh
db 0C8h
db    7
db    0
db  7Fh ; 
db    0
db 0F8h
db 0C9h
db    7
db    0
db  80h ; �
db    0
db 0E9h
db 0CAh
db    7
db    0
db  81h
db    0
db  16h
db 0CCh
db    7
db    0
db  82h
db    0
db 0FAh
db 0CCh
db  0Bh
db    0
db  83h
db    0
db 0EDh
db 0CDh
db    7
db    0
db  84h
db    0
db  5Fh ; _
db 0CFh
db  0Ah
db    0
db  85h
db    0
db  5Ch ; \
db 0D0h
db  0Bh
db    0
db  86h
db    0
db 0FCh
db 0D1h
db  0Ah
db    0
db  87h
db    0
db  97h
db 0D3h
db  0Bh
db    0
db  88h
db    0
db  21h ; !
db 0D5h
db  0Ah
db    0
db  89h
db    0
db 0A4h
db 0D6h
db  0Ah
db    0
db  8Ah
db    0
db  2Ch ; ,
db 0D8h
db    8
db    0
db  8Bh
db    0
db 0B8h
db 0D9h
db    8
db    0
db  8Ch
db    0
db  26h ; &
db 0DBh
db    8
db    0
db  8Dh
db    0
db  93h
db 0DCh
db    8
db    0
db  8Eh
db    0
db    4
db 0DEh
db    8
db    0
db  8Fh
db    0
db  75h ; u
db 0DFh
db    8
db    0
db  90h
db    0
db 0C5h
db 0E0h
db  0Ah
db    0
db  91h
db    0
db  5Bh ; [
db 0F7h
db  0Ah
db    0
db  92h
db    0
db 0E5h
db 0F8h
db  0Ah
db    0
db  93h
db    0
db 0DAh
db 0E4h
db  0Ah
db    0
db  94h
db    0
db 0E3h
db 0E5h
db    8
db    0
db  95h
db    0
db 0EFh
db 0E6h
db    8
db    0
db  96h
db    0
db 0E8h
db 0E7h
db  0Ah
db    0
db  97h
db    0
db 0E4h
db 0E8h
db  0Ah
db    0
db  98h
db    0
db  3Ch ; <
db 0EAh
db  0Ah
db    0
db  99h
db    0
db  9Ah
db 0EBh
db  0Ah
db    0
db  9Ah
db    0
db  18h
db 0EDh
db    8
db    0
db  9Bh
db    0
db  88h
db 0EEh
db    8
db    0
db  9Ch
db    0
db 0FFh
db 0EFh
db  0Ah
db    0
db  9Dh
db    0
db  6Bh ; k
db 0F1h
db  0Ah
db    0
db  9Eh
db    0
db 0DFh
db 0F2h
db  3Dh ; =
db    0
db  23h ; #
db    0
db  12h
db    0
db    1
db    0
db    1
db    0
dd unk_223E6
db  3Fh ; ?
db    0
db  2Dh ; -
db    0
db  14h
db    0
db    2
db    0
db    2
db    0
dd unk_223F2
db  43h ; C
db    0
db  23h ; #
db    0
db  26h ; &
db    0
db    3
db    0
db    3
db    0
dd unk_223FE
db  45h ; E
db    0
db  3Ch ; <
db    0
db  20h
db    0
db    8
db    0
db    5
db    0
dd unk_22408
db  4Dh ; M
db    0
db  32h ; 2
db    0
db  2Ah ; *
db    0
db    6
db    0
db    6
db    0
dd unk_22411
db  4Fh ; O
db    0
db  37h ; 7
db    0
db  34h ; 4
db    0
db  0Ch
db    0
db    8
db    0
dd unk_2241E
db  49h ; I
db    0
db  32h ; 2
db    0
db  30h ; 0
db    0
db  16h
db    0
db  0Ch
db    0
dd unk_2242B
db  51h ; Q
db    0
db  64h ; d
db    0
db  41h ; A
db    0
db  0Fh
db    0
db  1Eh
db    0
dd unk_22435
db  41h ; A
db    0
db  82h
db    0
db  3Ch ; <
db    0
db    3
db    0
db    8
db    0
dd unk_22442
db  53h ; S
db    0
db  3Ch ; <
db    0
db  64h ; d
db    0
db    8
db    0
db  0Ch
db    0
dd unk_2244E
db  47h ; G
db    0
db  64h ; d
db    0
db  5Fh ; _
db    0
db  1Eh
db    0
db  16h
db    0
dd unk_22459
db  55h ; U
db    0
db    4
db    1
db  55h ; U
db    0
db    5
db    0
db  12h
db    0
dd unk_22464
db  57h ; W
db    0
db  40h ; @
db    1
db  78h ; x
db    0
db  0Fh
db    0
db  1Eh
db    0
dd unk_2246D
db  59h ; Y
db    0
db  14h
db    0
db  64h ; d
db    0
db  44h ; D
db    0
db  1Ch
db    0
dd unk_2247A
db  5Fh ; _
db    0
db 0BCh
db    1
db 0C7h
db    0
db  42h ; B
db    0
db  90h
db    0
dd unk_22484
db  4Bh ; K
db    0
db  64h ; d
db    0
db 0B4h
db    0
db  6Eh ; n
db    0
db  64h ; d
db    0
dd unk_22490
db  68h ; h
db    0
db 0B0h
db    4
db 0B4h
db    0
db  14h
db    0
db  64h ; d
db    0
dd unk_2249A
db  7Ah ; z
db    0
db 0DCh
db    5
db  58h ; X
db    2
db 0FAh
db    0
db  20h
db    3
dd unk_224A4
db  85h
db    0
db  78h ; x
db    0
db  96h
db    0
db  32h ; 2
db    0
db  64h ; d
db    0
dd unk_224AF
db  87h
db    0
db 0A0h
db    0
db 0E6h
db    0
db  69h ; i
db    0
db  41h ; A
db    0
dd unk_224B9
db  89h
db    0
db  64h ; d
db    0
db 0A8h
db    2
db  32h ; 2
db    0
db  37h ; 7
db    0
dd unk_224C2
db  8Bh
db    0
db 0D2h
db    0
db 0C8h
db    0
db  41h ; A
db    0
db  2Dh ; -
db    0
dd unk_224CB
db  8Dh
db    0
db 0DCh
db    0
db 0B4h
db    0
db  1Eh
db    0
db  23h ; #
db    0
dd unk_224D4
db  8Fh
db    0
db  40h ; @
db    1
db  8Ch
db    0
db  14h
db    0
db  1Eh
db    0
dd unk_224DF
db  91h
db    0
db  94h
db  11h
db  30h ; 0
db    2
db  36h ; 6
db    1
db 0E8h
db    3
dd unk_224EC
db  5Bh ; [
db    0
db  40h ; @
db  1Fh
db  88h
db  13h
db 0E8h
db    3
db 0F4h
db    1
dd unk_224F5
db  5Dh ; ]
db    0
db 0E6h
db    0
db 0C2h
db    1
db  64h ; d
db    0
db  64h ; d
db    0
dd unk_22500
db  93h
db    0
db 0C8h
db    0
db  86h
db    1
db  5Ah ; Z
db    0
db  32h ; 2
db    0
dd unk_22507
db  95h
db    0
db  68h ; h
db    1
db  36h ; 6
db    1
db  14h
db    0
db  28h ; (
db    0
dd unk_22514
db  97h
db    0
db 0C8h
db    0
db  7Ch ; |
db    1
db  82h
db    0
db  5Ah ; Z
db    0
dd unk_2251F
db  99h
db    0
db 0DCh
db    0
db  72h ; r
db    1
db  6Eh ; n
db    0
db  50h ; P
db    0
dd unk_22528
db  9Bh
db    0
db 0B4h
db    0
db 0AEh
db    1
db 0D2h
db    0
db  78h ; x
db    0
dd unk_22531
db  9Dh
db    0
db 0B4h
db    0
db 0CCh
db    1
db  68h ; h
db    1
db 0C8h
db    0
dd unk_22538
db  3Dh ; =
db    0
db  3Eh ; >
db    0
db  3Fh ; ?
db    0
db  40h ; @
db    0
db  41h ; A
db    0
db  42h ; B
db    0
db  43h ; C
db    0
db  44h ; D
db    0
db  45h ; E
db    0
db  46h ; F
db    0
db  47h ; G
db    0
db  48h ; H
db    0
db  49h ; I
db    0
db  4Ah ; J
db    0
db  4Bh ; K
db    0
db  4Ch ; L
db    0
db  4Dh ; M
db    0
db  4Eh ; N
db    0
db  4Fh ; O
db    0
db  50h ; P
db    0
db  51h ; Q
db    0
db  52h ; R
db    0
db  10h
db    0
db  12h
db    0
db  13h
db    0
db  14h
db    0
db  53h ; S
db    0
db  54h ; T
db    0
db  55h ; U
db    0
db  56h ; V
db    0
db  57h ; W
db    0
db  58h ; X
db    0
db  59h ; Y
db    0
db  5Ah ; Z
db    0
db  15h
db    0
db  16h
db    0
db  17h
db    0
db  18h
db    0
db  5Bh ; [
db    0
db  5Ch ; \
db    0
db  5Dh ; ]
db    0
db  5Eh ; ^
db    0
db  19h
db    0
db  1Ah
db    0
db  5Fh ; _
db    0
db  60h ; `
db    0
db  85h
db    0
db  86h
db    0
db  87h
db    0
db  88h
db    0
db  89h
db    0
db  8Ah
db    0
db  8Bh
db    0
db  8Ch
db    0
db  8Dh
db    0
db  8Eh
db    0
db  8Fh
db    0
db  90h
db    0
db  91h
db    0
db  92h
db    0
db  1Bh
db    0
db  1Ch
db    0
db  93h
db    0
db  94h
db    0
db  95h
db    0
db  96h
db    0
db  97h
db    0
db  98h
db    0
db  99h
db    0
db  9Ah
db    0
db  9Bh
db    0
db  9Ch
db    0
db  9Dh
db    0
db  9Eh
db    0
db  61h ; a
db    0
db  6Ah ; j
db    0
db  62h ; b
db    0
db  6Bh ; k
db    0
db  63h ; c
db    0
db  6Ch ; l
db    0
db  64h ; d
db    0
db  6Dh ; m
db    0
db  65h ; e
db    0
db  6Eh ; n
db    0
db  66h ; f
db    0
db  6Fh ; o
db    0
db  67h ; g
db    0
db  70h ; p
db    0
db  68h ; h
db    0
db  71h ; q
db    0
db  69h ; i
db    0
db  72h ; r
db    0
db  73h ; s
db    0
db  7Ch ; |
db    0
db  74h ; t
db    0
db  7Dh ; }
db    0
db  75h ; u
db    0
db  7Eh ; ~
db    0
db  76h ; v
db    0
db  7Fh ; 
db    0
db  77h ; w
db    0
db  80h ; �
db    0
db  78h ; x
db    0
db  81h
db    0
db  79h ; y
db    0
db  82h
db    0
db  7Ah ; z
db    0
db  83h
db    0
db  7Bh ; {
db    0
db  84h
db    0
db 0FFh
db 0FFh
db    0
db    0
db    0
db  10h
db    0
db  20h
db    0
db  30h ; 0
byte_22C30 db 0
byte_22C31 db 40h
db    0
db  50h ; P
byte_22C34 db 0
byte_22C35 db 60h
byte_22C36 db 0
byte_22C37 db 70h
byte_22C38 db 0
byte_22C39 db 80h
byte_22C3A db 0
byte_22C3B db 90h
byte_22C3C db 0
byte_22C3D db 0A0h
byte_22C3E db 0
db 0B0h
db    0
byte_22C41 db 0C0h
db    0
db 0D0h
word_22C44 dw 0E000h
word_22C46 dw 0F000h
dword_22C48 dd 14720444h
db  94h
db  26h ; &
db 0B6h
db  38h ; 8
db 0D8h
db  4Ah ; J
db 0FAh
db  5Ch ; \
db 0D6h
db  66h ; f
db 0F8h
db  78h ; x
db 0AAh
db  8Ch
db 0CCh
db  9Eh
db  8Bh
db 0A8h
db 0ADh
db 0BAh
db 0CFh
db 0CCh
db  66h ; f
db 0D6h
db 0CCh
db 0ECh
db 0FFh
db 0FFh
db    0
db    0
db 0FFh
db  1Fh
db 0FFh
db  2Fh ; /
db 0FFh
db  3Fh ; ?
db    0
db  40h ; @
db    0
db  50h ; P
db    0
db  60h ; `
db 0F8h
db  78h ; x
db 0AAh
db  8Ch
db 0CCh
db  9Eh
db  47h ; G
db 0A4h
db 0ADh
db 0BAh
db 0CFh
db 0CCh
db  66h ; f
db 0D6h
db 0CCh
db 0ECh
db 0FFh
db 0FFh
db    2
db    0
db    4
db  10h
db  26h ; &
db  22h ; "
db  48h ; H
db  34h ; 4
db  6Ah ; j
db  46h ; F
db  8Ch
db  58h ; X
db    0
db  6Dh ; m
db 0F8h
db  78h ; x
db 0AAh
db  8Ch
db 0CCh
db  9Eh
db  8Bh
db 0A8h
db 0ADh
db 0BAh
db 0CFh
db 0CCh
db  66h ; f
db 0D6h
db 0CCh
db 0ECh
db 0FFh
db 0FFh
aSavec1Dat db 'SAVEC1.DAT',0
aSavec2Dat db 'SAVEC2.DAT',0
aSavec3Dat db 'SAVEC3.DAT',0
aSavec4Dat db 'SAVEC4.DAT',0
aSavec5Dat db 'SAVEC5.DAT',0
aSavec6Dat db 'SAVEC6.DAT',0
aSavec7Dat db 'SAVEC7.DAT',0
aSavec8Dat db 'SAVEC8.DAT',0
unk_22D00 db  81h
db  40h ; @
db  81h
db  40h ; @
db  97h
db  45h ; E
db  8Eh
db 0D2h
db  82h
db 0CCh
db  83h
db  49h ; I
db  81h
db  5Bh ; [
db  83h
db  75h ; u
db  82h
db 0F0h
db  8Eh
db  67h ; g
db  82h
db 0A4h
db  0Ah
db    0
unk_22D18 db  81h
db  40h ; @
db  81h
db  40h ; @
db  94h
db 0F2h
db 0E3h
db 0C4h
db  82h
db 0CCh
db  83h
db  49h ; I
db  81h
db  5Bh ; [
db  83h
db  75h ; u
db  82h
db 0F0h
db  8Eh
db  67h ; g
db  82h
db 0A4h
db  0Ah
db    0
unk_22D30 db  81h
db  40h ; @
db  81h
db  40h ; @
db  92h
db  6Dh ; m
db  8Ch
db  62h ; b
db  82h
db 0CCh
db  83h
db  49h ; I
db  81h
db  5Bh ; [
db  83h
db  75h ; u
db  82h
db 0F0h
db  8Eh
db  67h ; g
db  82h
db 0A4h
db  0Ah
db    0
unk_22D48 db  81h
db  40h ; @
db  81h
db  40h ; @
db  83h
db  58h ; X
db  83h
db  79h ; y
db  83h
db  56h ; V
db  83h
db  83h
db  83h
db  8Bh
db  81h
db  45h ; E
db  83h
db  41h ; A
db  83h
db  43h ; C
db  83h
db  65h ; e
db  83h
db  80h ; �
db  82h
db 0F0h
db  8Eh
db  67h ; g
db  82h
db 0A4h
db  0Ah
db    0
unk_22D68 db  81h
db  40h ; @
db  81h
db  40h ; @
db  83h
db  66h ; f
db  81h
db  5Bh ; [
db  83h
db  5Eh ; ^
db  81h
db  45h ; E
db  83h
db  8Dh
db  81h
db  5Bh ; [
db  83h
db  68h ; h
db  0Ah
db    0
unk_22D7C db  81h
db  40h ; @
db  81h
db  40h ; @
db  83h
db  66h ; f
db  81h
db  5Bh ; [
db  83h
db  5Eh ; ^
db  81h
db  45h ; E
db  83h
db  5Ah ; Z
db  81h
db  5Bh ; [
db  83h
db  75h ; u
db  0Ah
db    0
unk_22D90 db  81h
db  40h ; @
db  81h
db  40h ; @
db  83h
db  51h ; Q
db  81h
db  5Bh ; [
db  83h
db  80h ; �
db  82h
db 0C9h
db  96h
db 0DFh
db  82h
db 0E9h
db  0Ah
db    0
unk_22DA2 db  81h
db  40h ; @
db  81h
db  40h ; @
db  83h
db  51h ; Q
db  81h
db  5Bh ; [
db  83h
db  80h ; �
db  8Fh
db  49h ; I
db  97h
db 0B9h
db  0Ah
db    0
db  83h
db  81h
db  83h
db  6Ah ; j
db  83h
db  85h
db  81h
db  5Bh ; [
db  82h
db 0CCh
db  91h
db  49h ; I
db  91h
db 0F0h
db  82h
db 0F0h
db  82h
db 0B5h
db  82h
db 0C4h
db  82h
db 0ADh
db  82h
db 0BEh
db  82h
db 0B3h
db  82h
db 0A2h
db  81h
db  42h ; B
db  0Ah
db    0
db  0Ah
db  20h
db  57h ; W
db  41h ; A
db  52h ; R
db  4Eh ; N
db  49h ; I
db  4Eh ; N
db  47h ; G
db  20h
db  21h ; !
db  21h ; !
db  21h ; !
db  20h
db 0BCh
db 0AEh
db 0B3h
db 0C6h
db 0DDh
db  20h
db 0CAh
db 0DEh
db 0DDh
db 0BAh
db 0DEh
db 0B3h
db  20h
db 0B6h
db 0DEh
db 0D0h
db 0C2h
db 0B6h
db 0D8h
db 0CFh
db 0BEh
db 0DDh
db  20h
db  21h ; !
db  21h ; !
db  21h ; !
db    0
db  83h
db  58h ; X
db  81h
db  5Bh ; [
db  83h
db  70h ; p
db  81h
db  5Bh ; [
db  83h
db  7Dh ; }
db  83h
db  67h ; g
db  83h
db  62h ; b
db  83h
db  4Eh ; N
db  82h
db 0F0h
db  8Eh
db 0E8h
db  82h
db 0C9h
db  93h
db 0FCh
db  82h
db 0EAh
db  82h
db 0BDh
db  81h
db  49h ; I
db    0
db  82h
db 0DCh
db  82h
db 0A2h
db  82h
db 0C7h
db  81h
db  5Bh ; [
db  82h
db 0C1h
db  81h
db  49h ; I
db    0
db  82h
db 0A8h
db  8Bh
db 0E0h
db  82h
db 0AAh
db  82h
db 0BDh
db  82h
db 0E8h
db  82h
db 0C8h
db  82h
db 0A2h
db  82h
db 0E6h
db  81h
db  49h ; I
db    0
db  82h
db 0E0h
db  82h
db 0A4h
db  81h
db  41h ; A
db  98h
db  62h ; b
db  82h
db 0B7h
db  8Eh
db  96h
db  82h
db 0CDh
db  82h
db 0C8h
db  82h
db 0A2h
db  82h
db 0E6h
db  81h
db  42h ; B
db    0
db  81h
db  75h ; u
db  82h
db 0A4h
db  82h
db 0BFh
db  82h
db 0CCh
db  93h
db  58h ; X
db  82h
db 0CDh
db  8Ch
db 0AEh
db  82h
db 0F0h
db  82h
db 0A2h
db  82h
db 0ADh
db  82h
db 0E7h
db  82h
db 0C5h
db  82h
db 0E0h
db  94h
db  84h
db  82h
db 0E9h
db  82h
db 0E6h
db  81h
db  42h ; B
db  0Ah
db  82h
db  50h ; P
db  82h
db 0C2h
db    0
db  82h
db  66h ; f
db  82h
db  6Eh ; n
db  82h
db  6Bh ; k
db  82h
db  63h ; c
db  82h
db 0BEh
db  82h
db 0AAh
db  94h
db  83h
db  82h
db 0A4h
db  82h
db 0A9h
db  82h
db 0A2h
db  81h
db  48h ; H
db  81h
db  76h ; v
db  0Ah
db  81h
db  40h ; @
db  81h
db  40h ; @
db  81h
db  9Dh
db  82h
db 0CDh
db  82h
db 0A2h
db  0Ah
db  81h
db  40h ; @
db  81h
db  40h ; @
db  81h
db  9Dh
db  82h
db 0A2h
db  82h
db 0A2h
db  82h
db 0A6h
db    0
db  82h
db 0DCh
db  82h
db 0A2h
db  82h
db 0C7h
db  81h
db  5Bh ; [
db  82h
db 0C1h
db  81h
db  49h ; I
db    0
db  82h
db 0A8h
db  8Bh
db 0E0h
db  82h
db 0AAh
db  82h
db 0BDh
db  82h
db 0E8h
db  82h
db 0C8h
db  82h
db 0A2h
db  82h
db 0E6h
db  81h
db  49h ; I
db    0
db  82h
db 0DCh
db  82h
db 0A2h
db  82h
db 0C7h
db  81h
db  5Bh ; [
db  82h
db 0C1h
db  81h
db  49h ; I
db    0
db  8Ch
db 0AEh
db  82h
db 0F0h
db  8Eh
db  9Dh
db  82h
db 0C1h
db  82h
db 0C4h
db  82h
db 0C8h
db  82h
db 0A2h
db  82h
db 0E6h
db  81h
db  49h ; I
db    0
db  97h
db  4Ch ; L
db  8Ch
db 0F8h
db  82h
db 0C9h
db  82h
db 0C2h
db  82h
db 0A9h
db  82h
db 0C1h
db  82h
db 0C4h
db  82h
db 0CBh
db  81h
db  42h ; B
db    0
db  96h
db  82h
db  93h
db 0B1h
db  8Eh
db  74h ; t
db  82h
db 0CCh
db  96h
db  82h
db  96h
db  40h ; @
db  8Dh
db  55h ; U
db  8Ch
db  82h
db  82h
db 0BEh
db  81h
db  49h ; I
db  81h
db  40h ; @
db  90h
db 0B6h
db  96h
db 0BDh
db  97h
db 0CDh
db  94h
db 0BCh
db  8Ch
db 0B8h
db  81h
db  49h ; I
db    0
db  96h
db  82h
db  8Fh
db  70h ; p
db  8Eh
db  6Dh ; m
db  82h
db 0CCh
db  96h
db  82h
db  96h
db  40h ; @
db  8Dh
db  55h ; U
db  8Ch
db  82h
db  82h
db 0BEh
db  81h
db  49h ; I
db  81h
db  40h ; @
db  82h
db  51h ; Q
db  82h
db  4Fh ; O
db  82h
db  4Fh ; O
db  83h
db  7Ch ; |
db  83h
db  43h ; C
db  83h
db  93h
db  83h
db  67h ; g
db  83h
db  5Fh ; _
db  83h
db  81h
db  81h
db  5Bh ; [
db  83h
db  57h ; W
db  81h
db  49h ; I
db    0
db  96h
db  82h
db  8Fh
db  70h ; p
db  8Eh
db  6Dh ; m
db  82h
db 0CCh
db  96h
db  82h
db  96h
db  40h ; @
db  8Dh
db  55h ; U
db  8Ch
db  82h
db  82h
db 0BEh
db  81h
db  49h ; I
db  81h
db  40h ; @
db  82h
db  50h ; P
db  82h
db  4Fh ; O
db  82h
db  4Fh ; O
db  83h
db  7Ch ; |
db  83h
db  43h ; C
db  83h
db  93h
db  83h
db  67h ; g
db  83h
db  5Fh ; _
db  83h
db  81h
db  81h
db  5Bh ; [
db  83h
db  57h ; W
db  81h
db  49h ; I
db    0
db  90h
db 0E1h
db  82h
db 0CCh
db  8Ch
db  8Bh
db  8Fh
db 0BBh
db  82h
db 0F0h
db  8Eh
db  67h ; g
db  82h
db 0C1h
db  82h
db 0BDh
db  81h
db  49h ; I
db    0
db  8Ch
db 0AEh
db  82h
db 0F0h
db  8Eh
db 0E8h
db  82h
db 0C9h
db  93h
db 0FCh
db  82h
db 0EAh
db  82h
db 0BDh
db  81h
db  49h ; I
db    0
db  90h
db 0D4h
db  82h
db 0A2h
db  8Ch
db 0AEh
db  82h
db 0F0h
db  8Eh
db 0E8h
db  82h
db 0C9h
db  93h
db 0FCh
db  82h
db 0EAh
db  82h
db 0BDh
db  81h
db  49h ; I
db    0
db  8Eh
db  87h
db  82h
db 0CCh
db  8Ch
db 0AEh
db  82h
db 0F0h
db  8Eh
db 0E8h
db  82h
db 0C9h
db  93h
db 0FCh
db  82h
db 0EAh
db  82h
db 0BDh
db  81h
db  49h ; I
db    0
db  89h
db 0F1h
db  95h
db  9Ch
db  96h
db 0F2h
db  82h
db 0F0h
db  8Eh
db 0E8h
db  82h
db 0C9h
db  93h
db 0FCh
db  82h
db 0EAh
db  82h
db 0BDh
db  81h
db  49h ; I
db  81h
db  40h ; @
db  90h
db 0B6h
db  96h
db 0BDh
db  97h
db 0CDh
db  81h
db  40h ; @
db    0
db  83h
db  7Ch ; |
db  83h
db  43h ; C
db  83h
db  93h
db  83h
db  67h ; g
db  82h
db  74h ; t
db  82h
db  6Fh ; o
db  81h
db  49h ; I
db    0
db  83h
db  70h ; p
db  83h
db  8Fh
db  81h
db  5Bh ; [
db  83h
db  4Eh ; N
db  83h
db  8Ah
db  83h
db  58h ; X
db  83h
db  5Eh ; ^
db  83h
db  8Bh
db  82h
db 0F0h
db  8Eh
db 0E8h
db  82h
db 0C9h
db  93h
db 0FCh
db  82h
db 0EAh
db  82h
db 0BDh
db  81h
db  49h ; I
db  81h
db  40h ; @
db  8Dh
db  55h ; U
db  8Ch
db  82h
db  97h
db 0CDh
db  81h
db  40h ; @
db    0
db  83h
db  7Ch ; |
db  83h
db  43h ; C
db  83h
db  93h
db  83h
db  67h ; g
db  82h
db  74h ; t
db  82h
db  6Fh ; o
db  81h
db  49h ; I
db    0
db  83h
db  66h ; f
db  83h
db  42h ; B
db  83h
db  74h ; t
db  83h
db  46h ; F
db  83h
db  93h
db  83h
db  58h ; X
db  83h
db  4Eh ; N
db  83h
db  8Ah
db  83h
db  58h ; X
db  83h
db  5Eh ; ^
db  83h
db  8Bh
db  82h
db 0F0h
db  8Eh
db 0E8h
db  82h
db 0C9h
db  93h
db 0FCh
db  82h
db 0EAh
db  82h
db 0BDh
db  81h
db  49h ; I
db  96h
db  68h ; h
db  8Ch
db 0E4h
db  97h
db 0CDh
db  81h
db  40h ; @
db    0
db  83h
db  7Ch ; |
db  83h
db  43h ; C
db  83h
db  93h
db  83h
db  67h ; g
db  82h
db  74h ; t
db  82h
db  6Fh ; o
db  81h
db  49h ; I
db    0
db    0
db  92h
db 0B7h
db  8Ch
db  95h
db  82h
db 0F0h
db  8Eh
db 0E8h
db  82h
db 0C9h
db  93h
db 0FCh
db  82h
db 0EAh
db  82h
db 0BDh
db  81h
db  49h ; I
db    0
db  8Bh
db 0E2h
db  82h
db 0CCh
db  8Ch
db  95h
db  82h
db 0F0h
db  8Eh
db 0E8h
db  82h
db 0C9h
db  93h
db 0FCh
db  82h
db 0EAh
db  82h
db 0BDh
db  81h
db  49h ; I
db    0
db  8Bh
db  52h ; R
db  8Eh
db  6Dh ; m
db  82h
db 0CCh
db  8Ch
db  95h
db  82h
db 0F0h
db  8Eh
db 0E8h
db  82h
db 0C9h
db  93h
db 0FCh
db  82h
db 0EAh
db  82h
db 0BDh
db  81h
db  49h ; I
db    0
db  90h
db 0B9h
db  8Ch
db  95h
db  82h
db 0F0h
db  8Eh
db 0E8h
db  82h
db 0C9h
db  93h
db 0FCh
db  82h
db 0EAh
db  82h
db 0BDh
db  81h
db  49h ; I
db    0
db  90h
db  5Fh ; _
db  8Ch
db  95h
db  82h
db 0F0h
db  8Eh
db 0E8h
db  82h
db 0C9h
db  93h
db 0FCh
db  82h
db 0EAh
db  82h
db 0BDh
db  81h
db  49h ; I
db    0
db  93h
db  53h ; S
db  82h
db 0CCh
db  8Fh
db  82h
db  82h
db 0F0h
db  8Eh
db 0E8h
db  82h
db 0C9h
db  93h
db 0FCh
db  82h
db 0EAh
db  82h
db 0BDh
db  81h
db  49h ; I
db    0
db  8Bh
db 0E2h
db  82h
db 0CCh
db  8Fh
db  82h
db  82h
db 0F0h
db  8Eh
db 0E8h
db  82h
db 0C9h
db  93h
db 0FCh
db  82h
db 0EAh
db  82h
db 0BDh
db  81h
db  49h ; I
db    0
db  8Bh
db  52h ; R
db  8Eh
db  6Dh ; m
db  82h
db 0CCh
db  8Fh
db  82h
db  82h
db 0F0h
db  8Eh
db 0E8h
db  82h
db 0C9h
db  93h
db 0FCh
db  82h
db 0EAh
db  82h
db 0BDh
db  81h
db  49h ; I
db    0
db  90h
db 0B9h
db  8Fh
db  82h
db  82h
db 0F0h
db  8Eh
db 0E8h
db  82h
db 0C9h
db  93h
db 0FCh
db  82h
db 0EAh
db  82h
db 0BDh
db  81h
db  49h ; I
db    0
db  90h
db  5Fh ; _
db  8Fh
db  82h
db  82h
db 0F0h
db  8Eh
db 0E8h
db  82h
db 0C9h
db  93h
db 0FCh
db  82h
db 0EAh
db  82h
db 0BDh
db  81h
db  49h ; I
db    0
db  97h
db  45h ; E
db  8Eh
db 0D2h
db  82h
db 0CCh
db  83h
db  49h ; I
db  81h
db  5Bh ; [
db  83h
db  75h ; u
db  82h
db 0F0h
db  8Eh
db 0E8h
db  82h
db 0C9h
db  93h
db 0FCh
db  82h
db 0EAh
db  82h
db 0BDh
db  81h
db  49h ; I
db    0
db  92h
db  6Dh ; m
db  8Ch
db  62h ; b
db  82h
db 0CCh
db  83h
db  49h ; I
db  81h
db  5Bh ; [
db  83h
db  75h ; u
db  82h
db 0F0h
db  8Eh
db 0E8h
db  82h
db 0C9h
db  93h
db 0FCh
db  82h
db 0EAh
db  82h
db 0BDh
db  81h
db  49h ; I
db    0
db  94h
db 0F2h
db 0E3h
db 0C4h
db  82h
db 0CCh
db  83h
db  49h ; I
db  81h
db  5Bh ; [
db  83h
db  75h ; u
db  82h
db 0F0h
db  8Eh
db 0E8h
db  82h
db 0C9h
db  93h
db 0FCh
db  82h
db 0EAh
db  82h
db 0BDh
db  81h
db  49h ; I
db    0
db  8Fh
db  5Ch ; \
db  8Eh
db  9Ah
db  89h
db 0CBh
db  82h
db 0F0h
db  8Eh
db 0E8h
db  82h
db 0C9h
db  93h
db 0FCh
db  82h
db 0EAh
db  82h
db 0BDh
db  81h
db  49h ; I
db    0
db  83h
db  7Dh ; }
db  83h
db  67h ; g
db  83h
db  62h ; b
db  83h
db  4Eh ; N
db  82h
db 0F0h
db  8Eh
db 0E8h
db  82h
db 0C9h
db  93h
db 0FCh
db  82h
db 0EAh
db  82h
db 0BDh
db  81h
db  49h ; I
db    0
db  8Bh
db 0F3h
db  8Ah
db 0D4h
db  93h
db  5Dh ; ]
db  88h
db 0DAh
db  82h
db 0CCh
db  94h
db 0E9h
db  95h
db 0F3h
db  82h
db 0F0h
db  8Eh
db 0E8h
db  82h
db 0C9h
db  93h
db 0FCh
db  82h
db 0EAh
db  82h
db 0BDh
db  81h
db  49h ; I
db    0
db  94h
db  6Ah ; j
db  89h
db 0F3h
db  82h
db 0CCh
db  8Bh
db 0CAh
db  82h
db 0F0h
db  8Eh
db 0E8h
db  82h
db 0C9h
db  93h
db 0FCh
db  82h
db 0EAh
db  82h
db 0BDh
db  81h
db  49h ; I
db    0
db  8Fh
db 0B8h
db  89h
db 0D8h
db  82h
db 0CCh
db  97h
db  83h
db  82h
db 0F0h
db  8Eh
db 0E8h
db  82h
db 0C9h
db  93h
db 0FCh
db  82h
db 0EAh
db  82h
db 0BDh
db  81h
db  49h ; I
db    0
db  8Dh
db  7Eh ; ~
db  97h
db 0D5h
db  82h
db 0CCh
db  97h
db  83h
db  82h
db 0F0h
db  8Eh
db 0E8h
db  82h
db 0C9h
db  93h
db 0FCh
db  82h
db 0EAh
db  82h
db 0BDh
db  81h
db  49h ; I
db    0
db  83h
db  68h ; h
db  83h
db  89h
db  83h
db  53h ; S
db  83h
db  93h
db  83h
db  58h ; X
db  83h
db  8Ch
db  83h
db  43h ; C
db  83h
db  84h
db  81h
db  5Bh ; [
db  82h
db 0F0h
db  8Eh
db 0E8h
db  82h
db 0C9h
db  93h
db 0FCh
db  82h
db 0EAh
db  82h
db 0BDh
db  81h
db  49h ; I
db    0
db  90h
db 0E1h
db  82h
db 0CCh
db  8Ch
db  8Bh
db  8Fh
db 0BBh
db  82h
db 0F0h
db  8Eh
db 0E8h
db  82h
db 0C9h
db  93h
db 0FCh
db  82h
db 0EAh
db  82h
db 0BDh
db  81h
db  49h ; I
db    0
db  96h
db  82h
db  96h
db  40h ; @
db  82h
db 0CCh
db  8Ch
db 0AEh
db  82h
db 0F0h
db  8Eh
db 0E8h
db  82h
db 0C9h
db  93h
db 0FCh
db  82h
db 0EAh
db  82h
db 0BDh
db  81h
db  49h ; I
db    0
db  83h
db  58h ; X
db  81h
db  5Bh ; [
db  83h
db  70h ; p
db  81h
db  5Bh ; [
db  83h
db  7Dh ; }
db  83h
db  67h ; g
db  83h
db  62h ; b
db  83h
db  4Eh ; N
db  82h
db 0F0h
db  8Eh
db 0E8h
db  82h
db 0C9h
db  93h
db 0FCh
db  82h
db 0EAh
db  82h
db 0BDh
db  81h
db  49h ; I
db    0
db  8Dh
db  4Bh ; K
db  89h
db  5Eh ; ^
db  82h
db 0CCh
db  8Bh
db 0E0h
db  89h
db 0DDh
db  82h
db 0F0h
db  8Eh
db 0E8h
db  82h
db 0C9h
db  93h
db 0FCh
db  82h
db 0EAh
db  82h
db 0BDh
db  81h
db  49h ; I
db    0
db  8Dh
db 0D5h
db  92h
db  64h ; d
db  82h
db 0AAh
db  82h
db 0A0h
db  82h
db 0E9h
db  81h
db  42h ; B
db    0
db  81h
db  75h ; u
db  82h
db 0B1h
db  82h
db 0CCh
db  8Dh
db 0D5h
db  92h
db  64h ; d
db  82h
db 0C9h
db    0
db  81h
db  40h ; @
db    0
db  82h
db  66h ; f
db  82h
db  6Eh ; n
db  82h
db  6Bh ; k
db  82h
db  63h ; c
db  8Ah
db 0F1h
db  90h
db  69h ; i
db  82h
db 0B7h
db  82h
db 0EAh
db  0Ah
db  81h
db  40h ; @
db  82h
db 0CEh
db  96h
db  5Dh ; ]
db  82h
db 0DDh
db  82h
db 0F0h
db  82h
db 0A9h
db  82h
db 0C8h
db  82h
db 0A6h
db  82h
db 0C4h
db  82h
db 0E2h
db  82h
db 0EBh
db  82h
db 0A4h
db  81h
db  42h ; B
db  81h
db  40h ; @
db  8Ah
db 0F1h
db  90h
db  69h ; i
db  82h
db 0B7h
db  82h
db 0E9h
db  0Ah
db  81h
db  40h ; @
db  82h
db 0A9h
db  81h
db  48h ; H
db  81h
db  76h ; v
db  0Ah
db  81h
db  40h ; @
db  81h
db  40h ; @
db  81h
db  9Dh
db  82h
db 0CDh
db  82h
db 0A2h
db  20h
db  0Ah
db  81h
db  40h ; @
db  81h
db  40h ; @
db  81h
db  9Dh
db  82h
db 0A2h
db  82h
db 0A2h
db  82h
db 0A6h
db  0Ah
db    0
db  81h
db  75h ; u
db  82h
db 0C7h
db  82h
db 0CCh
db  96h
db  5Dh ; ]
db  82h
db 0DDh
db  82h
db 0F0h
db  82h
db 0A9h
db  82h
db 0C8h
db  82h
db 0A6h
db  82h
db 0C4h
db  97h
db  7Eh ; ~
db  82h
db 0B5h
db  82h
db 0A2h
db  82h
db 0CCh
db  82h
db 0BEh
db  81h
db  48h ; H
db  81h
db  76h ; v
db  0Ah
db    0
db  81h
db  40h ; @
db  81h
db  40h ; @
db  90h
db 0B6h
db  96h
db 0BDh
db  97h
db 0CDh
db  82h
db 0F0h
db    0
db  83h
db  7Ch ; |
db  83h
db  43h ; C
db  83h
db  93h
db  83h
db  67h ; g
db  89h
db 0F1h
db  95h
db  9Ch
db  0Ah
db    0
db  81h
db  40h ; @
db  81h
db  40h ; @
db  8Dh
db  55h ; U
db  8Ch
db  82h
db  97h
db 0CDh
db  82h
db 0F0h
db    0
db  83h
db  7Ch ; |
db  83h
db  43h ; C
db  83h
db  93h
db  83h
db  67h ; g
db  83h
db  41h ; A
db  83h
db  62h ; b
db  83h
db  76h ; v
db  0Ah
db    0
db  81h
db  40h ; @
db  81h
db  40h ; @
db  96h
db  68h ; h
db  8Ch
db 0E4h
db  97h
db 0CDh
db  82h
db 0F0h
db    0
db  83h
db  7Ch ; |
db  83h
db  43h ; C
db  83h
db  93h
db  83h
db  67h ; g
db  83h
db  41h ; A
db  83h
db  62h ; b
db  83h
db  76h ; v
db  0Ah
db    0
db  81h
db  40h ; @
db  81h
db  40h ; @
db  82h
db 0E2h
db  82h
db 0C1h
db  82h
db 0CFh
db  82h
db 0E8h
db  82h
db 0E2h
db  82h
db 0DFh
db  82h
db 0E9h
db  0Ah
db    0
db  8Bh
db 0E0h
db  82h
db 0AAh
db  91h
db 0ABh
db  82h
db 0E7h
db  82h
db 0F1h
db  81h
db  49h ; I
db    0
db  0Ah
db  20h
db  57h ; W
db  41h ; A
db  52h ; R
db  4Eh ; N
db  49h ; I
db  4Eh ; N
db  47h ; G
db  20h
db  21h ; !
db  21h ; !
db  21h ; !
db  20h
db 0D3h
db 0DDh
db 0BDh
db 0C0h
db 0B0h
db  20h
db 0CAh
db 0DEh
db 0DDh
db 0BAh
db 0DEh
db 0B3h
db  20h
db 0B6h
db 0DEh
db 0D0h
db 0C2h
db 0B6h
db 0D8h
db 0CFh
db 0BEh
db 0DDh
db  20h
db  21h ; !
db  21h ; !
db  21h ; !
db    0
db  91h
db  8Ah
db  8Eh
db 0E8h
db  82h
db 0CCh
db  96h
db  68h ; h
db  8Ch
db 0E4h
db  97h
db 0CDh
db  82h
db 0AAh
db  8Dh
db  82h
db  82h
db 0B7h
db  82h
db 0ACh
db  82h
db 0C4h
db  8Dh
db  55h ; U
db  8Ch
db  82h
db  82h
db 0C5h
db  82h
db 0ABh
db  82h
db 0C8h
db  82h
db 0A2h
db  81h
db  42h ; B
db    0
db  45h ; E
db  50h ; P
db  32h ; 2
db  38h ; 8
db  36h ; 6
db    0
db  0Ah
db  81h
db  40h ; @
db  82h
db  64h ; d
db  82h
db  6Fh ; o
db  82h
db  72h ; r
db  82h
db  6Eh ; n
db  82h
db  6Dh ; m
db  82h
db  51h ; Q
db  82h
db  57h ; W
db  82h
db  55h ; U
db  97h
db  70h ; p
db  95h
db 0B6h
db  8Eh
db  9Ah
db  95h
db  5Ch ; \
db  8Eh
db 0A6h
db  83h
db  82h
db  81h
db  5Bh ; [
db  83h
db  68h ; h
db  82h
db 0C5h
db  8Bh
db  4Eh ; N
db  93h
db 0AEh
db  82h
db 0B5h
db  82h
db 0DCh
db  82h
db 0B7h
db  81h
db  42h ; B
db  0Ah
db    0
db  46h ; F
db  4Dh ; M
db  49h ; I
db  4Eh ; N
db  54h ; T
db  30h ; 0
db    0
db  46h ; F
db  4Dh ; M
db  43h ; C
db  55h ; U
db  54h ; T
db    0
db  46h ; F
db  4Fh ; O
db  52h ; R
db  54h ; T
db  45h ; E
db  53h ; S
db  54h ; T
db    0
db  3Dh ; =
db  4Eh ; N
db  41h ; A
db  4Fh ; O
db  2Fh ; /
db  57h ; W
db  41h ; A
db  54h ; T
db  41h ; A
db  4Eh ; N
db  41h ; A
db  42h ; B
db  45h ; E
db  3Dh ; =
db    0
db  4Dh ; M
db  54h ; T
db  52h ; R
db  45h ; E
db  47h ; G
db    0
db  52h ; R
db  45h ; E
db  47h ; G
db  43h ; C
db  55h ; U
db  54h ; T
db    0
db  4Dh ; M
db  54h ; T
db  2Eh ; .
db  47h ; G
db  54h ; T
db  58h ; X
db    0
db  49h ; I
db  4Eh ; N
db  49h ; I
db  54h ; T
db  49h ; I
db  41h ; A
db  4Ch ; L
db  2Eh ; .
db  44h ; D
db  41h ; A
db  54h ; T
db    0
db  82h
db  73h ; s
db  82h
db  8Fh
db  82h
db  97h
db  82h
db  85h
db  82h
db  92h
db  81h
db  40h ; @
db  82h
db  8Fh
db  82h
db  86h
db  81h
db  40h ; @
db  82h
db  94h
db  82h
db  88h
db  82h
db  85h
db  81h
db  40h ; @
db  82h
db  72h ; r
db  82h
db  8Fh
db  82h
db  92h
db  82h
db  83h
db  82h
db  85h
db  82h
db  92h
db  82h
db  85h
db  82h
db  92h
db    0
db  81h
db  40h ; @
db  81h
db  40h ; @
db  81h
db  40h ; @
db  81h
db  40h ; @
db  81h
db  40h ; @
db  81h
db  40h ; @
db  81h
db  40h ; @
db  81h
db  40h ; @
db  81h
db  40h ; @
db  81h
db  40h ; @
db  81h
db  69h ; i
db  82h
db  62h ; b
db  81h
db  6Ah ; j
db  82h
db  50h ; P
db  82h
db  58h ; X
db  82h
db  58h ; X
db  82h
db  55h ; U
db  81h
db  40h ; @
db  82h
db  6Dh ; m
db  81h
db  44h ; D
db  82h
db  76h ; v
db    0
db  4Dh ; M
db  54h ; T
db  4Dh ; M
db  4Fh ; O
db  4Ah ; J
db  49h ; I
db  2Eh ; .
db  50h ; P
db  35h ; 5
db  38h ; 8
db    0
db  4Dh ; M
db  54h ; T
db  4Fh ; O
db  50h ; P
db  53h ; S
db  54h ; T
db  52h ; R
db  2Eh ; .
db  50h ; P
db  35h ; 5
db  38h ; 8
db    0
unk_234E9 db  96h
db 0B3h
db  8Fh
db 0CCh
db  8Dh
db  86h
db    0
unk_234F0 db  90h
db 0EDh
db  8Eh
db  6Dh ; m
db    0
unk_234F5 db  97h
db  45h ; E
db  8Eh
db 0D2h
db    0
unk_234FA db  89h
db  70h ; p
db  97h
db  59h ; Y
db    0
unk_234FF db  8Ch
db  95h
db  92h
db 0E9h
db    0
unk_23504 db  93h
db 0ACh
db  90h
db  5Fh ; _
db    0
db  97h
db  64h ; d
db  90h
db 0B8h
db  82h
db 0AAh
db  82h
db 0A2h
db  82h
db 0E9h
db  81h
db  42h ; B
db    0
db  81h
db  75h ; u
db  82h
db 0B1h
db  82h
db 0CCh
db  8Ah
db  4Bh ; K
db  82h
db 0DCh
db  82h
db 0C5h
db  82h
db 0CCh
db  82h
db 0A0h
db  82h
db 0C8h
db  82h
db 0BDh
db  82h
db 0CCh
db  90h
db 0B6h
db  96h
db 0BDh
db  97h
db 0CDh
db  81h
db  41h ; A
db  96h
db  68h ; h
db  8Ch
db 0E4h
db  97h
db 0CDh
db  0Ah
db  8Dh
db  55h ; U
db  8Ch
db  82h
db  97h
db 0CDh
db  81h
db  41h ; A
db  8Ch
db 0AEh
db  82h
db 0CCh
db  8Ch
db 0C2h
db  90h
db  94h
db  82h
db 0A9h
db  82h
db 0E7h
db  82h
db 0A0h
db  82h
db 0C8h
db  82h
db 0BDh
db  82h
db 0CCh
db  8Eh
db 0C0h
db  97h
db 0CDh
db  82h
db 0F0h
db  95h
db  5Dh ; ]
db  0Ah
db  89h
db 0BFh
db  82h
db 0B7h
db  82h
db 0E9h
db  82h
db 0C6h
db  81h
db  45h ; E
db  81h
db  45h ; E
db  81h
db  45h ; E
db    0
db  93h
db  5Fh ; _
db  82h
db 0C5h
db  82h
db 0B7h
db  81h
db  42h ; B
db  0Ah
db    0
db  82h
db 0B1h
db  82h
db 0B1h
db  82h
db 0DCh
db  82h
db 0C5h
db  81h
db  41h ; A
db  82h
db 0A8h
db  82h
db 0C2h
db  82h
db 0A9h
db  82h
db 0EAh
db  82h
db 0B3h
db  82h
db 0DCh
db  82h
db 0C5h
db  82h
db 0B5h
db  82h
db 0BDh
db  81h
db  42h ; B
db  0Ah
db    0
db  82h
db 0E6h
db  82h
db 0ADh
db  82h
db 0AAh
db  82h
db 0F1h
db  82h
db 0CEh
db  82h
db 0E8h
db  82h
db 0DCh
db  82h
db 0B5h
db  82h
db 0BDh
db  82h
db 0CBh
db  81h
db  42h ; B
db  81h
db  40h ; @
db  82h
db 0A0h
db  82h
db 0C8h
db  82h
db 0BDh
db  82h
db 0C9h
db  82h
db 0CDh
db  81h
db  41h ; A
db  0Ah
db  81h
db  40h ; @
db  81h
db  40h ; @
db  81h
db  40h ; @
db  81h
db  40h ; @
db  81h
db  40h ; @
db  81h
db  40h ; @
db  81h
db  77h ; w
db    0
db  81h
db  78h ; x
db  0Ah
db  82h
db 0CCh
db  8Fh
db 0CCh
db  8Dh
db  86h
db  82h
db 0F0h
db  8Dh
db 0B7h
db  82h
db 0B5h
db  8Fh
db 0E3h
db  82h
db 0B0h
db  82h
db 0DCh
db  82h
db 0B5h
db  82h
db 0E5h
db  82h
db 0A4h
db  81h
db  42h ; B
db  81h
db  40h ; @
db  82h
db 0B1h
db  82h
db 0B1h
db  82h
db 0DCh
db  82h
db 0C5h
db  0Ah
db  82h
db 0A8h
db  82h
db 0C2h
db  82h
db 0A9h
db  82h
db 0EAh
db  82h
db 0B3h
db  82h
db 0DCh
db  82h
db 0C5h
db  82h
db 0B5h
db  82h
db 0BDh
db  81h
db  42h ; B
db  0Ah
db    0
db  82h
db 0A8h
db  82h
db 0DFh
db  82h
db 0C5h
db  82h
db 0C6h
db  82h
db 0A4h
db  81h
db  49h ; I
db  81h
db  40h ; @
db  96h
db  9Eh
db  93h
db  5Fh ; _
db  82h
db 0C5h
db  82h
db 0B7h
db  81h
db  42h ; B
db  81h
db  40h ; @
db  82h
db 0A0h
db  82h
db 0C8h
db  82h
db 0BDh
db  82h
db 0C9h
db  82h
db 0CDh
db  0Ah
db  81h
db  40h ; @
db  81h
db  40h ; @
db  81h
db  40h ; @
db  81h
db  40h ; @
db  81h
db  40h ; @
db  81h
db  40h ; @
db  81h
db  77h ; w
db    0
db  81h
db  78h ; x
db  0Ah
db  82h
db 0CCh
db  8Fh
db 0CCh
db  8Dh
db  86h
db  82h
db 0F0h
db  8Dh
db 0B7h
db  82h
db 0B5h
db  8Fh
db 0E3h
db  82h
db 0B0h
db  82h
db 0DCh
db  82h
db 0B5h
db  82h
db 0E5h
db  82h
db 0A4h
db  81h
db  42h ; B
db  81h
db  40h ; @
db  82h
db 0B1h
db  82h
db 0B1h
db  82h
db 0DCh
db  82h
db 0C5h
db  0Ah
db  82h
db 0A8h
db  82h
db 0C2h
db  82h
db 0A9h
db  82h
db 0EAh
db  82h
db 0B3h
db  82h
db 0DCh
db  82h
db 0C5h
db  82h
db 0B5h
db  82h
db 0BDh
db  81h
db  42h ; B
db  0Ah
db    0
db  82h
db 0A4h
db  81h
db  5Bh ; [
db  82h
db 0F1h
db  81h
db  41h ; A
db  82h
db 0B1h
db  82h
db 0CCh
db  93h
db  5Fh ; _
db  90h
db  94h
db  82h
db 0BEh
db  82h
db 0C6h
db  82h
db 0B1h
db  82h
db 0EAh
db  82h
db 0A9h
db  82h
db 0E7h
db  90h
db 0E6h
db  82h
db 0D6h
db  90h
db  69h ; i
db  82h
db 0DEh
db  0Ah
db  82h
db 0CCh
db  82h
db 0CDh
db  81h
db  41h ; A
db  82h
db 0A9h
db  82h
db 0C8h
db  82h
db 0E8h
db  96h
db 0B3h
db  97h
db  9Dh
db  82h
db 0AAh
db  82h
db 0A0h
db  82h
db 0E9h
db  82h
db 0C5h
db  82h
db 0B5h
db  82h
db 0E5h
db  82h
db 0A4h
db  81h
db  42h ; B
db  81h
db  76h ; v
db  0Ah
db    0
db  82h
db 0A2h
db  82h
db 0DCh
db  82h
db 0D0h
db  82h
db 0C6h
db  82h
db 0C2h
db  82h
db 0C5h
db  82h
db 0B7h
db  82h
db 0CBh
db  81h
db  42h ; B
db  81h
db  40h ; @
db  82h
db 0B1h
db  82h
db 0EAh
db  82h
db 0A9h
db  82h
db 0E7h
db  90h
db 0E6h
db  82h
db 0CDh
db  82h
db 0A9h
db  82h
db 0C8h
db  0Ah
db  82h
db 0E8h
db  8Bh
db 0EAh
db  90h
db 0EDh
db  82h
db 0B7h
db  82h
db 0E9h
db  82h
db 0C5h
db  82h
db 0B5h
db  82h
db 0E5h
db  82h
db 0A4h
db  81h
db  42h ; B
db  81h
db  76h ; v
db  0Ah
db    0
db  82h
db 0DCh
db  82h
db 0A0h
db  82h
db 0DCh
db  82h
db 0A0h
db  82h
db 0C5h
db  82h
db 0B7h
db  82h
db 0CBh
db  81h
db  42h ; B
db  81h
db  40h ; @
db  82h
db 0B1h
db  82h
db 0CCh
db  93h
db  5Fh ; _
db  90h
db  94h
db  82h
db 0C8h
db  82h
db 0E7h
db  82h
db 0B1h
db  82h
db 0EAh
db  82h
db 0A9h
db  0Ah
db  82h
db 0E7h
db  90h
db 0E6h
db  82h
db 0E0h
db  82h
db 0C8h
db  82h
db 0F1h
db  82h
db 0C6h
db  82h
db 0A9h
db  82h
db 0C8h
db  82h
db 0E9h
db  82h
db 0C5h
db  82h
db 0B5h
db  82h
db 0E5h
db  82h
db 0A4h
db  81h
db  42h ; B
db  81h
db  76h ; v
db  0Ah
db    0
db  82h
db 0C8h
db  82h
db 0A9h
db  82h
db 0C8h
db  82h
db 0A9h
db  82h
db 0CCh
db  82h
db 0E0h
db  82h
db 0CCh
db  82h
db 0C5h
db  82h
db 0B7h
db  81h
db  42h ; B
db  81h
db  40h ; @
db  82h
db 0E0h
db  82h
db 0A4h
db  8Fh
db 0ADh
db  82h
db 0B5h
db  8Ah
db 0E6h
db  92h
db 0A3h
db  82h
db 0EAh
db  0Ah
db  82h
db 0CEh
db  8Fh
db 0CCh
db  8Dh
db  86h
db  82h
db 0F0h
db  8Dh
db 0B7h
db  82h
db 0B5h
db  8Fh
db 0E3h
db  82h
db 0B0h
db  82h
db 0DCh
db  82h
db 0B5h
db  82h
db 0E5h
db  82h
db 0A4h
db  81h
db  42h ; B
db  81h
db  76h ; v
db  0Ah
db    0
db  82h
db 0E6h
db  82h
db 0ADh
db  82h
db 0AAh
db  82h
db 0F1h
db  82h
db 0CEh
db  82h
db 0E8h
db  82h
db 0DCh
db  82h
db 0B5h
db  82h
db 0BDh
db  82h
db 0CBh
db  81h
db  42h ; B
db  81h
db  40h ; @
db  82h
db 0A0h
db  82h
db 0C8h
db  82h
db 0BDh
db  82h
db 0C9h
db  82h
db 0CDh
db  81h
db  41h ; A
db  0Ah
db  81h
db  40h ; @
db  81h
db  40h ; @
db  81h
db  40h ; @
db  81h
db  40h ; @
db  81h
db  40h ; @
db  81h
db  40h ; @
db  81h
db  77h ; w
db    0
db  81h
db  78h ; x
db  0Ah
db  82h
db 0CCh
db  8Fh
db 0CCh
db  8Dh
db  86h
db  82h
db 0F0h
db  8Dh
db 0B7h
db  82h
db 0B5h
db  8Fh
db 0E3h
db  82h
db 0B0h
db  82h
db 0DCh
db  82h
db 0B5h
db  82h
db 0E5h
db  82h
db 0A4h
db  81h
db  42h ; B
db  81h
db  40h ; @
db  82h
db 0B1h
db  82h
db 0EAh
db  82h
db 0A9h
db  82h
db 0E7h
db  0Ah
db  90h
db 0E6h
db  82h
db 0E0h
db  82h
db 0B1h
db  82h
db 0CCh
db  92h
db 0B2h
db  8Eh
db  71h ; q
db  82h
db 0C5h
db  82h
db 0CBh
db  81h
db  42h ; B
db  81h
db  76h ; v
db  0Ah
db    0
db  82h
db 0A8h
db  82h
db 0DFh
db  82h
db 0C5h
db  82h
db 0C6h
db  82h
db 0A4h
db  81h
db  49h ; I
db  81h
db  40h ; @
db  96h
db  9Eh
db  93h
db  5Fh ; _
db  82h
db 0C5h
db  82h
db 0B7h
db  81h
db  42h ; B
db  81h
db  40h ; @
db  82h
db 0A0h
db  82h
db 0C8h
db  82h
db 0BDh
db  82h
db 0C9h
db  82h
db 0CDh
db  0Ah
db  81h
db  40h ; @
db  81h
db  40h ; @
db  81h
db  40h ; @
db  81h
db  40h ; @
db  81h
db  40h ; @
db  81h
db  40h ; @
db  81h
db  77h ; w
db    0
db  81h
db  78h ; x
db  0Ah
db  82h
db 0CCh
db  8Fh
db 0CCh
db  8Dh
db  86h
db  82h
db 0F0h
db  8Dh
db 0B7h
db  82h
db 0B5h
db  8Fh
db 0E3h
db  82h
db 0B0h
db  82h
db 0DCh
db  82h
db 0B5h
db  82h
db 0E5h
db  82h
db 0A4h
db  81h
db  42h ; B
db  81h
db  40h ; @
db  82h
db 0B1h
db  82h
db 0EAh
db  82h
db 0A9h
db  82h
db 0E7h
db  0Ah
db  90h
db 0E6h
db  82h
db 0E0h
db  82h
db 0B1h
db  82h
db 0CCh
db  92h
db 0B2h
db  8Eh
db  71h ; q
db  82h
db 0C5h
db  82h
db 0CBh
db  81h
db  42h ; B
db  81h
db  76h ; v
db  0Ah
db    0
db  81h
db  40h ; @
db  81h
db  40h ; @
db  83h
db  47h ; G
db  83h
db  8Ah
db  83h
db  4Eh ; N
db  83h
db  54h ; T
db  81h
db  5Bh ; [
db  0Ah
db    0
unk_2387F db  81h
db  40h ; @
db  81h
db  40h ; @
db  83h
db  7Dh ; }
db  83h
db  67h ; g
db  83h
db  62h ; b
db  83h
db  4Eh ; N
db  0Ah
db    0
unk_2388D db  81h
db  40h ; @
db  81h
db  40h ; @
db  94h
db  6Ah ; j
db  89h
db 0F3h
db  82h
db 0CCh
db  8Bh
db 0CAh
db  0Ah
db    0
unk_2389B db  81h
db  40h ; @
db  81h
db  40h ; @
db  8Bh
db 0F3h
db  8Ah
db 0D4h
db  93h
db  5Dh ; ]
db  88h
db 0DAh
db  82h
db 0CCh
db  94h
db 0E9h
db  95h
db 0F3h
db  0Ah
db    0
unk_238AF db  81h
db  40h ; @
db  81h
db  40h ; @
db  8Fh
db 0B8h
db  89h
db 0D8h
db  82h
db 0CCh
db  97h
db  83h
db  0Ah
db    0
unk_238BD db  81h
db  40h ; @
db  81h
db  40h ; @
db  8Dh
db  7Eh ; ~
db  97h
db 0D5h
db  82h
db 0CCh
db  97h
db  83h
db  0Ah
db    0
unk_238CB db  81h
db  40h ; @
db  81h
db  40h ; @
db  96h
db  82h
db  96h
db  40h ; @
db  82h
db 0CCh
db  8Ch
db 0AEh
db  0Ah
db    0
unk_238D9 db  81h
db  40h ; @
db  81h
db  40h ; @
db  83h
db  58h ; X
db  81h
db  5Bh ; [
db  83h
db  70h ; p
db  81h
db  5Bh ; [
db  83h
db  7Dh ; }
db  83h
db  67h ; g
db  83h
db  62h ; b
db  83h
db  4Eh ; N
db  0Ah
db    0
unk_238EF db  81h
db  40h ; @
db  81h
db  40h ; @
db  82h
db 0E2h
db  82h
db 0C1h
db  82h
db 0CFh
db  82h
db 0E8h
db  82h
db 0E2h
db  82h
db 0DFh
db  82h
db 0E9h
db  0Ah
db    0
db  82h
db 0C7h
db  82h
db 0CCh
db  83h
db  41h ; A
db  83h
db  43h ; C
db  83h
db  65h ; e
db  83h
db  80h ; �
db  82h
db 0F0h
db  8Eh
db  67h ; g
db  82h
db 0A2h
db  82h
db 0DCh
db  82h
db 0B7h
db  82h
db 0A9h
db  81h
db  48h ; H
db  0Ah
db    0
db  90h
db 0B6h
db  96h
db 0BDh
db  97h
db 0CDh
db  81h
db  40h ; @
db    0
db  83h
db  7Ch ; |
db  83h
db  43h ; C
db  83h
db  93h
db  83h
db  67h ; g
db  89h
db 0F1h
db  95h
db  9Ch
db  82h
db 0B5h
db  82h
db 0BDh
db  81h
db  49h ; I
db    0
db  83h
db  7Dh ; }
db  83h
db  67h ; g
db  83h
db  62h ; b
db  83h
db  4Eh ; N
db  82h
db 0F0h
db  8Eh
db  67h ; g
db  82h
db 0C1h
db  82h
db 0C4h
db  8Eh
db  6Ch ; l
db  95h
db 0FBh
db  82h
db 0CCh
db  95h
db 0C7h
db  82h
db 0F0h
db  95h
db 0F6h
db  82h
db 0B5h
db  82h
db 0BDh
db  81h
db  49h ; I
db    0
db  8Eh
db  6Ch ; l
db  95h
db 0FBh
db  82h
db 0CCh
db  93h
db  47h ; G
db  82h
db 0F0h
db  95h
db 0B2h
db  8Dh
db 0D3h
db  82h
db 0B5h
db  82h
db 0BDh
db  81h
db  49h ; I
db    0
db  8Bh
db 0F3h
db  8Ah
db 0D4h
db  93h
db  5Dh ; ]
db  88h
db 0DAh
db  82h
db 0B5h
db  82h
db 0BDh
db  81h
db  49h ; I
db    0
db  8Fh
db 0E1h
db  8Ah
db  51h ; Q
db  95h
db 0A8h
db  82h
db 0AAh
db  82h
db 0A0h
db  82h
db 0C1h
db  82h
db 0C4h
db  8Bh
db 0F3h
db  8Ah
db 0D4h
db  93h
db  5Dh ; ]
db  88h
db 0DAh
db  82h
db 0C5h
db  82h
db 0ABh
db  82h
db 0C8h
db  82h
db 0A2h
db  81h
db  49h ; I
db    0
db  8Fh
db 0E3h
db  82h
db 0CCh
db  8Ah
db  4Bh ; K
db  82h
db 0C9h
db  8Fh
db 0E1h
db  8Ah
db  51h ; Q
db  95h
db 0A8h
db  82h
db 0AAh
db  82h
db 0A0h
db  82h
db 0C1h
db  82h
db 0C4h
db  93h
db  5Dh ; ]
db  88h
db 0DAh
db  82h
db 0AAh
db  82h
db 0C5h
db  82h
db 0ABh
db  82h
db 0C8h
db  82h
db 0A2h
db  81h
db  42h ; B
db    0
db  8Fh
db 0B8h
db  89h
db 0D8h
db  82h
db 0CCh
db  97h
db  83h
db  82h
db 0F0h
db  8Eh
db  67h ; g
db  82h
db 0C1h
db  82h
db 0BDh
db  81h
db  49h ; I
db    0
db  89h
db 0BAh
db  82h
db 0CCh
db  8Ah
db  4Bh ; K
db  82h
db 0C9h
db  8Fh
db 0E1h
db  8Ah
db  51h ; Q
db  95h
db 0A8h
db  82h
db 0AAh
db  82h
db 0A0h
db  82h
db 0C1h
db  82h
db 0C4h
db  93h
db  5Dh ; ]
db  88h
db 0DAh
db  82h
db 0AAh
db  82h
db 0C5h
db  82h
db 0ABh
db  82h
db 0C8h
db  82h
db 0A2h
db  81h
db  42h ; B
db    0
db  8Dh
db  7Eh ; ~
db  97h
db 0D5h
db  82h
db 0CCh
db  97h
db  83h
db  82h
db 0F0h
db  8Eh
db  67h ; g
db  82h
db 0C1h
db  82h
db 0BDh
db  81h
db  49h ; I
db    0
db  83h
db  58h ; X
db  81h
db  5Bh ; [
db  83h
db  70h ; p
db  81h
db  5Bh ; [
db  83h
db  7Dh ; }
db  83h
db  67h ; g
db  83h
db  62h ; b
db  83h
db  4Eh ; N
db  82h
db 0F0h
db  8Eh
db  67h ; g
db  82h
db 0C1h
db  82h
db 0BDh
db  81h
db  49h ; I
db    0
db  96h
db  82h
db  96h
db  40h ; @
db  82h
db 0CCh
db  8Ch
db 0AEh
db  82h
db 0F0h
db  8Eh
db  67h ; g
db  82h
db 0C1h
db  82h
db 0BDh
db  81h
db  49h ; I
db    0
db  81h
db  40h ; @
db  8Fh
db 0EEh
db  95h
db 0F1h
db  94h
db 0D4h
db  8Dh
db  86h
db  81h
db  46h ; F
db    0
db  0Ah
db  20h
db  57h ; W
db  41h ; A
db  52h ; R
db  4Eh ; N
db  49h ; I
db  4Eh ; N
db  47h ; G
db  20h
db  21h ; !
db  21h ; !
db  21h ; !
db  20h
db 0D3h
db 0DDh
db 0BDh
db 0C0h
db 0B0h
db  20h
db 0CAh
db 0DEh
db 0DDh
db 0BAh
db 0DEh
db 0B3h
db  20h
db 0B6h
db 0DEh
db 0D0h
db 0C2h
db 0B6h
db 0D8h
db 0CFh
db 0BEh
db 0DDh
db  20h
db  21h ; !
db  21h ; !
db  21h ; !
db    0
db  96h
db 0BDh
db    0
db  8Dh
db  55h ; U
db    0
db  96h
db  68h ; h
db    0
db  81h
db  40h ; @
db  81h
db  40h ; @
db  81h
db  40h ; @
db  81h
db  40h ; @
db  81h
db  40h ; @
db  8Dh
db  55h ; U
db  8Ch
db  82h
db  95h
db  73h ; s
db  89h
db 0C2h
db  94h
db  5Ch ; \
db    0
db  97h
db  5Ch ; \
db  91h
db  7Ah ; z
db  83h
db  5Fh ; _
db  83h
db  81h
db  81h
db  5Bh ; [
db  83h
db  57h ; W
db    0
db  8Ah
db  4Bh ; K
db  92h
db  69h ; i
db  82h
db 0CCh
db  97h
db 0D7h
db  82h
db 0C5h
db  82h
db 0C8h
db  82h
db 0AFh
db  82h
db 0EAh
db  82h
db 0CEh
db  8Eh
db  67h ; g
db  82h
db 0A6h
db  82h
db 0DCh
db  82h
db 0B9h
db  82h
db 0F1h
db  81h
db  42h ; B
db    0
db  81h
db 0AAh
db  81h
db 0ABh
db  82h
db 0C5h
db  88h
db 0DAh
db  93h
db 0AEh
db  82h
db 0B7h
db  82h
db 0E9h
db  8Ah
db  4Bh ; K
db  82h
db 0F0h
db  91h
db  49h ; I
db  91h
db 0F0h
db  82h
db 0B5h
db  82h
db 0C4h
db  81h
db  41h ; A
db  83h
db  8Ah
db  83h
db  5Eh ; ^
db  81h
db  5Bh ; [
db  83h
db  93h
db  82h
db 0C5h
db  8Ch
db  88h
db  92h
db 0E8h
db  82h
db 0B5h
db  82h
db 0C4h
db  82h
db 0ADh
db  82h
db 0BEh
db  82h
db 0B3h
db  82h
db 0A2h
db  81h
db  42h ; B
db    0
db    0
db  0Ah
db  20h
db  57h ; W
db  41h ; A
db  52h ; R
db  4Eh ; N
db  49h ; I
db  4Eh ; N
db  47h ; G
db  20h
db  21h ; !
db  21h ; !
db  21h ; !
db  20h
db 0D3h
db 0DDh
db 0BDh
db 0C0h
db 0B0h
db  20h
db 0CAh
db 0DEh
db 0DDh
db 0BAh
db 0DEh
db 0B3h
db  20h
db 0B6h
db 0DEh
db 0D0h
db 0C2h
db 0B6h
db 0D8h
db 0CFh
db 0BEh
db 0DDh
db  20h
db  21h ; !
db  21h ; !
db  21h ; !
db    0
byte_23B28 db 0
align 2
word_23B2A dw 0
db  0Ah
db  20h
db  57h ; W
db  41h ; A
db  52h ; R
db  4Eh ; N
db  49h ; I
db  4Eh ; N
db  47h ; G
db  20h
db  21h ; !
db  21h ; !
db  21h ; !
db  20h
db 0D3h
db 0DDh
db 0BDh
db 0C0h
db 0B0h
db  20h
db 0CAh
db 0DEh
db 0DDh
db 0BAh
db 0DEh
db 0B3h
db  20h
db 0B6h
db 0DEh
db 0D0h
db 0C2h
db 0B6h
db 0D8h
db 0CFh
db 0BEh
db 0DDh
db  20h
db  21h ; !
db  21h ; !
db  21h ; !
db    0
db  96h
db 0BDh
db    0
db  8Dh
db  55h ; U
db    0
db  96h
db  68h ; h
db    0
db  82h
db  66h ; f
db  82h
db  60h ; `
db  82h
db  6Ch ; l
db  82h
db  64h ; d
db  81h
db  40h ; @
db  82h
db  6Eh ; n
db  82h
db  75h ; u
db  82h
db  64h ; d
db  82h
db  71h ; q
db    0
db  49h ; I
db  4Eh ; N
db  49h ; I
db  54h ; T
db  49h ; I
db  41h ; A
db  4Ch ; L
db  2Eh ; .
db  44h ; D
db  41h ; A
db  54h ; T
db    0
db  72h ; r
db  62h ; b
db    0
db  83h
db  5Ah ; Z
db  81h
db  5Bh ; [
db  83h
db  75h ; u
db  83h
db  66h ; f
db  81h
db  5Bh ; [
db  83h
db  5Eh ; ^
db  82h
db 0AAh
db  82h
db 0A0h
db  82h
db 0E8h
db  82h
db 0DCh
db  82h
db 0B9h
db  82h
db 0F1h
db  81h
db  42h ; B
db    0
unk_23B9B db    0
unk_23B9C db  81h
db  40h ; @
db  92h
db 0B7h
db  8Ch
db  95h
db    0
unk_23BA3 db  20h
db  8Bh
db 0E2h
db  82h
db 0CCh
db  8Ch
db  95h
db    0
unk_23BAB db  8Bh
db  52h ; R
db  8Eh
db  6Dh ; m
db  82h
db 0CCh
db  8Ch
db  95h
db    0
unk_23BB4 db  81h
db  40h ; @
db  90h
db 0B9h
db  8Ch
db  95h
db    0
unk_23BBB db  81h
db  40h ; @
db  90h
db  5Fh ; _
db  8Ch
db  95h
db    0
unk_23BC2 db    0
unk_23BC3 db  20h
db  93h
db  53h ; S
db  82h
db 0CCh
db  8Fh
db  82h
db    0
unk_23BCB db  20h
db  8Bh
db 0E2h
db  82h
db 0CCh
db  8Fh
db  82h
db    0
unk_23BD3 db  8Bh
db  52h ; R
db  8Eh
db  6Dh ; m
db  82h
db 0CCh
db  8Fh
db  82h
db    0
unk_23BDC db  81h
db  40h ; @
db  90h
db 0B9h
db  8Fh
db  82h
db    0
unk_23BE3 db  81h
db  40h ; @
db  90h
db  5Fh ; _
db  8Fh
db  82h
db    0
db  95h
db  57h ; W
db  8Fh
db  80h ; �
db  83h
db  82h
db  81h
db  5Bh ; [
db  83h
db  68h ; h
db  82h
db 0C9h
db  90h
db 0D8h
db  82h
db 0E8h
db  91h
db 0D6h
db  82h
db 0A6h
db  82h
db 0DCh
db  82h
db 0B7h
db    0
db  8Dh
db  82h
db  91h
db 0ACh
db  83h
db  82h
db  81h
db  5Bh ; [
db  83h
db  68h ; h
db  82h
db 0C9h
db  90h
db 0D8h
db  82h
db 0E8h
db  91h
db 0D6h
db  82h
db 0A6h
db  82h
db 0DCh
db  82h
db 0B7h
db    0
db  0Ah
db  20h
db  57h ; W
db  41h ; A
db  52h ; R
db  4Eh ; N
db  49h ; I
db  4Eh ; N
db  47h ; G
db  20h
db  21h ; !
db  21h ; !
db  21h ; !
db  20h
db 0D3h
db 0DDh
db 0BDh
db 0C0h
db 0B0h
db  20h
db 0CAh
db 0DEh
db 0DDh
db 0BAh
db 0DEh
db 0B3h
db  20h
db 0B6h
db 0DEh
db 0D0h
db 0C2h
db 0B6h
db 0D8h
db 0CFh
db 0BEh
db 0DDh
db  20h
db  21h ; !
db  21h ; !
db  21h ; !
db    0
db  93h
db  83h
db  81h
db  40h ; @
db  81h
db  40h ; @
db  8Ah
db  4Bh ; K
db    0
db  82h
db  6Fh ; o
db  82h
db  74h ; t
db  82h
db  72h ; r
db  82h
db  67h ; g
db  81h
db  40h ; @
db  82h
db  71h ; q
db  82h
db  64h ; d
db  82h
db  73h ; s
db  81h
db  40h ; @
db  82h
db  6Ah ; j
db  82h
db  64h ; d
db  82h
db  78h ; x
db  0Ah
db  81h
db  40h ; @
db  81h
db  40h ; @
db  82h
db  73h ; s
db  82h
db  6Eh ; n
db  81h
db  40h ; @
db  82h
db  72h ; r
db  82h
db  73h ; s
db  82h
db  60h ; `
db  82h
db  71h ; q
db  82h
db  73h ; s
db    0
db  77h ; w
db  62h ; b
db    0
db  0Ah
db  20h
db  57h ; W
db  41h ; A
db  52h ; R
db  4Eh ; N
db  49h ; I
db  4Eh ; N
db  47h ; G
db  21h ; !
db  21h ; !
db  21h ; !
db  20h
db 0B6h
db 0B7h
db 0BAh
db 0D0h
db  20h
db 0B4h
db 0D7h
db 0B0h
db  20h
db  21h ; !
db  21h ; !
db  21h ; !
db  20h
db  28h ; (
db  20h
db  25h ; %
db  73h ; s
db  20h
db  29h ; )
db    0
db  72h ; r
db  62h ; b
db    0
db  0Ah
db  20h
db  57h ; W
db  41h ; A
db  52h ; R
db  4Eh ; N
db  49h ; I
db  4Eh ; N
db  47h ; G
db  21h ; !
db  21h ; !
db  21h ; !
db  20h
db 0CCh
db 0A7h
db 0B2h
db 0D9h
db 0B6h
db 0DEh
db  20h
db 0D0h
db 0C2h
db 0B6h
db 0D8h
db 0CFh
db 0BEh
db 0DDh
db  20h
db  21h ; !
db  21h ; !
db  21h ; !
db  20h
db  28h ; (
db  20h
db  25h ; %
db  73h ; s
db  20h
db  29h ; )
db    0
db  0Ah
db  20h
db  62h ; b
db  70h ; p
db  6Ch ; l
db  61h ; a
db  6Eh ; n
db  65h ; e
db  20h
db  3Dh ; =
db  20h
db  25h ; %
db  78h ; x
db  20h
db  25h ; %
db  78h ; x
db  20h
db  20h
db  3Dh ; =
db  20h
db  25h ; %
db  78h ; x
db    0
db  0Ah
db  20h
db  72h ; r
db  70h ; p
db  6Ch ; l
db  61h ; a
db  6Eh ; n
db  65h ; e
db  20h
db  3Dh ; =
db  20h
db  25h ; %
db  78h ; x
db  20h
db  25h ; %
db  78h ; x
db  20h
db  20h
db  3Dh ; =
db  20h
db  25h ; %
db  78h ; x
db    0
db  0Ah
db  20h
db  67h ; g
db  70h ; p
db  6Ch ; l
db  61h ; a
db  6Eh ; n
db  65h ; e
db  20h
db  3Dh ; =
db  20h
db  25h ; %
db  78h ; x
db  20h
db  25h ; %
db  78h ; x
db  20h
db  20h
db  3Dh ; =
db  20h
db  25h ; %
db  78h ; x
db    0
db  0Ah
db  20h
db  65h ; e
db  70h ; p
db  6Ch ; l
db  61h ; a
db  6Eh ; n
db  65h ; e
db  20h
db  3Dh ; =
db  20h
db  25h ; %
db  78h ; x
db  20h
db  25h ; %
db  78h ; x
db  20h
db  20h
db  3Dh ; =
db  20h
db  25h ; %
db  78h ; x
db  0Ah
db    0
db  0Ah
db  20h
db  57h ; W
db  41h ; A
db  52h ; R
db  4Eh ; N
db  49h ; I
db  4Eh ; N
db  47h ; G
db  20h
db  21h ; !
db  21h ; !
db  21h ; !
db  20h
db 0D2h
db 0D3h
db 0D8h
db  20h
db 0B6h
db 0DEh
db  20h
db 0C0h
db 0D8h
db 0CFh
db 0BEh
db 0DDh
db  21h ; !
db  21h ; !
db  21h ; !
db    0
db  0Ah
db  20h
db  64h ; d
db  73h ; s
db  65h ; e
db  67h ; g
db  31h ; 1
db  20h
db  3Dh ; =
db  20h
db  25h ; %
db  78h ; x
db  20h
db  25h ; %
db  78h ; x
db  20h
db  20h
db  3Dh ; =
db  20h
db  25h ; %
db  78h ; x
db    0
db  0Ah
db  20h
db  64h ; d
db  73h ; s
db  65h ; e
db  67h ; g
db  32h ; 2
db  20h
db  3Dh ; =
db  20h
db  25h ; %
db  78h ; x
db  20h
db  25h ; %
db  78h ; x
db  20h
db  20h
db  3Dh ; =
db  20h
db  25h ; %
db  78h ; x
db    0
db  0Ah
db  20h
db  64h ; d
db  73h ; s
db  65h ; e
db  67h ; g
db  33h ; 3
db  20h
db  3Dh ; =
db  20h
db  25h ; %
db  78h ; x
db  20h
db  25h ; %
db  78h ; x
db  20h
db  20h
db  3Dh ; =
db  20h
db  25h ; %
db  78h ; x
db    0
db  0Ah
db  20h
db  64h ; d
db  73h ; s
db  65h ; e
db  67h ; g
db  34h ; 4
db  20h
db  3Dh ; =
db  20h
db  25h ; %
db  78h ; x
db  20h
db  25h ; %
db  78h ; x
db  20h
db  20h
db  3Dh ; =
db  20h
db  25h ; %
db  78h ; x
db  20h
db  0Ah
db    0
db  0Ah
db  81h
db  40h ; @
db  97h
db  56h ; V
db  82h
db 0F1h
db  82h
db 0C5h
db  82h
db 0ADh
db  82h
db 0EAh
db  82h
db 0C4h
db  82h
db 0A0h
db  82h
db 0E8h
db  82h
db 0AAh
db  82h
db 0C6h
db  81h
db  5Bh ; [
db  81h
db  49h ; I
db  81h
db  40h ; @
db  81h
db  69h ; i
db  5Eh ; ^
db  6Fh ; o
db  5Eh ; ^
db  81h
db  6Ah ; j
db  83h
db  6Dh ; m
db  81h
db  40h ; @
db  0Ah
db    0
db  4Dh ; M
db  54h ; T
db  4Fh ; O
db  57h ; W
db  45h ; E
db  52h ; R
db  31h ; 1
db  2Eh ; .
db  50h ; P
db  35h ; 5
db  38h ; 8
db    0
db  4Dh ; M
db  54h ; T
db  4Fh ; O
db  57h ; W
db  45h ; E
db  52h ; R
db  32h ; 2
db  2Eh ; .
db  50h ; P
db  35h ; 5
db  38h ; 8
db    0
db  4Dh ; M
db  54h ; T
db  45h ; E
db  4Eh ; N
db  44h ; D
db  4Dh ; M
db  4Ah ; J
db  2Eh ; .
db  50h ; P
db  35h ; 5
db  38h ; 8
db    0
db  4Dh ; M
db  54h ; T
db  46h ; F
db  49h ; I
db  4Eh ; N
db  2Eh ; .
db  50h ; P
db  35h ; 5
db  38h ; 8
db    0
db  96h
db 0C0h
db  8Bh
db  7Bh ; {
db  82h
db  71h ; q
db  82h
db  6Fh ; o
db  82h
db  66h ; f
db  81h
db  77h ; w
db  96h
db  82h
db  96h
db  40h ; @
db  82h
db 0CCh
db  93h
db  83h
db  81h
db  78h ; x
db    0
db  82h
db  67h ; g
db  82h
db  89h
db  82h
db  94h
db  81h
db  40h ; @
db  82h
db  81h
db  82h
db  8Eh
db  82h
db  99h
db  81h
db  40h ; @
db  82h
db  8Bh
db  82h
db  85h
db  82h
db  99h
db  81h
db  49h ; I
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  0Bh
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db  32h ; 2
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    1
db    0
db    1
db    0
db    1
db    0
db  0Bh
db    0
db    6
db    0
db  3Dh ; =
db    0
db  3Fh ; ?
db    0
db  3Dh ; =
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db  20h
db    0
db    6
db    0
db    6
db    0
db    1
db    0
db    6
db    0
db    8
db    0
db  22h ; "
db    0
db  1Dh
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db  4Dh ; M
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db  23h ; #
db    0
db  20h
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    1
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    1
db    0
db    8
db    0
db    6
db    0
db  1Dh
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    1
db    0
db  43h ; C
db    0
db  45h ; E
db    0
db  43h ; C
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db  4Fh ; O
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    1
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    1
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    1
db    0
db    8
db    0
db  20h
db    0
db    6
db    0
db  1Dh
db    0
db    8
db    0
db  1Dh
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db  43h ; C
db    0
db    6
db    0
db  20h
db    0
db  26h ; &
db    0
db  1Dh
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db  3Dh ; =
db    0
db  21h ; !
db    0
db  3Dh ; =
db    0
db    2
db    0
db  0Bh
db    0
db  63h ; c
db    0
db  0Ch
db    0
db    6
db    0
db    2
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db  4Bh ; K
db    0
db    6
db    0
db  4Bh ; K
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db  1Dh
db    0
db  1Dh
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db  13h
db    0
db    6
db    0
db    8
db    0
db  1Dh
db    0
db    6
db    0
db    5
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    5
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db  15h
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db  19h
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    5
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    5
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db  21h ; !
db    0
db  21h ; !
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db  0Bh
db    0
db    8
db    0
db  21h ; !
db    0
db    6
db    0
db    5
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    5
db    0
db    6
db    0
word_2410E dw 6
db    3
db    0
db  6Fh ; o
db    0
db  77h ; w
db    0
db  1Dh
db    0
db  23h ; #
db    0
db    8
db    0
db  1Dh
db    0
db  21h ; !
db    0
db  1Dh
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db  20h
db    0
db    6
db    0
db  20h
db    0
db    8
db    0
db  21h ; !
db    0
db  1Dh
db    0
db  21h ; !
db    0
db    8
db    0
db    6
db    0
db    1
db    0
db  43h ; C
db    0
db    6
db    0
db  45h ; E
db    0
db    6
db    0
db    8
db    0
db  1Dh
db    0
db  1Fh
db    0
db  1Dh
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    1
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db  19h
db    0
db    6
db    0
db    6
db    0
db  43h ; C
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db  3Dh ; =
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    1
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db  4Dh ; M
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db  20h
db    0
db    6
db    0
db  1Dh
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    1
db    0
db  45h ; E
db    0
db  1Dh
db    0
db  20h
db    0
db  22h ; "
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db  3Fh ; ?
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db  0Ch
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    1
db    0
db    6
db    0
db  0Bh
db    0
db    4
db    0
db  6Dh ; m
db    0
db  63h ; c
db    0
db    6
db    0
db  1Fh
db    0
db    6
db    0
db    8
db    0
db  0Fh
db    0
db  10h
db    0
db  11h
db    0
db    8
db    0
db    6
db    0
db  19h
db    0
db    6
db    0
db  20h
db    0
db    6
db    0
db  1Dh
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db  1Dh
db    0
db    6
db    0
db  21h ; !
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db  4Fh ; O
db    0
db    6
db    0
db    8
db    0
db    1
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    2
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    1
db    0
db    8
db    0
db    6
db    0
db  45h ; E
db    0
db    6
db    0
db    1
db    0
db    6
db    0
db  3Fh ; ?
db    0
db    6
db    0
db    6
db    0
db  4Dh ; M
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db  3Fh ; ?
db    0
db    6
db    0
db  3Dh ; =
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    1
db    0
db    6
db    0
db    1
db    0
db    8
db    0
db    8
db    0
db    1
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    1
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db  43h ; C
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db  45h ; E
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db  3Dh ; =
db    0
db    6
db    0
db  1Dh
db    0
db    8
db    0
db  22h ; "
db    0
db    6
db    0
db  20h
db    0
db    8
db    0
db    6
db    0
db  0Bh
db    0
db    8
db    0
db  1Dh
db    0
db  3Dh ; =
db    0
db  1Dh
db    0
db    8
db    0
db    6
db    0
db  3Dh ; =
db    0
db    6
db    0
db    8
db    0
db  0Ch
db    0
db    5
db    0
db  6Fh ; o
db    0
db  0Bh
db    0
db  0Bh
db    0
db    8
db    0
db    6
db    0
db  3Fh ; ?
db    0
db    1
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    1
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db  1Dh
db    0
db    8
db    0
db  3Dh ; =
db    0
db  3Dh ; =
db    0
db    8
db    0
db  3Fh ; ?
db    0
db    6
db    0
db    1
db    0
db  43h ; C
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db  1Dh
db    0
db  1Dh
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    1
db    0
db    8
db    0
db  43h ; C
db    0
db    8
db    0
db  1Dh
db    0
db  1Dh
db    0
db    8
db    0
db    6
db    0
db  1Dh
db    0
db    6
db    0
db  45h ; E
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db  1Dh
db    0
db    6
db    0
db    6
db    0
db  43h ; C
db    0
db    8
db    0
db    6
db    0
db  3Dh ; =
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db  4Fh ; O
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db  3Fh ; ?
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db  3Dh ; =
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db  23h ; #
db    0
db  1Dh
db    0
db  20h
db    0
db  25h ; %
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    1
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db  0Ch
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    9
db    0
db    6
db    0
db  33h ; 3
db    0
db    6
db    0
db  0Bh
db    0
db  6Dh ; m
db    0
db  0Ch
db    0
db    8
db    0
db  1Dh
db    0
db  1Dh
db    0
db    8
db    0
db    6
db    0
db  45h ; E
db    0
db    6
db    0
db  1Dh
db    0
db  3Dh ; =
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db  1Dh
db    0
db  1Dh
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    1
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db  3Fh ; ?
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db  20h
db    0
db    6
db    0
db  4Dh ; M
db    0
db    6
db    0
db    6
db    0
db    1
db    0
db    1
db    0
db    6
db    0
db    1
db    0
db    6
db    0
db    8
db    0
db  13h
db    0
db    6
db    0
db    6
db    0
db  43h ; C
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db  3Fh ; ?
db    0
db  45h ; E
db    0
db    6
db    0
db  1Dh
db    0
db    6
db    0
db  4Dh ; M
db    0
db  4Fh ; O
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db  45h ; E
db    0
db    6
db    0
db    6
db    0
db  19h
db    0
db    8
db    0
db    6
db    0
db    1
db    0
db    1
db    0
db    6
db    0
db    1
db    0
db    6
db    0
db    6
db    0
db  43h ; C
db    0
db    6
db    0
db  23h ; #
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db  3Fh ; ?
db    0
db    8
db    0
db  3Fh ; ?
db    0
db    1
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db  3Dh ; =
db    0
db    6
db    0
db    6
db    0
db  4Dh ; M
db    0
db    6
db    0
db    8
db    0
db  20h
db    0
db  20h
db    0
db    8
db    0
db  0Bh
db    0
db    7
db    0
db  6Dh ; m
db    0
db  0Bh
db    0
db  0Bh
db    0
db    8
db    0
db  22h ; "
db    0
db    8
db    0
db    6
db    0
db  13h
db    0
db    6
db    0
db    8
db    0
db  1Dh
db    0
db    8
db    0
db  3Dh ; =
db    0
db    6
db    0
db    8
db    0
db  20h
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db  1Dh
db    0
db    8
db    0
db  3Fh ; ?
db    0
db    6
db    0
db    8
db    0
db  43h ; C
db    0
db    8
db    0
db  3Fh ; ?
db    0
db    8
db    0
db  4Fh ; O
db    0
db    8
db    0
db  20h
db    0
db    8
db    0
db  3Dh ; =
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    1
db    0
db    8
db    0
db    1
db    0
db    8
db    0
db    2
db    0
db    8
db    0
db    1
db    0
db    8
db    0
db  4Dh ; M
db    0
db    8
db    0
db    1
db    0
db    6
db    0
db  4Fh ; O
db    0
db    6
db    0
db  45h ; E
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    1
db    0
db    8
db    0
db    1
db    0
db    8
db    0
db    1
db    0
db    8
db    0
db    1
db    0
db    8
db    0
db  4Fh ; O
db    0
db    8
db    0
db    1
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db  43h ; C
db    0
db    8
db    0
db  3Fh ; ?
db    0
db    8
db    0
db  21h ; !
db    0
db    8
db    0
db    6
db    0
db  3Dh ; =
db    0
db    8
db    0
db  3Dh ; =
db    0
db    8
db    0
db  1Dh
db    0
db    8
db    0
db  45h ; E
db    0
db    8
db    0
db  1Dh
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db  3Fh ; ?
db    0
db    6
db    0
db    8
db    0
db  1Dh
db    0
db    8
db    0
db  21h ; !
db    0
db    8
db    0
db  1Dh
db    0
db    8
db    0
db  0Ch
db    0
db    8
db    0
db  0Bh
db    0
db  10h
db    0
db  0Ch
db    0
db    6
db    0
db    1
db    0
db    1
db    0
db    6
db    0
db  0Bh
db    0
db    6
db    0
db    8
db    0
db  1Dh
db    0
db    6
db    0
db  1Dh
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db  3Dh ; =
db    0
db    8
db    0
db    6
db    0
db  1Eh
db    0
db    6
db    0
db    1
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    1
db    0
db    8
db    0
db    8
db    0
db  21h ; !
db    0
db    6
db    0
db  20h
db    0
db    6
db    0
db    8
db    0
db  1Dh
db    0
db  1Dh
db    0
db  1Dh
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    4
db    0
db    8
db    0
db  20h
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db  45h ; E
db    0
db    8
db    0
db  49h ; I
db    0
db    6
db    0
db  49h ; I
db    0
db    6
db    0
db  3Fh ; ?
db    0
db  3Dh ; =
db    0
db  3Fh ; ?
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    1
db    0
db    8
db    0
db  43h ; C
db    0
db    8
db    0
db    8
db    0
db    1
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db  43h ; C
db    0
db    6
db    0
db  4Dh ; M
db    0
db    6
db    0
db  45h ; E
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    1
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    1
db    0
db  3Dh ; =
db    0
db    6
db    0
db    8
db    0
db  22h ; "
db    0
db  1Dh
db    0
db    8
db    0
db  1Fh
db    0
db  20h
db    0
db    8
db    0
db    6
db    0
db  4Dh ; M
db    0
db    6
db    0
db  43h ; C
db    0
db    2
db    0
db  1Dh
db    0
db  23h ; #
db    0
db    8
db    0
db  1Dh
db    0
db    6
db    0
db    1
db    0
db  4Fh ; O
db    0
db    6
db    0
db    9
db    0
db  10h
db    0
db  63h ; c
db    0
db    6
db    0
db    6
db    0
db  4Dh ; M
db    0
db    1
db    0
db    6
db    0
db  0Ch
db    0
db    6
db    0
db    1
db    0
db  3Dh ; =
db    0
db    6
db    0
db  20h
db    0
db    6
db    0
db  1Dh
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db  3Dh ; =
db    0
db    6
db    0
db  4Fh ; O
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    2
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db  1Dh
db    0
db    6
db    0
db    8
db    0
db  1Dh
db    0
db    6
db    0
db  1Dh
db    0
db    1
db    0
db    1
db    0
db    6
db    0
db    6
db    0
db  23h ; #
db    0
db    6
db    0
db  43h ; C
db    0
db    1
db    0
db    6
db    0
db  22h ; "
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    9
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db  3Fh ; ?
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db  4Fh ; O
db    0
db  1Dh
db    0
db    6
db    0
db    1
db    0
db  4Fh ; O
db    0
db  1Dh
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db  38h ; 8
db    0
db    8
db    0
db    6
db    0
db  4Fh ; O
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    1
db    0
db    1
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    1
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db  1Dh
db    0
db    6
db    0
db  45h ; E
db    0
db    6
db    0
db  20h
db    0
db    8
db    0
db    6
db    0
db  4Dh ; M
db    0
db    8
db    0
db  43h ; C
db    0
db    8
db    0
db    6
db    0
db  4Dh ; M
db    0
db    6
db    0
db  0Bh
db    0
db    6
db    0
db    2
db    0
db    6
db    0
db    6
db    0
db    1
db    0
db    6
db    0
db    1
db    0
db  45h ; E
db    0
db    6
db    0
db  20h
db    0
db  0Ah
db    0
db  63h ; c
db    0
db  68h ; h
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db  4Dh ; M
db    0
db  4Dh ; M
db    0
db  4Dh ; M
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db  4Dh ; M
db    0
db  4Dh ; M
db    0
db  4Dh ; M
db    0
db    6
db    0
db  4Fh ; O
db    0
db    6
db    0
db    4
db    0
db    6
db    0
db  51h ; Q
db    0
db    6
db    0
db    4
db    0
db    6
db    0
db  4Fh ; O
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db  4Dh ; M
db    0
db  23h ; #
db    0
db  4Dh ; M
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db  4Dh ; M
db    0
db  22h ; "
db    0
db  4Dh ; M
db    0
db    6
db    0
db  4Fh ; O
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db  4Fh ; O
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    1
db    0
db    8
db    0
db    1
db    0
db    8
db    0
db    8
db    0
db    3
db    0
db    8
db    0
db    8
db    0
db    1
db    0
db    8
db    0
db    1
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db  0Ch
db    0
db    8
db    0
db    6
db    0
db  45h ; E
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db  45h ; E
db    0
db    6
db    0
db    8
db    0
db  21h ; !
db    0
db  0Bh
db    0
db  68h ; h
db    0
db  6Dh ; m
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db  22h ; "
db    0
db    6
db    0
db    1
db    0
db    6
db    0
db    8
db    0
db  20h
db    0
db  1Dh
db    0
db    6
db    0
db  39h ; 9
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db  43h ; C
db    0
db    8
db    0
db  55h ; U
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    1
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    1
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    4
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db  53h ; S
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db  41h ; A
db    0
db  47h ; G
db    0
db    6
db    0
db  47h ; G
db    0
db    8
db    0
db  55h ; U
db    0
db    6
db    0
db    1
db    0
db  47h ; G
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db  20h
db    0
db    8
db    0
db    6
db    0
db  21h ; !
db    0
db    6
db    0
db    6
db    0
db  53h ; S
db    0
db    6
db    0
db    6
db    0
db    1
db    0
db  41h ; A
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    2
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db  53h ; S
db    0
db    6
db    0
db  53h ; S
db    0
db    6
db    0
db  41h ; A
db    0
db    1
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db  43h ; C
db    0
db    6
db    0
db  1Dh
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    1
db    0
db    8
db    0
db    6
db    0
db  1Dh
db    0
db  1Dh
db    0
db  1Dh
db    0
db  1Dh
db    0
db    8
db    0
db  0Ch
db    0
db    8
db    0
db  21h ; !
db    0
db  53h ; S
db    0
db    8
db    0
db  0Bh
db    0
db  0Ch
db    0
db  77h ; w
db    0
db  6Fh ; o
db    0
db  13h
db    0
db    9
db    0
db    6
db    0
db    8
db    0
db  1Dh
db    0
db  22h ; "
db    0
db  1Dh
db    0
db    8
db    0
db    6
db    0
db    9
db    0
db  0Ah
db    0
db    8
db    0
db    8
db    0
db  53h ; S
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db  47h ; G
db    0
db    6
db    0
db  47h ; G
db    0
db    8
db    0
db    6
db    0
db  55h ; U
db    0
db    6
db    0
db    1
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    1
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db  47h ; G
db    0
db    6
db    0
db    1
db    0
db    6
db    0
db  55h ; U
db    0
db    6
db    0
db    8
db    0
db  20h
db    0
db    6
db    0
db  53h ; S
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db  47h ; G
db    0
db    1
db    0
db    6
db    0
db  23h ; #
db    0
db    6
db    0
db  1Dh
db    0
db  1Dh
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db  21h ; !
db    0
db    6
db    0
db    8
db    0
db  1Dh
db    0
db    6
db    0
db  41h ; A
db    0
db  1Dh
db    0
db  1Fh
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    2
db    0
db    8
db    0
db    1
db    0
db    6
db    0
db    6
db    0
db  55h ; U
db    0
db    8
db    0
db  0Fh
db    0
db  10h
db    0
db  11h
db    0
db    8
db    0
db  41h ; A
db    0
db    6
db    0
db  55h ; U
db    0
db    8
db    0
db    8
db    0
db    1
db    0
db    8
db    0
db  20h
db    0
db    6
db    0
db  20h
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db  0Bh
db    0
db    6
db    0
db    6
db    0
db  43h ; C
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db  43h ; C
db    0
db    6
db    0
db    6
db    0
db  0Ch
db    0
db  0Dh
db    0
db  6Fh ; o
db    0
db  77h ; w
db    0
db  0Dh
db    0
db  0Dh
db    0
db  0Dh
db    0
db  0Dh
db    0
db  0Dh
db    0
db  0Dh
db    0
db  0Dh
db    0
db  0Dh
db    0
db  0Dh
db    0
db  0Dh
db    0
db  0Dh
db    0
db  0Dh
db    0
db  0Dh
db    0
db  0Dh
db    0
db  0Dh
db    0
db  0Dh
db    0
db  0Dh
db    0
db  0Dh
db    0
db  0Dh
db    0
db  0Dh
db    0
db  0Dh
db    0
db  0Dh
db    0
db  0Dh
db    0
db  0Dh
db    0
db  0Dh
db    0
db  0Dh
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db  0Dh
db    0
db  0Dh
db    0
db  0Dh
db    0
db  0Dh
db    0
db  0Dh
db    0
db  0Dh
db    0
db  0Dh
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db  0Dh
db    0
db  0Dh
db    0
db  0Dh
db    0
db  0Dh
db    0
db  0Dh
db    0
db  0Dh
db    0
db    8
db    0
db    8
db    0
db  37h ; 7
db    0
db    8
db    0
db    8
db    0
db  0Dh
db    0
db  0Dh
db    0
db  0Dh
db    0
db  0Dh
db    0
db  0Dh
db    0
db  0Dh
db    0
db    8
db    0
db    8
db    0
db  0Dh
db    0
db    8
db    0
db    8
db    0
db  0Dh
db    0
db  0Dh
db    0
db  0Dh
db    0
db  0Dh
db    0
db  0Dh
db    0
db  0Dh
db    0
db  0Dh
db    0
db    8
db    0
db  0Dh
db    0
db    8
db    0
db  0Dh
db    0
db  0Dh
db    0
db  0Dh
db    0
db  0Dh
db    0
db  0Dh
db    0
db  0Dh
db    0
db  0Dh
db    0
db  0Dh
db    0
db  0Dh
db    0
db  0Dh
db    0
db  0Dh
db    0
db  0Dh
db    0
db  0Dh
db    0
db  0Dh
db    0
db  0Dh
db    0
db  0Dh
db    0
db  0Dh
db    0
db  0Dh
db    0
db  0Dh
db    0
db  0Dh
db    0
db  0Dh
db    0
db  0Dh
db    0
db  0Dh
db    0
db  0Dh
db    0
db  0Dh
db    0
db  0Dh
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    1
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db  0Ch
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db  0Bh
db    0
db  0Eh
db    0
db  77h ; w
db    0
db  68h ; h
db    0
db  57h ; W
db    0
db    6
db    0
db  57h ; W
db    0
db    8
db    0
db  23h ; #
db    0
db  1Dh
db    0
db  20h
db    0
db    8
db    0
db  1Dh
db    0
db  1Dh
db    0
db  1Dh
db    0
db    6
db    0
db  57h ; W
db    0
db    6
db    0
db    8
db    0
db  41h ; A
db    0
db    8
db    0
db  57h ; W
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db  1Dh
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    1
db    0
db    8
db    0
db    8
db    0
db    2
db    0
db    8
db    0
db    8
db    0
db    2
db    0
db    8
db    0
db    1
db    0
db    8
db    0
db    6
db    0
db  57h ; W
db    0
db    6
db    0
db  20h
db    0
db    6
db    0
db    6
db    0
db  53h ; S
db    0
db    6
db    0
db  59h ; Y
db    0
db    6
db    0
db  53h ; S
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db  41h ; A
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    1
db    0
db    8
db    0
db    8
db    0
db  20h
db    0
db    6
db    0
db  55h ; U
db    0
db    1
db    0
db    8
db    0
db    1
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    1
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db  55h ; U
db    0
db    6
db    0
db    1
db    0
db    6
db    0
db  41h ; A
db    0
db    6
db    0
db  41h ; A
db    0
db    6
db    0
db  47h ; G
db    0
db    8
db    0
db  47h ; G
db    0
db    8
db    0
db    8
db    0
db    9
db    0
db    8
db    0
db    8
db    0
db    1
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db  20h
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db  1Fh
db    0
db    8
db    0
db    6
db    0
db    1
db    0
db    6
db    0
db  0Bh
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db  0Ch
db    0
db  0Fh
db    0
db  68h ; h
db    0
db  10h
db    0
db  23h ; #
db    0
db  57h ; W
db    0
db    6
db    0
db    1
db    0
db    6
db    0
db  0Bh
db    0
db    6
db    0
db    8
db    0
db  15h
db    0
db    6
db    0
db    6
db    0
db  55h ; U
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db  41h ; A
db    0
db    6
db    0
db    6
db    0
db  41h ; A
db    0
db    8
db    0
db    8
db    0
db    4
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    1
db    0
db    1
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db  61h ; a
db    0
db  62h ; b
db    0
db  63h ; c
db    0
db    8
db    0
db  53h ; S
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db  1Dh
db    0
db    8
db    0
db  64h ; d
db    0
db  65h ; e
db    0
db  66h ; f
db    0
db    8
db    0
db    6
db    0
db  53h ; S
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db  1Fh
db    0
db    8
db    0
db  67h ; g
db    0
db  68h ; h
db    0
db  69h ; i
db    0
db    8
db    0
db    1
db    0
db    8
db    0
db  47h ; G
db    0
db  41h ; A
db    0
db    8
db    0
db  1Dh
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db  21h ; !
db    0
db    6
db    0
db    1
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    1
db    0
db    8
db    0
db    8
db    0
db  53h ; S
db    0
db    8
db    0
db  53h ; S
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db  43h ; C
db    0
db    6
db    0
db    6
db    0
db  47h ; G
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db  0Ch
db    0
db    6
db    0
db    1
db    0
db  43h ; C
db    0
db    6
db    0
db  13h
db    0
db  10h
db    0
db  10h
db    0
db  68h ; h
db    0
db  1Dh
db    0
db  53h ; S
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db  0Ch
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db  53h ; S
db    0
db  1Dh
db    0
db  47h ; G
db    0
db    6
db    0
db    1
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    1
db    0
db  41h ; A
db    0
db    6
db    0
db    6
db    0
db  1Dh
db    0
db  53h ; S
db    0
db    6
db    0
db    8
db    0
db  55h ; U
db    0
db    6
db    0
db  1Dh
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db  20h
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    2
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    1
db    0
db    8
db    0
db  22h ; "
db    0
db  1Dh
db    0
db    6
db    0
db    8
db    0
db  20h
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db  55h ; U
db    0
db    6
db    0
db  20h
db    0
db    6
db    0
db  59h ; Y
db    0
db    1
db    0
db    6
db    0
db  57h ; W
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db  23h ; #
db    0
db  1Dh
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db  1Dh
db    0
db    8
db    0
db  53h ; S
db    0
db    6
db    0
db  1Fh
db    0
db    8
db    0
db    9
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    1
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    1
db    0
db    8
db    0
db    6
db    0
db  41h ; A
db    0
db    6
db    0
db    8
db    0
db  53h ; S
db    0
db    6
db    0
db  53h ; S
db    0
db    8
db    0
db    6
db    0
db  47h ; G
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    1
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    1
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db  19h
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db  0Bh
db    0
db    6
db    0
db    8
db    0
db  8Fh
db    0
db    9
db    0
db  0Ah
db    0
db  11h
db    0
db  68h ; h
db    0
db  10h
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db  0Bh
db    0
db    6
db    0
db    8
db    0
db  23h ; #
db    0
db    6
db    0
db  22h ; "
db    0
db    6
db    0
db  34h ; 4
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db  21h ; !
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db  57h ; W
db    0
db    8
db    0
db  53h ; S
db    0
db    8
db    0
db  1Dh
db    0
db    6
db    0
db  1Dh
db    0
db    8
db    0
db    4
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    4
db    0
db    8
db    0
db  49h ; I
db    0
db    6
db    0
db  49h ; I
db    0
db    8
db    0
db    1
db    0
db    8
db    0
db    2
db    0
db    8
db    0
db  57h ; W
db    0
db    6
db    0
db  57h ; W
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    4
db    0
db    8
db    0
db    8
db    0
db  55h ; U
db    0
db    8
db    0
db  41h ; A
db    0
db    8
db    0
db    8
db    0
db    4
db    0
db    8
db    0
db  49h ; I
db    0
db    6
db    0
db  49h ; I
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db  55h ; U
db    0
db    6
db    0
db  55h ; U
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db  47h ; G
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    1
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    1
db    0
db    8
db    0
db  20h
db    0
db    6
db    0
db    6
db    0
db  53h ; S
db    0
db    6
db    0
db  0Ch
db    0
db    6
db    0
db  53h ; S
db    0
db    6
db    0
db    6
db    0
db  20h
db    0
db  12h
db    0
db  10h
db    0
db  0Bh
db    0
db  0Bh
db    0
db    6
db    0
db    6
db    0
db    2
db    0
db    6
db    0
db  0Ch
db    0
db    6
db    0
db    1
db    0
db  47h ; G
db    0
db    6
db    0
db  1Dh
db    0
db    6
db    0
db    6
db    0
db  19h
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db  41h ; A
db    0
db  1Dh
db    0
db    1
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    9
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db  1Fh
db    0
db    6
db    0
db  20h
db    0
db    6
db    0
db    1
db    0
db  57h ; W
db    0
db    6
db    0
db  57h ; W
db    0
db    1
db    0
db  55h ; U
db    0
db    6
db    0
db  1Dh
db    0
db  59h ; Y
db    0
db    6
db    0
db  59h ; Y
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db  53h ; S
db    0
db  1Dh
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    2
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db  55h ; U
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db  59h ; Y
db    0
db    6
db    0
db    1
db    0
db    8
db    0
db    8
db    0
db    1
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    1
db    0
db    8
db    0
db    8
db    0
db    1
db    0
db  47h ; G
db    0
db    6
db    0
db    8
db    0
db  53h ; S
db    0
db  53h ; S
db    0
db    8
db    0
db  41h ; A
db    0
db  41h ; A
db    0
db    8
db    0
db    6
db    0
db  47h ; G
db    0
db    6
db    0
db  1Dh
db    0
db    8
db    0
db  53h ; S
db    0
db  53h ; S
db    0
db    8
db    0
db  41h ; A
db    0
db  41h ; A
db    0
db    8
db    0
db  1Dh
db    0
db    6
db    0
db  20h
db    0
db  22h ; "
db    0
db    8
db    0
db    6
db    0
db  1Dh
db    0
db    8
db    0
db  1Dh
db    0
db    6
db    0
db    8
db    0
db  23h ; #
db    0
db  20h
db    0
db  13h
db    0
db  0Bh
db    0
db  68h ; h
db    0
db  0Ch
db    0
db    6
db    0
db    8
db    0
db  20h
db    0
db    6
db    0
db  47h ; G
db    0
db    6
db    0
db  1Fh
db    0
db    8
db    0
db  1Dh
db    0
db  22h ; "
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db  53h ; S
db    0
db    6
db    0
db    1
db    0
db    8
db    0
db    8
db    0
db  57h ; W
db    0
db    8
db    0
db  0Ah
db    0
db    8
db    0
db  57h ; W
db    0
db    8
db    0
db    1
db    0
db    8
db    0
db  43h ; C
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    9
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db  1Dh
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db  1Dh
db    0
db    8
db    0
db  41h ; A
db    0
db  41h ; A
db    0
db    1
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db  59h ; Y
db    0
db    6
db    0
db  59h ; Y
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db  53h ; S
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    2
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    1
db    0
db    6
db    0
db    6
db    0
db  41h ; A
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db  57h ; W
db    0
db    6
db    0
db    6
db    0
db  55h ; U
db    0
db    1
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db  57h ; W
db    0
db    8
db    0
db    8
db    0
db  20h
db    0
db  1Dh
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    1
db    0
db  1Dh
db    0
db    6
db    0
db  1Dh
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db  53h ; S
db    0
db  41h ; A
db    0
db    6
db    0
db  53h ; S
db    0
db    8
db    0
db    6
db    0
db  0Bh
db    0
db    6
db    0
db    1
db    0
db    6
db    0
db  43h ; C
db    0
db    6
db    0
db  14h
db    0
db  68h ; h
db    0
db  10h
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    4
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db  23h ; #
db    0
db  22h ; "
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db  20h
db    0
db  21h ; !
db    0
db  1Dh
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db  53h ; S
db    0
db  53h ; S
db    0
db  53h ; S
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db  1Dh
db    0
db    8
db    0
db    2
db    0
db    8
db    0
db    6
db    0
db  53h ; S
db    0
db    6
db    0
db  53h ; S
db    0
db    6
db    0
db    8
db    0
db    2
db    0
db    8
db    0
db  43h ; C
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db  53h ; S
db    0
db  53h ; S
db    0
db  53h ; S
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db  43h ; C
db    0
db    6
db    0
db  43h ; C
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db  43h ; C
db    0
db    6
db    0
db    1
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    3
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    1
db    0
db    6
db    0
db  59h ; Y
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db  59h ; Y
db    0
db    6
db    0
db  20h
db    0
db    6
db    0
db    6
db    0
db  47h ; G
db    0
db    6
db    0
db  0Ch
db    0
db    6
db    0
db  47h ; G
db    0
db    6
db    0
db    6
db    0
db  20h
db    0
db  15h
db    0
db  10h
db    0
db  68h ; h
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db  0Ch
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db  19h
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db  0Bh
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db  16h
db    0
db  68h ; h
db    0
db  47h ; G
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db  0Bh
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db  0Ch
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db  17h
db    0
db  47h ; G
db    0
db  6Fh ; o
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db  0Ch
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db  0Bh
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db  18h
db    0
db  6Fh ; o
db    0
db  6Fh ; o
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
word_255E6 dw 6
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    3
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db  0Bh
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db  0Ch
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db  19h
db    0
db  6Fh ; o
db    0
db  6Fh ; o
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db  91h
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db  0Ch
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    3
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db  0Bh
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db  1Ah
db    0
db  6Fh ; o
db    0
db  6Fh ; o
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db  0Dh
db    0
db  0Dh
db    0
db  0Dh
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db  0Dh
db    0
db  0Dh
db    0
db  0Dh
db    0
db  0Dh
db    0
db  0Dh
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db  0Dh
db    0
db  0Dh
db    0
db  1Bh
db    0
db  0Dh
db    0
db  0Dh
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db  0Dh
db    0
db  0Dh
db    0
db    3
db    0
db  0Dh
db    0
db  0Dh
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db  0Dh
db    0
db    3
db    0
db  0Dh
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    3
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db  0Bh
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    3
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db  0Ch
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db  1Bh
db    0
db  6Fh ; o
db    0
db  77h ; w
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db  19h
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db  0Ch
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db  0Bh
db    0
db  1Ch
db    0
db  77h ; w
db    0
db  6Fh ; o
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db  13h
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db  0Bh
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db  0Ch
db    0
db  1Dh
db    0
db  63h ; c
db    0
db  68h ; h
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
word_25A68 dw 6
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
word_25A7C dw 8
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
word_25A92 dw 15h
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db  0Ch
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db  0Bh
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db  1Eh
db    0
db  68h ; h
db    0
db  10h
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db  41h ; A
db    0
db  3Fh ; ?
db    0
db  3Dh ; =
db    0
db    6
db    0
db  3Dh ; =
db    0
db  3Fh ; ?
db    0
db  41h ; A
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db  0Ch
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db  1Fh
db    0
db  10h
db    0
db  68h ; h
db    0
db    6
db    0
db    6
db    0
db  1Dh
db    0
db  1Dh
db    0
db    8
db    0
db  0Ch
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db  20h
db    0
db  19h
db    0
db  89h
db    0
db    6
db    0
db  1Dh
db    0
db  1Dh
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db  8Bh
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db  8Bh
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    1
db    0
db    8
db    0
db  8Dh
db    0
db  8Dh
db    0
db    6
db    0
db    6
db    0
db    1
db    0
db  1Fh
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db  22h ; "
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    1
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    1
db    0
db    6
db    0
db  8Dh
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db  8Dh
db    0
db    6
db    0
db    1
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    1
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db  23h ; #
db    0
db    8
db    0
db  57h ; W
db    0
db    8
db    0
db  21h ; !
db    0
db    1
db    0
db    6
db    0
db    6
db    0
db  8Dh
db    0
db  8Dh
db    0
db    8
db    0
db    1
db    0
db    8
db    0
db  57h ; W
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db  8Fh
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db  87h
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db  1Dh
db    0
db  1Dh
db    0
db    6
db    0
db  8Fh
db    0
db  13h
db    0
db  20h
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db  0Bh
db    0
db    8
db    0
db  1Dh
db    0
db  1Dh
db    0
db    6
db    0
db    6
db    0
db  20h
db    0
db  68h ; h
db    0
db    9
db    0
db  23h ; #
db    0
db    6
db    0
db    2
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db  0Bh
db    0
db    6
db    0
db  22h ; "
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    1
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    1
db    0
db    6
db    0
db    1
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db  8Bh
db    0
db    6
db    0
db  8Fh
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db  8Dh
db    0
db    8
db    0
db  1Dh
db    0
db  21h ; !
db    0
db    6
db    0
db  1Dh
db    0
db    6
db    0
db  8Fh
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    1
db    0
db    6
db    0
db  1Dh
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db  85h
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db  1Dh
db    0
db  1Dh
db    0
db  1Dh
db    0
db  1Dh
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db  87h
db    0
db    8
db    0
db  1Dh
db    0
db  1Fh
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db  1Fh
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    1
db    0
db    6
db    0
db  1Dh
db    0
db    8
db    0
db    4
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db  4Bh ; K
db    0
db    6
db    0
db  4Bh ; K
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db  0Fh
db    0
db  10h
db    0
db  11h
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db  0Ch
db    0
db    6
db    0
db  8Dh
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db  21h ; !
db    0
db    9
db    0
db    1
db    0
db  0Bh
db    0
db    6
db    0
db    1
db    0
db  57h ; W
db    0
db    6
db    0
db  8Fh
db    0
db    1
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db  0Ch
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db  20h
db    0
db    6
db    0
db    8
db    0
db    1
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    2
db    0
db    8
db    0
db    8
db    0
db  19h
db    0
db    6
db    0
db  1Dh
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db  21h ; !
db    0
db    6
db    0
db  20h
db    0
db    8
db    0
db    8
db    0
db    1
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db  8Fh
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db  57h ; W
db    0
db    6
db    0
db    8
db    0
db  8Dh
db    0
db    6
db    0
db  8Dh
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db  89h
db    0
db    8
db    0
db    8
db    0
db    1
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db  8Fh
db    0
db    1
db    0
db    6
db    0
db    6
db    0
db  8Dh
db    0
db    6
db    0
db    8
db    0
db  8Bh
db    0
db    6
db    0
db  8Bh
db    0
db    1
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db  57h ; W
db    0
db    8
db    0
db    6
db    0
db  8Bh
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db  8Bh
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db  1Dh
db    0
db    8
db    0
db  8Fh
db    0
db    6
db    0
db    6
db    0
db  35h ; 5
db    0
db    6
db    0
db  1Dh
db    0
db  8Fh
db    0
db    6
db    0
db    2
db    0
db    6
db    0
db    1
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db  22h ; "
db    0
db    1
db    0
db  68h ; h
db    0
db  0Ch
db    0
db    6
db    0
db  20h
db    0
db    8
db    0
db    6
db    0
db  1Dh
db    0
db    6
db    0
db    8
db    0
db  1Dh
db    0
db  1Dh
db    0
db  23h ; #
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    1
db    0
db  8Fh
db    0
db    6
db    0
db  87h
db    0
db    1
db    0
db    6
db    0
db  1Dh
db    0
db  20h
db    0
db    6
db    0
db  8Fh
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    1
db    0
db    8
db    0
db    8
db    0
db  3Dh ; =
db    0
db    8
db    0
db  89h
db    0
db    8
db    0
db  41h ; A
db    0
db    8
db    0
db  8Bh
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    1
db    0
db    8
db    0
db    1
db    0
db    8
db    0
db    1
db    0
db    8
db    0
db    1
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    1
db    0
db    8
db    0
db    1
db    0
db    8
db    0
db    1
db    0
db    8
db    0
db    1
db    0
db    8
db    0
db    1
db    0
db    8
db    0
db    8
db    0
db  8Dh
db    0
db    8
db    0
db  3Fh ; ?
db    0
db    8
db    0
db  87h
db    0
db    8
db    0
db  43h ; C
db    0
db    6
db    0
db    6
db    0
db  8Dh
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db  89h
db    0
db    8
db    0
db    6
db    0
db    1
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    1
db    0
db  8Bh
db    0
db    6
db    0
db  20h
db    0
db  21h ; !
db    0
db  8Bh
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db  0Bh
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db  1Dh
db    0
db  22h ; "
db    0
db  23h ; #
db    0
db  68h ; h
db    0
db    9
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db  0Bh
db    0
db    9
db    0
db    9
db    0
db    9
db    0
db    9
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    9
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    4
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    9
db    0
db    8
db    0
db    9
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    9
db    0
db    8
db    0
db    9
db    0
db    8
db    0
db  73h ; s
db    0
db  74h ; t
db    0
db  75h ; u
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    9
db    0
db    8
db    0
db    9
db    0
db    8
db    0
db  76h ; v
db    0
db  77h ; w
db    0
db  78h ; x
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    9
db    0
db    8
db    0
db    9
db    0
db    8
db    0
db  79h ; y
db    0
db  7Ah ; z
db    0
db  7Bh ; {
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    9
db    0
db    8
db    0
db    9
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    9
db    0
db    8
db    0
db    9
db    0
word_260CC dw 8
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    9
db    0
db    8
db    0
db    9
db    0
db    8
db    0
word_260E4 dw 6
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    9
db    0
db    9
db    0
db    9
db    0
db    8
db    0
db    6
db    0
db  0Ch
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db  24h ; $
db    0
db  15h
db    0
db  6Dh ; m
db    0
db  19h
db    0
db    6
db    0
db  8Bh
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db  57h ; W
db    0
db    6
db    0
db  87h
db    0
db    6
db    0
db  0Ch
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    9
db    0
db    8
db    0
db    1
db    0
db    8
db    0
db    9
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db  8Fh
db    0
db    8
db    0
db    8
db    0
db    9
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    9
db    0
db    8
db    0
db    8
db    0
db  8Fh
db    0
db    6
db    0
db    9
db    0
db    9
db    0
db    9
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    9
db    0
db    9
db    0
db    9
db    0
db    6
db    0
db  87h
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db  8Dh
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db  89h
db    0
db    6
db    0
db    1
db    0
db    6
db    0
db    6
db    0
db  8Fh
db    0
db    6
db    0
db  8Fh
db    0
db    6
db    0
db    6
db    0
db    1
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db  87h
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db  87h
db    0
db    6
db    0
db    9
db    0
db    9
db    0
db    9
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    9
db    0
db    9
db    0
db    9
db    0
db    6
db    0
db  89h
db    0
db    8
db    0
db    8
db    0
db    9
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    9
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    9
db    0
db    8
db    0
db    1
db    0
db    8
db    0
db    9
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db  21h ; !
db    0
db    6
db    0
db  8Bh
db    0
db    6
db    0
db  1Dh
db    0
db    6
db    0
db  57h ; W
db    0
db    6
db    0
db  89h
db    0
db    6
db    0
db  0Bh
db    0
db  25h ; %
db    0
db  6Dh ; m
db    0
db    1
db    0
db  0Bh
db    0
db    6
db    0
db    1
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db  8Bh
db    0
db    6
db    0
db  21h ; !
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    2
db    0
db    8
db    0
db    8
db    0
db  20h
db    0
db  20h
db    0
db    8
db    0
db  20h
db    0
db  20h
db    0
db    8
db    0
db    8
db    0
db  87h
db    0
db    6
db    0
db    8
db    0
db  20h
db    0
db  20h
db    0
db  1Dh
db    0
db    8
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db  1Dh
db    0
db  1Dh
db    0
db  2Ah ; *
db    0
db    8
db    0
db  1Eh
db    0
db  1Dh
db    0
db  1Dh
db    0
db    8
db    0
db    6
db    0
db  20h
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db  89h
db    0
db    6
db    0
db    8
db    0
db  23h ; #
db    0
db  22h ; "
db    0
db  21h ; !
db    0
db    8
db    0
db  22h ; "
db    0
db  22h ; "
db    0
db  22h ; "
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db  1Dh
db    0
db  1Dh
db    0
db  1Dh
db    0
db    8
db    0
db  23h ; #
db    0
db  23h ; #
db    0
db  23h ; #
db    0
db    8
db    0
db    6
db    0
db  8Bh
db    0
db    8
db    0
db    8
db    0
db  1Fh
db    0
db  1Fh
db    0
db    8
db    0
db  21h ; !
db    0
db  1Dh
db    0
db    8
db    0
db    8
db    0
db  87h
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db  19h
db    0
db    6
db    0
db  8Fh
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db  8Dh
db    0
db    6
db    0
db  0Ch
db    0
db  26h ; &
db    0
db    1
db    0
db    9
db    0
db  0Ch
db    0
db    6
db    0
db    3
db    0
db  8Fh
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db  8Fh
db    0
db    1
db    0
db    6
db    0
db  0Bh
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db  13h
db    0
db  1Dh
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db  8Dh
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    1
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    1
db    0
db    6
db    0
db    6
db    0
db  8Bh
db    0
db  8Bh
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db  1Dh
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    2
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db  1Dh
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    2
db    0
db    2
db    0
db    8
db    0
db  8Dh
db    0
db    8
db    0
db  1Dh
db    0
db    8
db    0
db  8Dh
db    0
db    6
db    0
db  3Ah ; :
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db  89h
db    0
db    8
db    0
db    6
db    0
db  87h
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db  23h ; #
db    0
db  20h
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    1
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db  1Dh
db    0
db    6
db    0
db  8Dh
db    0
db  4Bh ; K
db    0
db    6
db    0
db  4Bh ; K
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db  87h
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    1
db    0
db  89h
db    0
db    6
db    0
db  55h ; U
db    0
db    1
db    0
db  8Bh
db    0
db    6
db    0
db  21h ; !
db    0
db  27h ; '
db    0
db  15h
db    0
db  77h ; w
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db  0Ch
db    0
db    6
db    0
db    1
db    0
db    6
db    0
db    1
db    0
db    6
db    0
db    1
db    0
db    6
db    0
db    8
db    0
db  13h
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db  1Dh
db    0
db    6
db    0
db    1
db    0
db    6
db    0
db    1
db    0
db    6
db    0
db    1
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    1
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db  8Bh
db    0
db    6
db    0
db    1
db    0
db    6
db    0
db    1
db    0
db    6
db    0
db    1
db    0
db    6
db    0
db    8
db    0
db  8Fh
db    0
db    8
db    0
db  22h ; "
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db  8Dh
db    0
db    8
db    0
db    2
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    1
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db  8Dh
db    0
db    8
db    0
db  89h
db    0
db  23h ; #
db    0
db  87h
db    0
db    8
db    0
db    6
db    0
db  87h
db    0
db    6
db    0
db    6
db    0
db  8Dh
db    0
db    6
db    0
db    1
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    1
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db  19h
db    0
db    6
db    0
db  1Dh
db    0
db    8
db    0
db    6
db    0
db  8Fh
db    0
db    6
db    0
db    8
db    0
db  20h
db    0
db    6
db    0
db  0Bh
db    0
db  28h ; (
db    0
db  77h ; w
db    0
db  10h
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db  89h
db    0
db  89h
db    0
db  89h
db    0
db    6
db    0
db  85h
db    0
db    6
db    0
db  87h
db    0
db  87h
db    0
db  87h
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db  8Dh
db    0
db  8Dh
db    0
db  8Dh
db    0
db    6
db    0
db  8Bh
db    0
db  8Bh
db    0
db  8Bh
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    3
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db  23h ; #
db    0
db  1Dh
db    0
db    6
db    0
db    8
db    0
db  8Fh
db    0
db    6
db    0
db  8Fh
db    0
db    8
db    0
db  20h
db    0
db  89h
db    0
db    6
db    0
db  21h ; !
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db  8Bh
db    0
db    6
db    0
db    6
db    0
db  22h ; "
db    0
db    6
db    0
db  87h
db    0
db    2
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    1
db    0
db    6
db    0
db    6
db    0
db  0Ch
db    0
db  29h ; )
db    0
db  10h
db    0
db  68h ; h
db    0
db  20h
db    0
db    8
db    0
db    6
db    0
db  1Fh
db    0
db    8
db    0
db  0Ch
db    0
db    8
db    0
db  1Fh
db    0
db    6
db    0
db    8
db    0
db  20h
db    0
db    1
db    0
db  97h
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db  0Ah
db    0
db    1
db    0
db    1
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    1
db    0
db    1
db    0
db    8
db    0
db    1
db    0
db    8
db    0
db  5Dh ; ]
db    0
db    6
db    0
db  5Dh ; ]
db    0
db    8
db    0
db    1
db    0
db    8
db    0
db    1
db    0
db    6
db    0
db    6
db    0
db  99h
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db  99h
db    0
db    6
db    0
db    6
db    0
db  93h
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    2
db    0
db    6
db    0
db    2
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db  93h
db    0
db    6
db    0
db  93h
db    0
db    6
db    0
db  95h
db    0
db    8
db    0
db    1
db    0
db    8
db    0
db  95h
db    0
db    6
db    0
db  93h
db    0
db    6
db    0
db    1
db    0
db    8
db    0
db    8
db    0
db    1
db    0
db    8
db    0
db    1
db    0
db    8
db    0
db    1
db    0
db    8
db    0
db    8
db    0
db    1
db    0
db    1
db    0
db    8
db    0
db  20h
db    0
db    6
db    0
db    8
db    0
db    1
db    0
db    8
db    0
db    6
db    0
db  20h
db    0
db    8
db    0
db    1
db    0
db    1
db    0
db    8
db    0
db  1Dh
db    0
db  1Dh
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db  1Dh
db    0
db  1Dh
db    0
db    8
db    0
db    1
db    0
db  21h ; !
db    0
db    8
db    0
db  1Dh
db    0
db  22h ; "
db    0
db    8
db    0
db  0Bh
db    0
db    8
db    0
db  23h ; #
db    0
db  1Dh
db    0
db    8
db    0
db  21h ; !
db    0
db  2Ah ; *
db    0
db  68h ; h
db    0
db    1
db    0
db  0Bh
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db  1Dh
db    0
db  1Fh
db    0
db  1Dh
db    0
db    6
db    0
db    6
db    0
db  95h
db    0
db    8
db    0
db    6
db    0
db  1Eh
db    0
db    6
db    0
db    8
db    0
db  1Dh
db    0
db  1Dh
db    0
db  1Dh
db    0
db    8
db    0
db    8
db    0
db    1
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db  19h
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db  9Bh
db    0
db    8
db    0
db    8
db    0
db  99h
db    0
db    6
db    0
db  97h
db    0
db    6
db    0
db    6
db    0
db  95h
db    0
db    1
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    1
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    1
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db  99h
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db  93h
db    0
db    8
db    0
db    6
db    0
db  85h
db    0
db    6
db    0
db    8
db    0
db  5Dh ; ]
db    0
db    6
db    0
db  5Dh ; ]
db    0
db  21h ; !
db    0
db  1Dh
db    0
db  1Dh
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db  93h
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db  1Dh
db    0
db  1Dh
db    0
db  1Dh
db    0
db  1Dh
db    0
db  1Dh
db    0
db  23h ; #
db    0
db    8
db    0
db    6
db    0
db  0Ch
db    0
db    6
db    0
db    8
db    0
db  1Dh
db    0
db  1Fh
db    0
db  1Dh
db    0
db  2Bh ; +
db    0
db  0Bh
db    0
db  63h ; c
db    0
db  0Ch
db    0
db    6
db    0
db    1
db    0
db    6
db    0
db  95h
db    0
db    6
db    0
db    1
db    0
db    1
db    0
db  5Dh ; ]
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    1
db    0
db    6
db    0
db    8
db    0
db  9Bh
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    2
db    0
db    8
db    0
db    8
db    0
db  97h
db    0
db    8
db    0
db    6
db    0
db  9Bh
db    0
db    6
db    0
db  3Bh ; ;
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db  95h
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    1
db    0
db    6
db    0
db    8
db    0
db    1
db    0
db    8
db    0
db    8
db    0
db  21h ; !
db    0
db    6
db    0
db    1
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db  95h
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db  99h
db    0
db    6
db    0
db  20h
db    0
db    1
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db  1Dh
db    0
db    6
db    0
db    6
db    0
db  93h
db    0
db    8
db    0
db  21h ; !
db    0
db    6
db    0
db  9Bh
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    1
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db  21h ; !
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    1
db    0
db    6
db    0
db  93h
db    0
db    6
db    0
db  0Bh
db    0
db    6
db    0
db    8
db    0
db  21h ; !
db    0
db    6
db    0
db    2
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db  1Fh
db    0
db  2Ch ; ,
db    0
db    0
db    0
db    0
db    0
db  0Bh
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db  20h
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db  20h
db    0
db  3Ch ; <
db    0
db  20h
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db  20h
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    4
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db  9Dh
db    0
db    6
db    0
db  9Dh
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db  2Dh ; -
db    0
db    1
db    0
db    9
db    0
db  0Ch
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db  0Bh
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    1
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db  22h ; "
db    0
db  22h ; "
db    0
db    6
db    0
db    8
db    0
db  99h
db    0
db    6
db    0
db  97h
db    0
db    8
db    0
db  13h
db    0
db    6
db    0
db    6
db    0
db    2
db    0
db    8
db    0
db  9Bh
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db  95h
db    0
db  23h ; #
db    0
db  23h ; #
db    0
db    6
db    0
db    8
db    0
db  97h
db    0
db    6
db    0
db  99h
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    1
db    0
db    2
db    0
db    8
db    0
db  9Bh
db    0
db    8
db    0
db    8
db    0
db    1
db    0
db    8
db    0
db    8
db    0
db  19h
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    1
db    0
db    6
db    0
db    6
db    0
db  93h
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db  1Dh
db    0
db    8
db    0
db    3
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db  97h
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db  9Bh
db    0
db    6
db    0
db    8
db    0
db  5Dh ; ]
db    0
db    8
db    0
db    8
db    0
db    1
db    0
db    6
db    0
db  2Ch ; ,
db    0
db    6
db    0
db    4
db    0
db    6
db    0
db    6
db    0
db    4
db    0
db    6
db    0
db    1
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db  9Bh
db    0
db    6
db    0
db    8
db    0
db  5Dh ; ]
db    0
db    8
db    0
db    6
db    0
db  21h ; !
db    0
db  2Eh ; .
db    0
db  15h
db    0
db  6Dh ; m
db    0
db    6
db    0
db  97h
db    0
db    1
db    0
db    6
db    0
db  0Fh
db    0
db  10h
db    0
db  11h
db    0
db    6
db    0
db    2
db    0
db    6
db    0
db  0Ch
db    0
db  20h
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db  22h ; "
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    1
db    0
db    6
db    0
db  99h
db    0
db    1
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db  93h
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    1
db    0
db  8Bh
db    0
db    6
db    0
db  89h
db    0
db    6
db    0
db  87h
db    0
db    8
db    0
db  20h
db    0
db    6
db    0
db    1
db    0
db  95h
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db  97h
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db  55h ; U
db    0
db    8
db    0
db  30h ; 0
db    0
db    8
db    0
db  95h
db    0
db    8
db    0
db    1
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    1
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db  99h
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db  19h
db    0
db    8
db    0
db  99h
db    0
db    6
db    0
db  53h ; S
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db  4Dh ; M
db    0
db    6
db    0
db  3Fh ; ?
db    0
db    6
db    0
db    2
db    0
db    6
db    0
db    6
db    0
db    1
db    0
db    6
db    0
db  0Bh
db    0
db  2Fh ; /
db    0
db  77h ; w
db    0
db  0Bh
db    0
db  0Bh
db    0
db    6
db    0
db    2
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    1
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db  1Dh
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db  13h
db    0
db    6
db    0
db    8
db    0
db  97h
db    0
db    8
db    0
db    8
db    0
db  23h ; #
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db  95h
db    0
db    6
db    0
db  1Dh
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    1
db    0
db  97h
db    0
db    6
db    0
db    8
db    0
db    1
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db  93h
db    0
db    8
db    0
db    6
db    0
db  99h
db    0
db    8
db    0
db    6
db    0
db  99h
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    1
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db  1Dh
db    0
db    6
db    0
db    6
db    0
db  93h
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db  1Fh
db    0
db  1Dh
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    1
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    2
db    0
db  22h ; "
db    0
db  23h ; #
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db  97h
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db  95h
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db  20h
db    0
db    6
db    0
db  22h ; "
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    1
db    0
db    6
db    0
db  99h
db    0
db    6
db    0
db    1
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db  0Ch
db    0
db  30h ; 0
db    0
db  6Dh ; m
db    0
db  63h ; c
db    0
db    7
db    0
db  21h ; !
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db  19h
db    0
db    8
db    0
db    2
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    2
db    0
db    6
db    0
db  97h
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db  5Dh ; ]
db    0
db    8
db    0
db  5Dh ; ]
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    2
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db  95h
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db  5Dh ; ]
db    0
db    8
db    0
db  5Dh ; ]
db    0
db    8
db    0
db  93h
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    1
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db  93h
db    0
db    8
db    0
db    6
db    0
db  99h
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db  99h
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db  22h ; "
db    0
db    6
db    0
db  20h
db    0
db    8
db    0
db    8
db    0
db    4
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db  99h
db    0
db    8
db    0
db    8
db    0
db    1
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db  9Bh
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db  36h ; 6
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db  0Bh
db    0
db    8
db    0
db  23h ; #
db    0
db    6
db    0
db  21h ; !
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db  0Ch
db    0
db  31h ; 1
db    0
db  6Fh ; o
db    0
db    0
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    4
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db  9Bh
db    0
db    6
db    0
db  9Bh
db    0
db    8
db    0
db    6
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    4
db    0
db    8
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db  97h
db    0
db    6
db    0
db  97h
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db  0Ch
db    0
db    6
db    0
db    3
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db  32h ; 2
db    0
db    0
db    0
db    0
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db    8
db    0
db    6
db    0
word_26F00 dw 6
db    6
db    0
db    8
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db    8
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    8
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db    8
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db  0Eh
db    0
db  33h ; 3
db    0
db    0
db    0
db    0
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
db    6
db    0
word_27088 dw 0
off_2708A dw offset __exit
word_2708C dw 0
align 4
db    5
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
word_270A2 dw 0
word_270A4 dw 0
word_270A6 dw 435Fh
aFileInfo db '_FILE_INFO=',0
dword_270B4 dd 0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
word_270C2 dw 0
word_270C4 dw 0
align 4
word_270C8 dw 0
word_270CA dw 0
db    0
byte_270CD db 0
db    0
word_270CF dw 14h
db  81h
db  81h
db  81h
db    1
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
; int argc
argc dw 0
; char **argv
argv dw 0
word_270E9 dw 0
; char **envp
envp dw 0
word_270ED dw 0
word_270EF dw 4DB3h
seg_270F1 dw seg dseg
db    0
db    0
db    0
byte_270F6 db 0
byte_270F7 db 0
dword_270F8 dd 0
unk_270FC db    0
db    0
word_270FE dw 0
dword_27100 dd 0FFFFFFFFh
word_27104 dw 5980h
dword_27106 dd 0
db    0
db  16h
db    2
db    2
db  18h
db  0Dh
db    9
db  0Ch
db  0Ch
db  0Ch
db    7
db    8
db  16h
db  16h
db 0FFh
db    2
db  0Dh
db  12h
db    2
db 0FFh
db  5Ch ; \
db    0
db  5Ch ; \
db    0
word_27122 dw 0
dd unk_279C0
db    0
db    0
dd unk_279C0
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    2
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    2
db    2
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  84h
db    3
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    2
db    4
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db    0
db    0
db    2
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
word_27304 dw 4EC8h
dw seg dseg
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    6
db    0
db    0
db    6
db    0
db    1
db    0
db    0
db  10h
db    0
db    3
db    6
db    0
db    6
db    2
db  10h
db    4
db  45h ; E
db  45h ; E
db  45h ; E
db    5
db    5
db    5
db    5
db    5
db  35h ; 5
db  30h ; 0
db    0
db  50h ; P
db    0
db    0
db    0
db    0
db  20h
db  20h
db  30h ; 0
db  50h ; P
db  58h ; X
db    7
db    8
db    0
db  30h ; 0
db  30h ; 0
db  30h ; 0
db  57h ; W
db  50h ; P
db    7
db    0
db    0
db  20h
db  20h
db    0
db    0
db    0
db    0
db    0
db    8
db  60h ; `
db  60h ; `
db  60h ; `
db  60h ; `
db  60h ; `
db  60h ; `
db    0
db    0
db  70h ; p
db  70h ; p
db  78h ; x
db  78h ; x
db  78h ; x
db  78h ; x
db    8
db    7
db    8
db    0
db    0
db    7
db    0
db    8
db    8
db    8
db    0
db    0
db    8
db    0
db    8
db    0
db    0
db    8
db  28h ; (
db  6Eh ; n
db  75h ; u
db  6Ch ; l
db  6Ch ; l
db  29h ; )
word_27373 dw 6
db    0
db    0
byte_27377 db 0
unk_27378 db    0
db    0
word_2737A dw 0
dword_2737C dd 0
db    0
db    0
word_27382 dw 0
db    3
db    0
word_27386 dw 2000h
off_27388 dd __fptrap
off_2738C dd __fptrap
dd __fptrap
off_27394 dd __fptrap
dd __fptrap
off_2739C dd __fptrap
db    0
db    0
db    0
db    0
db    1
db    1
db    0
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  28h ; (
db  28h ; (
db  28h ; (
db  28h ; (
db  28h ; (
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  48h ; H
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  84h
db  84h
db  84h
db  84h
db  84h
db  84h
db  84h
db  84h
db  84h
db  84h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  81h
db  81h
db  81h
db  81h
db  81h
db  81h
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  82h
db  82h
db  82h
db  82h
db  82h
db  82h
db    2
db    2
db    2
db    2
db    2
db    2
db    2
db    2
db    2
db    2
db    2
db    2
db    2
db    2
db    2
db    2
db    2
db    2
db    2
db    2
db  10h
db  10h
db  10h
db  10h
db  20h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    8
db    8
db    8
db    8
db    8
db    8
db    8
db    8
db    8
db    8
db    8
db    8
db    8
db    8
db    8
db    8
db    8
db    8
db    8
db    8
db    8
db    8
db    8
db    8
db    8
db    8
db    8
db    8
db    8
db    8
db    8
db    8
db    8
db    8
db    8
db    8
db    8
db    8
db    8
db    8
db    8
db    8
db    8
db    8
db    8
db    8
db    8
db    8
db    8
db    8
db    8
db    8
db    8
db    8
db    8
db    8
db    8
db    8
db    8
db    8
db    8
db    8
db    8
db    0
db    8
db  0Ch
db  0Ch
db  0Ch
db  0Ch
db  0Ch
db  0Ch
db  0Ch
db  0Ch
db  0Ch
db  0Ch
db  0Ch
db  0Ch
db  0Ch
db  0Ch
db  0Ch
db  0Ch
db  0Ch
db  0Ch
db  0Ch
db  0Ch
db  0Ch
db  0Ch
db  0Ch
db  0Ch
db  0Ch
db  0Ch
db  0Ch
db  0Ch
db  0Ch
db  0Ch
db  0Ch
db    8
db  0Ah
db  0Ah
db  0Ah
db  0Ah
db  0Ah
db    9
db    9
db    9
db    9
db    9
db    9
db    9
db    9
db    9
db    9
db    9
db    9
db    9
db    9
db    9
db    9
db    9
db    9
db    9
db    9
db    9
db    9
db    9
db    9
db    9
db    9
db    9
db    9
db    9
db    9
db    9
db    9
db    9
db    9
db    9
db    9
db    9
db    9
db    9
db    9
db    9
db    9
db    9
db    9
db    9
db    9
db    9
db    9
db    9
db    9
db    9
db    9
db    9
db    9
db    9
db    9
db    9
db    9
db  0Ch
db  0Ch
db  0Ch
db  0Ch
db  0Ch
db  0Ch
db  0Ch
db  0Ch
db  0Ch
db  0Ch
db  0Ch
db  0Ch
db  0Ch
db  0Ch
db  0Ch
db  0Ch
db  0Ch
db  0Ch
db  0Ch
db  0Ch
db  0Ch
db  0Ch
db  0Ch
db  0Ch
db  0Ch
db  0Ch
db  0Ch
db  0Ch
db  0Ch
db    0
db    0
db    0
db    0
db  40h ; @
db  81h
db  49h ; I
db  81h
db  68h ; h
db  81h
db  94h
db  81h
db  90h
db  81h
db  93h
db  81h
db  95h
db  81h
db  66h ; f
db  81h
db  69h ; i
db  81h
db  6Ah ; j
db  81h
db  96h
db  81h
db  7Bh ; {
db  81h
db  43h ; C
db  81h
db  7Ch ; |
db  81h
db  44h ; D
db  81h
db  5Eh ; ^
db  81h
db  4Fh ; O
db  82h
db  50h ; P
db  82h
db  51h ; Q
db  82h
db  52h ; R
db  82h
db  53h ; S
db  82h
db  54h ; T
db  82h
db  55h ; U
db  82h
db  56h ; V
db  82h
db  57h ; W
db  82h
db  58h ; X
db  82h
db  46h ; F
db  81h
db  47h ; G
db  81h
db  83h
db  81h
db  81h
db  81h
db  84h
db  81h
db  48h ; H
db  81h
db  97h
db  81h
db  60h ; `
db  82h
db  61h ; a
db  82h
db  62h ; b
db  82h
db  63h ; c
db  82h
db  64h ; d
db  82h
db  65h ; e
db  82h
db  66h ; f
db  82h
db  67h ; g
db  82h
db  68h ; h
db  82h
db  69h ; i
db  82h
db  6Ah ; j
db  82h
db  6Bh ; k
db  82h
db  6Ch ; l
db  82h
db  6Dh ; m
db  82h
db  6Eh ; n
db  82h
db  6Fh ; o
db  82h
db  70h ; p
db  82h
db  71h ; q
db  82h
db  72h ; r
db  82h
db  73h ; s
db  82h
db  74h ; t
db  82h
db  75h ; u
db  82h
db  76h ; v
db  82h
db  77h ; w
db  82h
db  78h ; x
db  82h
db  79h ; y
db  82h
db  6Dh ; m
db  81h
db  8Fh
db  81h
db  6Eh ; n
db  81h
db  4Fh ; O
db  81h
db  51h ; Q
db  81h
db  65h ; e
db  81h
db  81h
db  82h
db  82h
db  82h
db  83h
db  82h
db  84h
db  82h
db  85h
db  82h
db  86h
db  82h
db  87h
db  82h
db  88h
db  82h
db  89h
db  82h
db  8Ah
db  82h
db  8Bh
db  82h
db  8Ch
db  82h
db  8Dh
db  82h
db  8Eh
db  82h
db  8Fh
db  82h
db  90h
db  82h
db  91h
db  82h
db  92h
db  82h
db  93h
db  82h
db  94h
db  82h
db  95h
db  82h
db  96h
db  82h
db  97h
db  82h
db  98h
db  82h
db  99h
db  82h
db  9Ah
db  82h
db  6Fh ; o
db  81h
db  62h ; b
db  81h
db  70h ; p
db  81h
db  50h ; P
db  81h
db 0A7h
db    1
db  40h ; @
db  83h
db 0B1h
db    1
db  41h ; A
db  83h
db 0A8h
db    1
db  42h ; B
db  83h
db 0B2h
db    1
db  43h ; C
db  83h
db 0A9h
db    1
db  44h ; D
db  83h
db 0B3h
db    1
db  45h ; E
db  83h
db 0AAh
db    1
db  46h ; F
db  83h
db 0B4h
db    1
db  47h ; G
db  83h
db 0ABh
db    1
db  48h ; H
db  83h
db 0B5h
db    1
db  49h ; I
db  83h
db 0B6h
db    2
db  4Ah ; J
db  83h
db 0B7h
db    2
db  4Ch ; L
db  83h
db 0B8h
db    2
db  4Eh ; N
db  83h
db 0B9h
db    2
db  50h ; P
db  83h
db 0BAh
db    2
db  52h ; R
db  83h
db 0BBh
db    2
db  54h ; T
db  83h
db 0BCh
db    2
db  56h ; V
db  83h
db 0BDh
db    2
db  58h ; X
db  83h
db 0BEh
db    2
db  5Ah ; Z
db  83h
db 0BFh
db    2
db  5Ch ; \
db  83h
db 0C0h
db    2
db  5Eh ; ^
db  83h
db 0C1h
db    2
db  60h ; `
db  83h
db 0AFh
db    1
db  62h ; b
db  83h
db 0C2h
db    2
db  63h ; c
db  83h
db 0C3h
db    2
db  65h ; e
db  83h
db 0C4h
db    2
db  67h ; g
db  83h
db 0C5h
db    1
db  69h ; i
db  83h
db 0C6h
db    1
db  6Ah ; j
db  83h
db 0C7h
db    1
db  6Bh ; k
db  83h
db 0C8h
db    1
db  6Ch ; l
db  83h
db 0C9h
db    1
db  6Dh ; m
db  83h
db 0CAh
db    3
db  6Eh ; n
db  83h
db 0CBh
db    3
db  71h ; q
db  83h
db 0CCh
db    3
db  74h ; t
db  83h
db 0CDh
db    3
db  77h ; w
db  83h
db 0CEh
db    3
db  7Ah ; z
db  83h
db 0CFh
db    1
db  7Dh ; }
db  83h
db 0D0h
db    1
db  7Eh ; ~
db  83h
db 0D1h
db    1
db  80h ; �
db  83h
db 0D2h
db    1
db  81h
db  83h
db 0D3h
db    1
db  82h
db  83h
db 0ACh
db    1
db  83h
db  83h
db 0D4h
db    1
db  84h
db  83h
db 0ADh
db    1
db  85h
db  83h
db 0D5h
db    1
db  86h
db  83h
db 0AEh
db    1
db  87h
db  83h
db 0D6h
db    1
db  88h
db  83h
db 0D7h
db    1
db  89h
db  83h
db 0D8h
db    1
db  8Ah
db  83h
db 0D9h
db    1
db  8Bh
db  83h
db 0DAh
db    1
db  8Ch
db  83h
db 0DBh
db    1
db  8Dh
db  83h
db 0DCh
db    2
db  8Eh
db  83h
db 0B2h
db    1
db  90h
db  83h
db 0B4h
db    1
db  91h
db  83h
db 0A6h
db    1
db  92h
db  83h
db 0DDh
db    1
db  93h
db  83h
db 0B3h
db    1
db  94h
db  83h
db 0B6h
db    1
db  95h
db  83h
db 0B9h
db    1
db  96h
db  83h
db 0A7h
db    1
db  9Fh
db  82h
db 0B1h
db    1
db 0A0h
db  82h
db 0A8h
db    1
db 0A1h
db  82h
db 0B2h
db    1
db 0A2h
db  82h
db 0A9h
db    1
db 0A3h
db  82h
db 0B3h
db    1
db 0A4h
db  82h
db 0AAh
db    1
db 0A5h
db  82h
db 0B4h
db    1
db 0A6h
db  82h
db 0ABh
db    1
db 0A7h
db  82h
db 0B5h
db    1
db 0A8h
db  82h
db 0B6h
db    2
db 0A9h
db  82h
db 0B7h
db    2
db 0ABh
db  82h
db 0B8h
db    2
db 0ADh
db  82h
db 0B9h
db    2
db 0AFh
db  82h
db 0BAh
db    2
db 0B1h
db  82h
db 0BBh
db    2
db 0B3h
db  82h
db 0BCh
db    2
db 0B5h
db  82h
db 0BDh
db    2
db 0B7h
db  82h
db 0BEh
db    2
db 0B9h
db  82h
db 0BFh
db    2
db 0BBh
db  82h
db 0C0h
db    2
db 0BDh
db  82h
db 0C1h
db    2
db 0BFh
db  82h
db 0AFh
db    1
db 0C1h
db  82h
db 0C2h
db    2
db 0C2h
db  82h
db 0C3h
db    2
db 0C4h
db  82h
db 0C4h
db    2
db 0C6h
db  82h
db 0C5h
db    1
db 0C8h
db  82h
db 0C6h
db    1
db 0C9h
db  82h
db 0C7h
db    1
db 0CAh
db  82h
db 0C8h
db    1
db 0CBh
db  82h
db 0C9h
db    1
db 0CCh
db  82h
db 0CAh
db    3
db 0CDh
db  82h
db 0CBh
db    3
db 0D0h
db  82h
db 0CCh
db    3
db 0D3h
db  82h
db 0CDh
db    3
db 0D6h
db  82h
db 0CEh
db    3
db 0D9h
db  82h
db 0CFh
db    1
db 0DCh
db  82h
db 0D0h
db    1
db 0DDh
db  82h
db 0D1h
db    1
db 0DEh
db  82h
db 0D2h
db    1
db 0DFh
db  82h
db 0D3h
db    1
db 0E0h
db  82h
db 0ACh
db    1
db 0E1h
db  82h
db 0D4h
db    1
db 0E2h
db  82h
db 0ADh
db    1
db 0E3h
db  82h
db 0D5h
db    1
db 0E4h
db  82h
db 0AEh
db    1
db 0E5h
db  82h
db 0D6h
db    1
db 0E6h
db  82h
db 0D7h
db    1
db 0E7h
db  82h
db 0D8h
db    1
db 0E8h
db  82h
db 0D9h
db    1
db 0E9h
db  82h
db 0DAh
db    1
db 0EAh
db  82h
db 0DBh
db    1
db 0EBh
db  82h
db 0DCh
db    2
db 0ECh
db  82h
db 0B2h
db    1
db 0EEh
db  82h
db 0B4h
db    1
db 0EFh
db  82h
db 0A6h
db    1
db 0F0h
db  82h
db 0DDh
db    1
db 0F1h
db  82h
db  20h
db    1
db  40h ; @
db  81h
db 0A1h
db    1
db  42h ; B
db  81h
db 0A2h
db    1
db  75h ; u
db  81h
db 0A3h
db    1
db  76h ; v
db  81h
db 0A4h
db    1
db  41h ; A
db  81h
db 0A5h
db    1
db  45h ; E
db  81h
db 0B0h
db    1
db  5Bh ; [
db  81h
db 0DEh
db    1
db  4Ah ; J
db  81h
db 0DFh
db    1
db  4Bh ; K
db  81h
db    0
db    0
db    0
db    0
word_27864 dw 0
word_27866 dw 0
off_27868 dw offset locret_1D72C
off_2786A dw offset locret_1D72C
off_2786C dw offset locret_1D72C
db    0
db    0
dd 1F5E0000h
db    0
db    0
unk_27876 db    0
db    0
word_27878 dw 0
dword_2787A dd 0
dword_2787E dd 0
dd _flushall
seg_27886 dw seg seg008
seg_27888 dw seg seg008
seg_2788A dw seg seg008
seg_2788C dw seg seg008
seg_2788E dw seg seg008
seg_27890 dw seg seg008
seg_27892 dw seg dseg
seg_27894 dw seg seg008
seg_27896 dw seg seg008
seg_27898 dw seg seg008
seg_2789A dw seg seg008
seg_2789C dw seg seg008
seg_2789E dw seg seg008
seg_278A0 dw seg seg008
seg_278A2 dw seg seg008
seg_278A4 dw seg seg008
seg_278A6 dw seg seg008
seg_278A8 dw seg seg008
seg_278AA dw seg seg008
seg_278AC dw seg dseg
seg_278AE dw seg seg008
seg_278B0 dw seg seg008
seg_278B2 dw seg seg008
seg_278B4 dw seg seg008
seg_278B6 dw seg dseg
seg_278B8 dw seg seg008
seg_278BA dw seg seg008
seg_278BC dw seg seg008
seg_278BE dw seg seg008
seg_278C0 dw seg seg008
seg_278C2 dw seg seg008
seg_278C4 dw seg dseg
seg_278C6 dw seg dseg
seg_278C8 dw seg seg008
seg_278CA dw seg seg008
seg_278CC dw seg seg008
seg_278CE dw seg seg008
seg_278D0 dw seg seg008
seg_278D2 dw seg dseg
seg_278D4 dw seg seg008
aNmsg db '<<NMSG>>',0
align 2
aR6000StackOver db 'R6000',0Dh,0Ah
db '- stack overflow',0Dh,0Ah,0
db    3
db    0
db  52h ; R
db  36h ; 6
db  30h ; 0
db  30h ; 0
db  33h ; 3
db  0Dh
db  0Ah
db  2Dh ; -
db  20h
db  69h ; i
db  6Eh ; n
db  74h ; t
db  65h ; e
db  67h ; g
db  65h ; e
db  72h ; r
db  20h
db  64h ; d
db  69h ; i
db  76h ; v
db  69h ; i
db  64h ; d
db  65h ; e
db  20h
db  62h ; b
db  79h ; y
db  20h
db  30h ; 0
db  0Dh
db  0Ah
db    0
db    9
db    0
db  52h ; R
db  36h ; 6
db  30h ; 0
db  30h ; 0
db  39h ; 9
db  0Dh
db  0Ah
db  2Dh ; -
db  20h
db  6Eh ; n
db  6Fh ; o
db  74h ; t
db  20h
db  65h ; e
db  6Eh ; n
db  6Fh ; o
db  75h ; u
db  67h ; g
db  68h ; h
db  20h
db  73h ; s
db  70h ; p
db  61h ; a
db  63h ; c
db  65h ; e
db  20h
db  66h ; f
db  6Fh ; o
db  72h ; r
db  20h
db  65h ; e
db  6Eh ; n
db  76h ; v
db  69h ; i
db  72h ; r
db  6Fh ; o
db  6Eh ; n
db  6Dh ; m
db  65h ; e
db  6Eh ; n
db  74h ; t
db  0Dh
db  0Ah
db    0
db 0FCh
db    0
db  0Dh
db  0Ah
db    0
db 0FFh
db    0
db  72h ; r
db  75h ; u
db  6Eh ; n
db  2Dh ; -
db  74h ; t
db  69h ; i
db  6Dh ; m
db  65h ; e
db  20h
db  65h ; e
db  72h ; r
db  72h ; r
db  6Fh ; o
db  72h ; r
db  20h
db    0
db    2
db    0
db  52h ; R
db  36h ; 6
db  30h ; 0
db  30h ; 0
db  32h ; 2
db  0Dh
db  0Ah
db  2Dh ; -
db  20h
db  66h ; f
db  6Ch ; l
db  6Fh ; o
db  61h ; a
db  74h ; t
db  69h ; i
db  6Eh ; n
db  67h ; g
db  2Dh ; -
db  70h ; p
db  6Fh ; o
db  69h ; i
db  6Eh ; n
db  74h ; t
db  20h
db  73h ; s
db  75h ; u
db  70h ; p
db  70h ; p
db  6Fh ; o
db  72h ; r
db  74h ; t
db  20h
db  6Eh ; n
db  6Fh ; o
db  74h ; t
db  20h
db  6Ch ; l
db  6Fh ; o
db  61h ; a
db  64h ; d
db  65h ; e
db  64h ; d
db  0Dh
db  0Ah
db    0
db    1
db    0
db  52h ; R
db  36h ; 6
db  30h ; 0
db  30h ; 0
db  31h ; 1
db  0Dh
db  0Ah
db  2Dh ; -
db  20h
db  6Eh ; n
db  75h ; u
db  6Ch ; l
db  6Ch ; l
db  20h
db  70h ; p
db  6Fh ; o
db  69h ; i
db  6Eh ; n
db  74h ; t
db  65h ; e
db  72h ; r
db  20h
db  61h ; a
db  73h ; s
db  73h ; s
db  69h ; i
db  67h ; g
db  6Eh ; n
db  6Dh ; m
db  65h ; e
db  6Eh ; n
db  74h ; t
db  0Dh
db  0Ah
db    0
db 0FFh
db 0FFh
db 0FFh
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
unk_279C0 db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
dseg ends


; Segment type: Uninitialized
seg010 segment byte stack 'STACK' use16
assume cs:seg010
assume es:nothing, ss:nothing, ds:dseg, fs:nothing, gs:nothing
db 800h dup(?)
seg010 ends


end start
